///////////////////////////////////////////////////////////////////////////////
//                                                                            /
//                                                      22/Mar/2010  20:31:38 /
// IAR C/C++ Compiler V5.30.0.20166/W32, Evaluation Version  for Atmel AVR    /
// Copyright 1996-2009 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  G:\AVR\EthRadio_buf_inline\main.c                       /
//    Command line =  --string_literals_in_flash                              /
//                    G:\AVR\EthRadio_buf_inline\main.c --cpu=m32 -ms -o      /
//                    G:\AVR\EthRadio_buf_inline\Debug\Obj\ -lC               /
//                    G:\AVR\EthRadio_buf_inline\Debug\List\ -lB              /
//                    G:\AVR\EthRadio_buf_inline\Debug\List\                  /
//                    --initializers_in_flash -s9 --no_code_motion --debug    /
//                    -DENABLE_BIT_DEFINITIONS -e -I "C:\Program Files\IAR    /
//                    Systems\Embedded Workbench Evaluation 5.3\avr\INC\" -I  /
//                    "C:\Program Files\IAR Systems\Embedded Workbench        /
//                    Evaluation 5.3\avr\INC\CLIB\" --eeprom_size 1024        /
//                    --lock_regs=1                                           /
//    List file    =  G:\AVR\EthRadio_buf_inline\Debug\List\main.s90          /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME main

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG EEPROM_I:DATA:REORDER:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?Register_R6_is_cg_reg
        EXTERN ?Register_R7_is_cg_reg
        EXTERN ?Register_R8_is_cg_reg
        EXTERN ?need_segment_init
        EXTERN __eeget16_16
        EXTERN __eeget32_16
        EXTERN __eeget8_16
        EXTERN __eeput16_16
        EXTERN __eeput8_16

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBLIC AddHTTPsocket
        PUBLIC BufferPKT
        PUBWEAK DUMMY_EEPROM
        PUBLIC EEPROM_RESTORED
        PUBLIC FIFO_pkt_TS
        PUBLIC HTTP_LOGIN
        PUBLIC HTTP_PASS
        PUBLIC HTTP_hook
        PUBLIC IP_EEPROM
        PUBLIC InitVars
        PUBLIC IsGoodHTTPreq
        PUBLIC MAC_EEPROM
        PUBLIC MASK_IP_EEPROM
        PUBLIC MP3indic
        PUBLIC OUTG_IP
        PUBLIC PLAYER_STATE
        PUBLIC REFRESH_EEPROM
        PUBLIC SYNC_EE_
        PUBLIC VS_BUFFER32
        PUBLIC WDT_Prescaler_Change
        PUBWEAK _A_DDRD
        PUBWEAK _A_OCR1A
        PUBWEAK _A_PIND
        PUBWEAK _A_PORTB
        PUBWEAK _A_PORTD
        PUBWEAK _A_SPDR
        PUBWEAK _A_SPSR
        PUBWEAK _A_TCCR1A
        PUBWEAK _A_TCCR1B
        PUBWEAK _A_TCCR2
        PUBWEAK _A_TIMSK
        PUBWEAK _A_TWAR
        PUBLIC _Hello_string
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC http_q_c
        PUBLIC http_q_c_pos
        PUBLIC http_sock
        PUBLIC i2a
        PUBLIC main
        PUBLIC stradd_E
        PUBLIC stradd_P
        PUBLIC stricmp_P

        EXTERN AddTCPsocket
        EXTERN _i2a
        EXTERN StartGET
        EXTERN strlen
        EXTERN MD5cheat
        EXTERN strcpy
        EXTERN strncmp
        EXTERN netw_memcpy
        EXTERN VS_INIT
        EXTERN VS_VOL
        EXTERN uart_init
        EXTERN _print_fstr
        EXTERN nic_init
        EXTERN InitEthernetHW
        EXTERN fifo_init
        EXTERN AddGETsocket
        EXTERN LCD_init_4
        EXTERN LCD_fprintlineEE
        EXTERN LCD_TCPstate
        EXTERN LCD_PLAYERstate
        EXTERN nic_poll
        EXTERN INT_ETH_PROCESS_PKT2
        EXTERN LCD_fprintline
        EXTERN CHUNKS
        EXTERN ETH_PKT
        EXTERN ETH_PKT_len
        EXTERN ETH_PKT_mode
        EXTERN ETHfifo_CNT
        EXTERN ETHfifo_pRD
        EXTERN ETHfifo_pWR
        EXTERN Enc28j60Bank
        EXTERN GET_WINDOW_STATE
        EXTERN IP
        EXTERN Keyboard_task
        EXTERN MAC0
        EXTERN MASK_IP
        EXTERN MP3fifo_pRD
        EXTERN MP3fifo_pWR
        EXTERN _A_count_200ms_low
        EXTERN get_sock
        EXTERN http_302
        EXTERN http_302s
        EXTERN http_302z
        EXTERN http_401
        EXTERN http_401stale
        EXTERN http_404
        EXTERN http_eeprom_refr_button
        EXTERN http_root
        EXTERN http_root_level1
        EXTERN http_root_level2
        EXTERN http_root_level3
        EXTERN http_s
        EXTERN http_z
        EXTERN stationNum
        EXTERN stationNum_EEPROM
        EXTERN station_list

// G:\AVR\EthRadio_buf_inline\main.c
//    1 /* Name: main.c
//    2  * Project: uNikeE - Software Ethernet MAC and upper layers stack
//    3  * Author: Dmitry Oparin aka Rst7/CBSIE
//    4  * Creation Date: 25-Jan-2009
//    5  * Copyright: (C)2008,2009 by Rst7/CBSIE
//    6  * License: GNU GPL v3 (see http://www.gnu.org/licenses/gpl-3.0.txt)
//    7  */
//    8 
//    9 #include "nic.h"

        ASEGN ABSOLUTE:DATA:NOROOT,022H
// <__C6> volatile __io _A_TWAR
_A_TWAR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,02eH
// <__C30> volatile __io _A_SPSR
_A_SPSR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,02fH
// <__C32> volatile __io _A_SPDR
_A_SPDR:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,030H
// <__C34> volatile __io _A_PIND
_A_PIND:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,031H
// <__C36> volatile __io _A_DDRD
_A_DDRD:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,032H
// <__C38> volatile __io _A_PORTD
_A_PORTD:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,038H
// <__C50> volatile __io _A_PORTB
_A_PORTB:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,045H
// <__C77> volatile __io _A_TCCR2
_A_TCCR2:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04aH
// <__C89> volatile __io _A_OCR1A
_A_OCR1A:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,04eH
// <__C95> volatile __io _A_TCCR1B
_A_TCCR1B:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04fH
// <__C97> volatile __io _A_TCCR1A
_A_TCCR1A:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,059H
// <__C118> volatile __io _A_TIMSK
_A_TIMSK:
        DS8 1
//   10 #include "network.h"
//   11 #include "nike_e.h"
//   12 #include "tcp.h"
//   13 #include "pages.h"
//   14 #include "pgmspace.h"
//   15 
//   16 #include "http_srv.h"
//   17 #include "io.h"
//   18 
//   19 #include "vs.h"
//   20 #include "lcd.h"
//   21 #include "FIFO.h"
//   22 #include "http_get.h"
//   23 #include "station.h"
//   24 #include "kb.h"
//   25 #include "player.h"
//   26 
//   27 //#include "revision.c"
//   28 
//   29 //#define TIFR_OCF1B  TIFR&(1<<OCF1B)
//   30 
//   31 
//   32 //char i2a_buf[5];

        RSEG NEAR_N:DATA:NOROOT(0)
//   33 __no_init UINT16  MP3indic;
MP3indic:
        DS8 2

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   34 UREG http_q_c_pos;
http_q_c_pos:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   35 TCP_QUE_CLIENT http_q_c[4];
http_q_c:
        DS8 72
//   36 

        ASEGN EEPROM_AN:XDATA:ROOT,00H
//   37 __root __eeprom char DUMMY_EEPROM@ 0 =0x55 ;
DUMMY_EEPROM:
        DC8 85
//   38 //volatile char EEPROM_FAULT; //Глобальная ошибка EEPROM

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//   39 volatile char EEPROM_RESTORED; //Восстановлено 2 из 3
EEPROM_RESTORED:
        DS8 1
//   40 
//   41 extern UINT8 MAC0[];
//   42 extern UINT8 MAC_GATE0[];
//   43 extern UINT32 IP;
//   44 extern UINT32 MASK_IP;
//   45 

        RSEG EEPROM_I:XDATA:NOROOT(0)
//   46 __eeprom UINT32 OUTG_IP[2]={IP2UINT32(192,168,113,2),IP2UINT32(192,168,113,1)};
//   47 __eeprom UINT32 MASK_IP_EEPROM={IP2UINT32(255,255,255,0)};
MASK_IP_EEPROM:
        DD 16777215
//   48 __eeprom char MAC_EEPROM[ETH_HWA_LEN]={0x00,0x13,0x12,0x19,0x80,0x28};
//   49 __eeprom UINT32 IP_EEPROM=IP2UINT32(192,168,113,3);
IP_EEPROM:
        DD 57780416
OUTG_IP:
        DD 41003200, 24225984
MAC_EEPROM:
        DC8 0, 19, 18, 25, 128, 40
//   50 __eeprom char HTTP_LOGIN[16]="root";
HTTP_LOGIN:
        DC8 "root"
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//   51 __eeprom char HTTP_PASS[16]="root";
HTTP_PASS:
        DC8 "root"
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        RSEG EEPROM_I:DATA:REORDER:NOROOT(0)
//   52 
//   53 #pragma inline = forced
//   54 UINT32 _MP3fifo_len(void)
//   55 {
//   56 	UINT32 len;
//   57 
//   58 	if(MP3fifo_pRD > MP3fifo_pWR)
//   59 	{
//   60 		len = MP3fifo_pEND-MP3fifo_pRD+1+MP3fifo_pWR-MP3fifo_pSTART;
//   61 	}
//   62 	else if(MP3fifo_pRD < MP3fifo_pWR)
//   63 	{
//   64 		len = MP3fifo_pWR-MP3fifo_pRD;
//   65 	}
//   66 	else
//   67 	{
//   68 		len = 0;
//   69 	}
//   70 
//   71 	return len;
//   72 }
//   73 

        RSEG NEAR_N:DATA:NOROOT(0)
//   74 __no_init UINT8 VS_BUFFER32 [32];
VS_BUFFER32:
        DS8 32
//   75 
//   76 #pragma inline = forced
//   77 UINT8 _MP3fifo_read32()
//   78 {
//   79 	UINT32 pRD;
//   80 	UINT8 c;
//   81         UREG d;
//   82         UINT8* data=&VS_BUFFER32[0];
//   83 //        MP3len=_MP3fifo_len();
//   84         if (_MP3fifo_len()<32) return 0; // если в буфере <32 байт, то выходим с 0
//   85 //        MP3indic=(UINT16) (MP3len>>8);        
//   86 	pRD = MP3fifo_pRD;
//   87         
//   88         if ((pRD+32) <= MP3fifo_pEND)   // перехода на начало не будет                                     
//   89         {                               //можно считывать все 32 байта подряд
//   90        	  FM_CS_ENABLE();                              
//   91 	  SPDR=FM_READ;
//   92           UREG addr;
//   93           addr=(pRD>>16);
//   94           while (!(SPSR & (1<<SPIF)));
//   95 	  SPDR=addr;
//   96           addr=(pRD>>8);
//   97           while (!(SPSR & (1<<SPIF)));
//   98 	  SPDR=addr;
//   99           addr=(pRD);        
//  100           while (!(SPSR & (1<<SPIF)));
//  101       	  SPDR=addr;
//  102        	  d = 0xff;
//  103           while (!(SPSR & (1<<SPIF)));          
//  104 	  SPDR = d;
//  105           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 1
//  106           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 2
//  107           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 3
//  108           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 4
//  109           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 5
//  110           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 6
//  111           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 7
//  112           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 8
//  113           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 9
//  114           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //10
//  115           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //11
//  116           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //12
//  117           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //13
//  118           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //14
//  119           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //15
//  120           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //16
//  121           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 1
//  122           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 2
//  123           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 3
//  124           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 4
//  125           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 5
//  126           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 6
//  127           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 7
//  128           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 8
//  129           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 9
//  130           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //10
//  131           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //11
//  132           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //12
//  133           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //13
//  134           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //14
//  135           while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //15
//  136           while (!(SPSR & (1<<SPIF))); c = SPDR; *data = c; //16
//  137 	  FM_CS_DISABLE();     
//  138           pRD += 32; // сместим указатель чтения на первый непрочитанный элемент (переноса не будет)
//  139 	  MP3fifo_pRD = pRD;                    
//  140         }
//  141         else // при чтении надо будет перенести указатель на старт - будем читать 2мя порциями
//  142         {
//  143           UINT8 i, len1, len2;          
//  144           len1=MP3fifo_pEND-pRD+1; // первая порция - читаем до потолка
//  145           len2 = 32-len1;// вторая порция - адрес на старт и продолжаем
//  146           if (len1)
//  147           {
//  148             UREG addr;
//  149             FM_CS_ENABLE();
//  150             SPDR=FM_READ;
//  151             addr = (UREG) (pRD>>16);
//  152             while (!(SPSR & (1<<SPIF)));
//  153 	    SPDR= addr;
//  154             addr= (UREG)(pRD>>8); 
//  155             while (!(SPSR & (1<<SPIF)));
//  156 	    SPDR=addr;
//  157             addr= (UREG)(pRD);
//  158             while (!(SPSR & (1<<SPIF)));
//  159       	    SPDR= addr;       
//  160             d = 0xFF;
//  161             while (!(SPSR & (1<<SPIF)));
//  162             for (i=0; i<len1; i++)
//  163             {
//  164               SPDR = d;
//  165               while (!(SPSR & (1<<SPIF)));
//  166               *data++= SPDR;
//  167             }
//  168             FM_CS_DISABLE();
//  169             pRD=MP3fifo_pSTART; // ставим начальный адрес (двигаем хвост)
//  170             MP3fifo_pRD = pRD; // указатель чтения мп3 данных  
//  171           } 
//  172           // и если есть что читать - дочитываем
//  173           if (len2)
//  174           {
//  175             UREG addr;
//  176             FM_CS_ENABLE();
//  177 	    SPDR=FM_READ;
//  178             addr=(UREG)(pRD>>16);
//  179             while (!(SPSR & (1<<SPIF)));
//  180 	    SPDR=addr;
//  181             addr=(UREG)(pRD>>8);  
//  182             while (!(SPSR & (1<<SPIF)));
//  183 	    SPDR=addr;
//  184             addr=(UREG)(pRD);        
//  185             while (!(SPSR & (1<<SPIF)));
//  186       	    SPDR=addr;
//  187             pRD+=len2;// сдвигаем хвост на кол-во прочитанных байт и прибавляем 1 для указания на след. непрочитанный          
//  188 	    MP3fifo_pRD = pRD; // указатель чтения мп3 данных          
//  189       	    d = 0xff;            
//  190             while (!(SPSR & (1<<SPIF)));            
//  191             for (i=0; i<len2; i++)
//  192             {
//  193               SPDR = d;
//  194               while (!(SPSR & (1<<SPIF)));
//  195               *data++ = SPDR;
//  196             }            
//  197             FM_CS_DISABLE();
//  198           }
//  199         }
//  200             data=&VS_BUFFER32[0];
//  201 //            cbr (SPSR, SPI2X); // set low freq. 1/4 SCLK (4MHz)
//  202             VS_DS_clr();
//  203             SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//0
//  204             SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//2
//  205             SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//4
//  206             SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//6
//  207             SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//8
//  208             SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//10
//  209             SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//12
//  210             SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//14
//  211             SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//16
//  212             SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//18
//  213             SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//20
//  214             SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//22
//  215             SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//24
//  216             SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//26
//  217             SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//28
//  218             SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data;while (!(SPSR & (1<<SPIF)));//30-31
//  219             VS_DS_set();
//  220 //            sbr (SPSR, SPI2X); // set high freq. 1/2 SCLK (8MHz)
//  221 	return 1;
//  222 }
//  223 
//  224 extern char const __flash _EthWRlen[];
//  225 extern char const __flash _EthTS[]; 
//  226 extern char const __flash _EthCNT[];
//  227 extern char const __flash _EthpWRH[];
//  228 extern char const __flash _EthpWRL[];
//  229 
//  230 extern char const __flash _EthRDlen[];
//  231 extern char const __flash _EthpRDH[];
//  232 extern char const __flash _EthpRDL[];
//  233 
//  234 #pragma inline = forced
//  235 UINT32 _ETHfifo_len(void)
//  236 {
//  237 	UINT32 len;
//  238 
//  239 	if(ETHfifo_pRD > ETHfifo_pWR)
//  240 	{
//  241 		len = ETHfifo_pEND-ETHfifo_pRD+1+ETHfifo_pWR-ETHfifo_pSTART;
//  242 	}
//  243 	else if(ETHfifo_pRD < ETHfifo_pWR)
//  244 	{
//  245 		len = ETHfifo_pWR-ETHfifo_pRD;
//  246 	}
//  247 	else
//  248 	{
//  249 		len = 0;
//  250 	}
//  251 
//  252 	return len;
//  253 }
//  254 
//  255 // Читаем пакет, длину, таймаут
//  256 #pragma inline = forced
//  257 UINT16 ETHfifo_PKT_read(UINT8* data, UINT8* TS)
//  258 {
//  259 	UINT32 pRD; //локальный указатель на запись
//  260         UINT16 len1, len;        
//  261 	UREG c;
//  262 	UINT8 header_cnt=0;
//  263        	pRD = ETHfifo_pRD;
//  264         
//  265 //       len+=3; //  к длине Ethernet пакета добавим 2 байта его длины и 1 байт метки времени
//  266 //        #ifdef CONSOLE_DEBUG
//  267 //           _print_num (_EthRDlen,len); _print_num (_EthTS,(UINT16)TS);
//  268 //           _print_num (_EthpRDH,(UINT16)(pRD>>16)); _print_num (_EthpRDL,(UINT16)pRD);
//  269 //        #endif
//  270 //        len1=len;
//  271         
//  272   	FM_CS_ENABLE();
//  273         SPDR=FM_READ;
//  274         while (!(SPSR & (1<<SPIF)));
//  275         SPDR=(pRD>>16);
//  276         while (!(SPSR & (1<<SPIF)));
//  277         SPDR=(pRD>>8);
//  278         while (!(SPSR & (1<<SPIF)));
//  279         SPDR=(pRD);
//  280         while (!(SPSR & (1<<SPIF)));
//  281         // Открыли сессию чтения из FIFO                         
//  282         len1=1;
//  283         do
//  284         {
//  285           UREG f=0;
//  286           SPDR = 0xFF;
//  287           if (++pRD>ETHfifo_pEND) f=1; // при чтении след. ячейки упремся в потолок... начнем с начала
//  288           while (!(SPSR & (1<<SPIF))); // wait SPI comm. finished                 
//  289           c=SPDR; // прочитали байт из FRAM          
//  290           switch (header_cnt)
//  291           {
//  292             case 0:
//  293               len=(UINT16)(c<<8); // прочитали старший байт длины пакета
//  294               len1++;
//  295               header_cnt++;
//  296               break;
//  297             case 1:
//  298               len|=(UINT16)c; //len1 - считали младший байт длины пакета
//  299               len1++;
//  300               header_cnt++;
//  301               break;
//  302             case 2:  
//  303               *TS=(UINT8)c; // считали метку времени и запомнили ее
//  304               header_cnt++; // 
//  305               // Ограничим длину пакета на всякий случай, чтоб при отладке не запороть ОЗУ)
//  306               if (len> ETH_MAX_PACKET_SIZE) len = ETH_MAX_PACKET_SIZE;
//  307               if (_ETHfifo_len() < (UINT32) len) return 0; // в буфер записано меньше, чем пытаемся считать
//  308               len1=len+1; // обновим длину цикла с учетом длины пакета+1
//  309               #ifdef CONSOLE_DEBUG
//  310               _print_num (_EthRDlen,len); _print_num (_EthTS,(UINT16)(*TS));
//  311               _print_num (_EthpRDH,(UINT16)((pRD-1)>>16)); _print_num (_EthpRDL,(UINT16)(pRD-1));
//  312               #endif
//  313               break;
//  314             default:
//  315               *data++=c; // считали очередной байт пакета
//  316               break;
//  317           }             	
//  318           if (f) // при чтении след. ячейки упремся в потолок... начнем с начала
//  319           {
//  320        	    FM_CS_DISABLE(); // закроем старую сессию    
//  321             pRD=ETHfifo_pSTART;
//  322   	    FM_CS_ENABLE();            
//  323             SPDR=FM_READ;
//  324             while (!(SPSR & (1<<SPIF)));
//  325             SPDR=(pRD>>16);
//  326             while (!(SPSR & (1<<SPIF)));
//  327             SPDR=(pRD>>8);
//  328             while (!(SPSR & (1<<SPIF)));
//  329             SPDR=(pRD);
//  330             while (!(SPSR & (1<<SPIF)));
//  331         // Открыли сессию чтения из FIFO                                   
//  332           }
//  333         }
//  334         while (len1--);        
//  335         FM_CS_DISABLE();
//  336         ETHfifo_pRD=pRD; // запомнили текущее значение указателя чтения
//  337         ETHfifo_CNT--;// уменьшаем счетчик пакетов в FIFO
//  338         #ifdef CONSOLE_DEBUG
//  339             _print_num (_EthCNT,(UINT16)ETHfifo_CNT);
//  340         #endif       
//  341         return len;    
//  342 }
//  343 
//  344 
//  345 
//  346 #pragma inline=forced
//  347 const char __flash *OnOff_P(UREG flag)
//  348 {
//  349   return !flag?"On":"Off";
//  350 }
//  351 

        RSEG CODE:CODE:NOROOT(1)
//  352 char *stradd_E(char *d, char __eeprom *s)
stradd_E:
//  353 {
        MOVW    R31:R30, R17:R16
//  354   char c;
//  355   UREG max=15;
        LDI     R17, 15
//  356   do
//  357   {
//  358     c=*s++;
??stradd_E_0:
        MOVW    R21:R20, R19:R18
        CALL    __eeget8_16
        SUBI    R18, 255
        SBCI    R19, 255
//  359     if (!(--max)) c=0;
        DEC     R17
        BRNE    ??stradd_E_1
        LDI     R16, 0
//  360     *d++=c;
??stradd_E_1:
        ST      Z+, R16
//  361   }
//  362   while(c);
        TST     R16
        BRNE    ??stradd_E_0
//  363   return d-1;
        SBIW    R31:R30, 1
        MOVW    R17:R16, R31:R30
        RET
//  364 }
//  365 

        RSEG CODE:CODE:NOROOT(1)
//  366 __x_z char *stradd_P(char *d, char __flash *s)
stradd_P:
??stradd_P_0:
//  367 {
//  368   char c;
//  369   do
//  370   {
//  371     c=*s++;
        LPM     R16, Z+
//  372     *d++=c;
        ST      X+, R16
//  373   }
//  374   while(c);
        TST     R16
        BRNE    ??stradd_P_0
//  375   return d-1;
        SBIW    R27:R26, 1
        MOVW    R17:R16, R27:R26
        RET
//  376 }
//  377 
//  378 void MD5cheat(char *out, unsigned char *p, UREG len);
//  379 
//  380 //Секретный ключ MD5(login+':'+realm+':'+pass)+':'
//  381 #define AUTH_A1 (MD5_Buffer+0)
//  382 //nonce, который мы передаем клиенту + ':'
//  383 #define AUTH_srv_nonce (MD5_Buffer+33)
//  384 //MD5(METHOD+':'+URL), он же будет буфером исходных данных для изготовления A1, A2
//  385 #define AUTH_A2 (MD5_Buffer+66)
//  386 
//  387 #define ASCIIZ_CHUNK (255)
//  388 #define FLASH_ASCIIZ_CHUNK (254)
//  389 #define EEPROM_ASCIIZ_CHUNK (253)
//  390 #define NO_CHUNK (0)
//  391 
//  392 

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
//  393 HTTP_SOCK http_sock;
http_sock:
        DS8 238
//  394 
//  395 #define MD5_Buffer (http_sock._MD5_Buffer)
//  396 
//  397 extern void *debug_addr;
//  398 
//  399 //================================================================

        RSEG CODE:CODE:NOROOT(1)
//  400 void AddHTTPsocket(void)
AddHTTPsocket:
//  401 {
//  402   __x UREG HTTP_hook(UREG state, UREG len, UINT8 *data, TCP_SOCK *_s);
//  403   http_sock.sock.lport=htons(80);
        LDI     R30, LOW(http_sock)
        LDI     R31, (http_sock) >> 8
        LDI     R19, 80
        LDI     R18, 0
        STD     Z+15, R18
        STD     Z+16, R19
//  404   http_sock.sock.type=TCP_TYPE_SERVER;
        LDI     R16, 1
        STD     Z+2, R16
//  405   http_sock.sock.state=TCP_STATE_LISTENING;
        STD     Z+27, R16
//  406   http_sock.sock.hook=HTTP_hook;
        LDI     R16, LOW(HTTP_hook/2)
        LDI     R17, (HTTP_hook/2) >> 8
        STD     Z+3, R16
        STD     Z+4, R17
//  407   http_sock.sock.win=htons(0x800);
        LDI     R19, 0
        LDI     R18, 8
        STD     Z+29, R18
        STD     Z+30, R19
//  408   AddTCPsocket(&http_sock.sock);
        JMP     AddTCPsocket
//  409 }
//  410 //================================================================
//  411 __x_z UREG stricmp_P(const char *s, const char __flash *d);
//  412 
//  413 static __x_z UREG stricmp_PSOCK(HTTP_SOCK *hs, const char __flash *d)
//  414 {
//  415   return stricmp_P(hs->http_hdr_item,d);
//  416 }
//  417 

        RSEG CODE:CODE:NOROOT(1)
//  418 __x_z UREG stricmp_P(const char *s, const char __flash *d)
stricmp_P:
??stricmp_P_0:
//  419 {
//  420   UREG cs;
//  421   UREG cd;
//  422   do
//  423   {
//  424     cs=*s++;
        LD      R16, X+
//  425     cd=*d++;
        LPM     R17, Z+
//  426     if (cs>='a'&&cs<='z') cs+='A'-'a';
        CPI     R16, 97
        BRCS    ??stricmp_P_1
        CPI     R16, 123
        BRCC    ??stricmp_P_1
        SUBI    R16, 32
//  427     if (cd>='a'&&cd<='z') cd+='A'-'a';
??stricmp_P_1:
        CPI     R17, 97
        BRCS    ??stricmp_P_2
        CPI     R17, 123
        BRCC    ??stricmp_P_2
        SUBI    R17, 32
//  428     if (!cs) break;
??stricmp_P_2:
        TST     R16
        BREQ    ??stricmp_P_3
//  429     if (!cd) break;
        TST     R17
        BREQ    ??stricmp_P_3
//  430   }
//  431   while(cs==cd);
        CP      R16, R17
        BREQ    ??stricmp_P_0
//  432   return cs-cd;
??stricmp_P_3:
        SUB     R16, R17
        RET
//  433 }
//  434 
//  435 
//  436 __z void _i2a(char *s, UINT16 v);
//  437 
//  438 #pragma optimize=no_inline

        RSEG CODE:CODE:NOROOT(1)
//  439 __z void i2a(char *s, UINT16 v)
i2a:
//  440 {
//  441   _i2a(s,v);
        JMP     _i2a
//  442 }
//  443 
//  444 static const char __flash * __flash HTTP_LEVELS[]={http_root_level1,http_root_level2,http_root_level3,http_eeprom_refr_button};
//  445 
//  446 enum _LIST_OF_HTTP_REQS
//  447 {
//  448   _NOT_A_GOOD_HTTP_REQ=0,
//  449   _GET_root,
//  450   _GET_z,
//  451   _GET_s,
//  452   _POST_w,
//  453   _POST_m,
//  454   _POST_b,
//  455   _POST_e,
//  456   _POST_r,
//  457   _POST_z,
//  458   _POST_f,
//  459   _POST_p,
//  460   _POST_s,
//  461 };
//  462 
//  463 /*static const char __flash SELTAGS_1[]=" SELECTED>";
//  464 
//  465 #pragma optimize=no_inline
//  466 static const char __flash * __get_SELECTED(void)
//  467 {
//  468   return SELTAGS_1;
//  469 }
//  470 
//  471 #pragma optimize=no_inline
//  472 static const char __flash * __get_ETAG(void)
//  473 {
//  474   return SELTAGS_1+9;
//  475 }
//  476 
//  477 #pragma optimize=no_inline
//  478 static const char __flash * __get_CHECKED(void)
//  479 {
//  480   return " CHECKED>";
//  481 }*/
//  482 
//  483 #pragma optimize=no_inline

        RSEG CODE:CODE:NOROOT(1)
//  484 static const char __flash *__get_SVN_Revision(void)
__get_SVN_Revision:
//  485 {
//  486   return "2";
        LDI     R16, LOW(`?<Constant "2">`)
        LDI     R17, (`?<Constant "2">`) >> 8
        RET
//  487 }
//  488 

        RSEG CODE:CODE:NOROOT(1)
//  489 __z UREG IsGoodHTTPreq(HTTP_SOCK *hs)
IsGoodHTTPreq:
//  490 {
//  491   UREG c=hs->req[0];
        SUBI    R30, 157
        SBCI    R31, 255
        LD      R18, Z
//  492   UREG c5=hs->req[5];
        LDD     R17, Z+5
//  493   UREG c6=hs->req[6];
        LDD     R16, Z+6
//  494   if (c=='G')
        CPI     R18, 71
        BRNE    ??IsGoodHTTPreq_0
//  495   {
//  496     if (c5=='\0') return _GET_root;
        TST     R17
        BRNE    ??IsGoodHTTPreq_1
        LDI     R16, 1
        RET
//  497     if (c5=='z') return _GET_z;
??IsGoodHTTPreq_1:
        CPI     R17, 122
        BRNE    ??IsGoodHTTPreq_2
        LDI     R16, 2
        RET
//  498     if (c5=='s') return _GET_s;
??IsGoodHTTPreq_2:
        CPI     R17, 115
        BRNE    ??IsGoodHTTPreq_3
        LDI     R16, 3
        RET
//  499   }
//  500   else
//  501     if (c=='P')
??IsGoodHTTPreq_0:
        CPI     R18, 80
        BRNE    ??IsGoodHTTPreq_3
//  502     {
//  503       if (c6=='w') return _POST_w;
        CPI     R16, 119
        BRNE    ??IsGoodHTTPreq_4
        LDI     R16, 4
        RET
//  504       if (c6=='m') return _POST_m;
??IsGoodHTTPreq_4:
        CPI     R16, 109
        BRNE    ??IsGoodHTTPreq_5
        LDI     R16, 5
        RET
//  505       if (c6=='e') return _POST_e;
??IsGoodHTTPreq_5:
        CPI     R16, 101
        BRNE    ??IsGoodHTTPreq_6
        LDI     R16, 7
        RET
//  506       if (c6=='r') return _POST_r;
??IsGoodHTTPreq_6:
        CPI     R16, 114
        BRNE    ??IsGoodHTTPreq_7
        LDI     R16, 8
        RET
//  507       if (c6=='z') return _POST_z;
??IsGoodHTTPreq_7:
        CPI     R16, 122
        BRNE    ??IsGoodHTTPreq_8
        LDI     R16, 9
        RET
//  508       if (c6=='f') return _POST_f;
??IsGoodHTTPreq_8:
        CPI     R16, 102
        BRNE    ??IsGoodHTTPreq_9
        LDI     R16, 10
        RET
//  509       if (c6=='p') return _POST_p;
??IsGoodHTTPreq_9:
        CPI     R16, 112
        BRNE    ??IsGoodHTTPreq_10
        LDI     R16, 11
        RET
//  510       if (c6=='s') return _POST_s;
??IsGoodHTTPreq_10:
        CPI     R16, 115
        BRNE    ??IsGoodHTTPreq_3
        LDI     R16, 12
        RET
//  511     }
//  512   return _NOT_A_GOOD_HTTP_REQ;
??IsGoodHTTPreq_3:
        LDI     R16, 0
        RET
//  513 }
//  514 
//  515 //#pragma optimize=no_inline
//  516 #pragma inline=forced
//  517 static const char *__get_AUTH_srv_nonce(void)
//  518 {
//  519   return AUTH_srv_nonce;
//  520 }
//  521 
//  522 #pragma segment="EEPROM_I"

        RSEG CODE:CODE:NOROOT(1)
//  523 void REFRESH_EEPROM(void)
REFRESH_EEPROM:
//  524 {
//  525   if (EEPROM_RESTORED)
        LDS     R16, EEPROM_RESTORED
        TST     R16
        BREQ    ??REFRESH_EEPROM_0
//  526   {
//  527     //volatile char __eeprom *p=(volatile char __eeprom *)__segment_begin("EEPROM_I");
//  528     volatile char __eeprom *p=(volatile char __eeprom *)MAC_EEPROM;
        LDI     R20, LOW((MASK_IP_EEPROM + 16))
        LDI     R21, HIGH((MASK_IP_EEPROM + 16))
//  529     do
//  530     {
//  531       char c;
//  532       EEPROM_RESTORED=0;
??REFRESH_EEPROM_1:
        LDI     R16, 0
        STS     EEPROM_RESTORED, R16
//  533       c=*p;
        CALL    __eeget8_16
//  534       if (EEPROM_RESTORED)
        LDS     R17, EEPROM_RESTORED
        TST     R17
        BREQ    ??REFRESH_EEPROM_2
//  535       {
//  536 	*p=c;
        CALL    __eeput8_16
//  537 	EEPROM_RESTORED=0;
        LDI     R16, 0
        STS     EEPROM_RESTORED, R16
//  538 	c=*p;
        CALL    __eeget8_16
//  539 	if (EEPROM_RESTORED) break; //Не восстанавливается
        LDS     R16, EEPROM_RESTORED
        TST     R16
        BRNE    ??REFRESH_EEPROM_0
//  540       }
//  541     }
//  542     while(++p!=(volatile char __eeprom *)__segment_end("EEPROM_I"));
??REFRESH_EEPROM_2:
        SUBI    R20, 255
        SBCI    R21, 255
        LDI     R17, (SFE(EEPROM_I)) >> 8
        CPI     R20, LOW(SFE(EEPROM_I))
        CPC     R21, R17
        BRNE    ??REFRESH_EEPROM_1
//  543   }
//  544 }
??REFRESH_EEPROM_0:
        RET
//  545 

        RSEG CODE:CODE:NOROOT(1)
//  546 void SYNC_EE_(void)
SYNC_EE_:
//  547 {
//  548 }
        RET
//  549 

        RSEG CODE:CODE:NOROOT(1)
//  550 static __z void SetupRegister(UREG select_n, HTTP_SOCK *s)
SetupRegister:
//  551 {
        MOV     R18, R16
//  552   void StartGET(void);
//  553   UINT16 value=s->value;
        LDD     R16, Z+62
//  554   
//  555   if (select_n>=243)//IsGoodHTTPreq(s)==_POST_z)
        CPI     R18, 243
        BRCS    ??SetupRegister_0
//  556   {
//  557     select_n-=243;
        SUBI    R18, 243
//  558     if (select_n<4)
        CPI     R18, 4
        BRCC    ??SetupRegister_1
//  559     {
//  560       ((char __eeprom *)(&IP_EEPROM))[select_n]=value;
        LDI     R20, LOW((MASK_IP_EEPROM + 4))
        LDI     R21, HIGH((MASK_IP_EEPROM + 4))
        RJMP    ??SetupRegister_2
//  561     }
//  562     else
//  563     {
//  564       select_n-=4;
??SetupRegister_1:
        SUBI    R18, 4
//  565       if (select_n<ETH_HWA_LEN)
        CPI     R18, 6
        BRCC    ??SetupRegister_3
//  566       {
//  567 	MAC_EEPROM[select_n]=value;
        LDI     R20, LOW((MASK_IP_EEPROM + 16))
        LDI     R21, HIGH((MASK_IP_EEPROM + 16))
??SetupRegister_2:
        LDI     R19, 0
        ADD     R20, R18
        ADC     R21, R19
        JMP     __eeput8_16
//  568       }
//  569     }
//  570     return;
//  571   }
//  572   select_n-=1;
??SetupRegister_0:
        DEC     R18
//  573   if (select_n<8)
        CPI     R18, 8
        BRCC    ??SetupRegister_3
//  574   {
//  575     ((char __eeprom *)(&OUTG_IP))[select_n]=value;
        LDI     R20, LOW((MASK_IP_EEPROM + 8))
        LDI     R21, HIGH((MASK_IP_EEPROM + 8))
        LDI     R19, 0
        ADD     R20, R18
        ADC     R21, R19
        CALL    __eeput8_16
//  576     if (select_n==7) StartGET();
        CPI     R18, 7
        BRNE    ??SetupRegister_3
        CALL    StartGET
??SetupRegister_3:
        RET
//  577     return;
//  578   }
//  579   select_n-=8;
//  580 }
//  581 
//  582 static void StoreDeviceName(const char *s, UREG adr)
//  583 {
//  584 }
//  585 
//  586 enum HTTP_SRV_STATE
//  587 {
//  588   _HTTP_REQ=0,
//  589   _HTTP_LF,
//  590   _HTTP_CR,
//  591   _HTTP_PROP,
//  592   _HTTP_SUBPROP,
//  593   _HTTP_URI,
//  594   _HTTP_RESP,
//  595   _HTTP_CONTENTLEN,
//  596   _HTTP_CONTENTLEN_OK,
//  597   _HTTP_BODY, //Последний \n заголовка, все что дальше - контент
//  598   _HTTP_NAME,
//  599   _HTTP_EQU,
//  600   _HTTP_VALUE,
//  601   _HTTP_BRK,
//  602   _HTTP_AMPERSAND,
//  603   _HTTP_STRING,
//  604   _HTTP_IP,
//  605   _HTTP_STRIP,
//  606   _HTTP_BIN,
//  607   _HTTP_BIN_STAGE2,
//  608   _HTTP_WAIT_USART, //Состояние ожидания готовности USART
//  609   _HTTP_PREP_SEND,
//  610   _HTTP_SEND,
//  611 };
//  612 

        RSEG CODE:CODE:NOROOT(1)
//  613 static __z UINT16 a2i(const char *s)
a2i:
//  614 {
//  615   UREG c;
//  616   UINT16 i=0;
        LDI     R16, 0
        LDI     R17, 0
        LDI     R18, 10
        RJMP    ??a2i_0
//  617   for(;;)
//  618   {
//  619     c=*s++;
//  620     if (c==' ') continue;
//  621     c-='0';
//  622     if (c>9) return i;
//  623     i*=10;
//  624     i+=c;
??a2i_1:
        MUL     R18, R17
        MOV     R19, R0
        MUL     R18, R16
        ADD     R19, R1
        MOV     R16, R0
        MOV     R17, R19
        LDI     R21, 0
        ADD     R16, R20
        ADC     R17, R21
??a2i_0:
        LD      R20, Z+
        CPI     R20, 32
        BREQ    ??a2i_0
        SUBI    R20, 48
        CPI     R20, 10
        BRCS    ??a2i_1
        RET
//  625   }
//  626 }
//  627 
//  628 #pragma optimize=no_code_motion

        RSEG CODE:CODE:NOROOT(1)
//  629 static __x UREG HTTP_hook_DATA_RX(UREG len, UINT8 *data, HTTP_SOCK *s)
HTTP_hook_DATA_RX:
//  630 {
        ST      -Y, R8
        ST      -Y, R7
        ST      -Y, R6
        ST      -Y, R5
        ST      -Y, R4
        ST      -Y, R25
        ST      -Y, R24
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        REQUIRE ?Register_R8_is_cg_reg
        MOV     R8, R16
        MOVW    R7:R6, R27:R26
        MOVW    R5:R4, R19:R18
//  631   UREG state=s->state;
        MOVW    R27:R26, R19:R18
        ADIW    R27:R26, 43
        MOVW    R31:R30, R27:R26
        LDD     R24, Z+2
//  632   UREG val2=s->val2;
        LDD     R25, Z+21
//  633   UREG c;
//  634   UREG i;
//  635   UREG c2;
//  636   const char __flash *p;
//  637   if (state==_HTTP_WAIT_USART) return 0; //Ничего не передаем в ожидании
        CPI     R24, 20
        BRNE    ??HTTP_hook_DATA_RX_0
??HTTP_hook_DATA_RX_1:
        LDI     R16, 0
        RJMP    ??HTTP_hook_DATA_RX_2
//  638   if (state>=_HTTP_PREP_SEND) return 1;
??HTTP_hook_DATA_RX_0:
        CPI     R24, 21
        BRCS    $+2+2
        RJMP    ??HTTP_hook_DATA_RX_3
//  639   if (!len) return 0;
        TST     R16
        BREQ    ??HTTP_hook_DATA_RX_1
//  640   do // начало мегацикла
//  641   {
//  642     c=*data;
??HTTP_hook_DATA_RX_4:
        MOVW    R31:R30, R7:R6
        LD      R16, Z
//  643     switch(state) // пройдемся по состояниям
        MOV     R17, R24
        CPI     R24, 20
        BRCC    ??HTTP_hook_DATA_RX_5
        LDI     R31, 2
        MUL     R17, R31
        MOVW    R31:R30, R1:R0
        SUBI    R30, LOW((-(`?<Jumptable for HTTP_hook_DATA_RX>_0`) & 0xFFFF))
        SBCI    R31, (-(`?<Jumptable for HTTP_hook_DATA_RX>_0`) & 0xFFFF) >> 8
        LPM     R0, Z+
        LPM     R1, Z
        MOVW    R31:R30, R1:R0
        IJMP
//  644     {
//  645     case _HTTP_REQ:
//  646       if ((val2>=5)&&(c<=' '))
??HTTP_hook_DATA_RX_6:
        CPI     R25, 5
        BRCS    ??HTTP_hook_DATA_RX_7
        CPI     R16, 33
        BRCC    ??HTTP_hook_DATA_RX_7
//  647       {
//  648 	state=_HTTP_LF;
??HTTP_hook_DATA_RX_8:
        LDI     R24, 1
//  649 	continue;
        RJMP    ??HTTP_hook_DATA_RX_9
//  650       }
//  651       if (c==' ') c=':';
??HTTP_hook_DATA_RX_7:
        CPI     R16, 32
        BRNE    ??HTTP_hook_DATA_RX_10
        LDI     R16, 58
//  652       s->req[val2++]=c;
??HTTP_hook_DATA_RX_10:
        LDI     R19, 0
        MOVW    R31:R30, R5:R4
        ADD     R30, R25
        ADC     R31, R19
        SUBI    R30, 157
        SBCI    R31, 255
        ST      Z, R16
        INC     R25
//  653       if (val2==(sizeof(s->req)-1))
        CPI     R25, 7
        BREQ    ??HTTP_hook_DATA_RX_8
//  654       {
//  655 	state=_HTTP_LF;
//  656 	continue;
//  657       }
//  658       break;
//  659     case _HTTP_LF:
//  660       if (c==10)
//  661       {
//  662 	val2=0;
//  663 	state=_HTTP_CR;
//  664       }
//  665       break;
//  666     case _HTTP_CR:
//  667       if (c==13)
//  668       {
//  669 	state=_HTTP_BODY;
//  670 	break;
//  671       }
//  672       state=_HTTP_PROP;
//  673       continue;
//  674     case _HTTP_URI:
//  675     case _HTTP_RESP:
//  676       if (c=='"')
//  677       {
//  678 	if (!val2) break;
//  679 	goto L_endkey;
//  680       }
//  681     case _HTTP_SUBPROP:
//  682       if (c=='=') goto L_endkey;
//  683       if (c==',') goto L_endkey; //Запятой тоже разделяется
//  684     case _HTTP_PROP:
//  685       if ((c2=c)<=' ')
//  686       {
//  687       L_endkey:
//  688 	c2=0;
//  689       }
//  690       s->http_hdr_item[val2++]=c2;
//  691       if (c2&&val2<sizeof(s->http_hdr_item)) break; //Следующий символ
//  692       //Конец ключа
//  693       val2=0;
//  694       switch(state)
//  695       {
//  696       case _HTTP_PROP:
//  697 	//Обычные ключи в начале строки
//  698 	state=_HTTP_LF;
//  699 	if (!stricmp_PSOCK(s,"Content-Length:"))
//  700 	{
//  701 	  state=_HTTP_CONTENTLEN;
//  702 	  break;
//  703 	}
//  704 	if (!stricmp_PSOCK(s,"Authorization:"))
//  705 	{
//  706 	  state=_HTTP_SUBPROP;
//  707 	  break;
//  708 	}
//  709 	continue;
//  710       case _HTTP_SUBPROP:
//  711 	if (c<' ')
//  712 	{
//  713 	  state=_HTTP_LF;
//  714 	  continue;
//  715 	}
//  716 	if (c!='=') break;
//  717 	if (!stricmp_PSOCK(s,"response"))
//  718 	{
//  719 	  state=_HTTP_RESP;
//  720 	}
//  721 	if (!stricmp_PSOCK(s,"uri"))
//  722 	{
//  723 	  state=_HTTP_URI;
//  724 	}
//  725 	break;
//  726       case _HTTP_URI:
//  727 	AUTH_A2[0]=s->http_hdr_item[1];
//  728 	state=_HTTP_SUBPROP;
//  729 	break;
//  730       case _HTTP_RESP:
//  731 	if (IsGoodHTTPreq(s))
//  732 	{
//  733 	  //Получили response, теперь надо проверить, правильный ли он
//  734 	  //Для начала изготавливаем A1
//  735 	  //strcpy_P(AUTH_A2,"Rst7:uNikeE:Upor2007");
//  736 	  stradd_E(stradd_P(stradd_E(AUTH_A2,HTTP_LOGIN),":uNikeE:"),HTTP_PASS);
//  737 	  MD5cheat(AUTH_A1,(UINT8*)AUTH_A2,strlen(AUTH_A2));
//  738 	  //Теперь A2
//  739 	  strcpy(AUTH_A2,s->req);
//  740 	  MD5cheat(AUTH_A2,(UINT8*)AUTH_A2,strlen(AUTH_A2));
//  741 	  //И теперь общий результат
//  742 	  AUTH_A1[32]=':';
//  743 	  AUTH_srv_nonce[32]=':';
//  744 	  MD5cheat(AUTH_A1,(UINT8*)MD5_Buffer,98);
//  745 	  if (!strncmp(AUTH_A1,s->http_hdr_item,32))
//  746 	  {
//  747 	    if (s->af.AUTH_MODE<2) s->af.AUTH_MODE++; //1 - есть авторизация, 2 - устарел nonce
//  748 	  }
//  749 	  else
//  750 	  {
//  751 	    s->af.AUTH_MODE=0; //Нет авторизации
//  752 	  }
//  753 	}
//  754 	s->af.AUTH_PRESENT=1;
//  755 	state=_HTTP_LF;
//  756 	continue;
//  757       }
//  758       break;
//  759     case _HTTP_BODY:
//  760       //Последний \n заголовка, готовимся к получению тела
//  761       s->content_length=s->value+1;
//  762       s->value=0;
//  763       state=_HTTP_STRIP; //По умолчанию - пропускаем контент
//  764 #ifdef NDEBUG
//  765       if (!s->af.AUTH_PRESENT) s->af.AUTH_MODE=0;
//  766 #else
//  767       s->af.AUTH_PRESENT=1;
//  768       s->af.AUTH_MODE=1;
//  769 #endif
//  770       c=IsGoodHTTPreq(s);
//  771       if ((s->af.AUTH_MODE==1)||(c==_POST_b))
//  772       {
//  773 	switch(c)
//  774 	{
//  775 	case _POST_m:
//  776 	  //Чистим битмап для работы с чекбоксами, сейчас не используем
//  777 	  //ClearBitmap(RAM_BITMAP);
//  778 	case _POST_w:
//  779 	case _POST_z:
//  780 	  state=_HTTP_NAME; //Будем разбирать текст в запросе POST
//  781 	  break;
//  782         case _POST_f: // Следующая станция
//  783 //          s->statnum++;
//  784           if(s->statnum++ == 15) s->statnum=0;
//  785 /*          
//  786           stationNum++;
//  787           if (stationNum>15) stationNum=0;
//  788           stationNum_EEPROM=stationNum;
//  789 */          
//  790           state=_HTTP_NAME; //Будем разбирать текст в запросе POST
//  791 	  break;  
//  792         case _POST_p: // Предыдущая станция          
//  793           if(s->statnum--==0) s->statnum=15;          
//  794           state=_HTTP_NAME; //Будем разбирать текст в запросе POST
//  795 	  break;                    
//  796         case _POST_s:
//  797           __no_operation();
//  798           state=_HTTP_NAME; //Будем разбирать текст в запросе POST
//  799 //        тут надо разбирать параметры POST
//  800 	  break;    
//  801 	case _POST_e:
//  802 	  REFRESH_EEPROM();
//  803 	  break;
//  804 	}
//  805       }
//  806       break;
//  807     case _HTTP_BIN:
//  808     case _HTTP_CONTENTLEN:
//  809     case _HTTP_NAME:
//  810     case _HTTP_VALUE:
//  811       //Принимаем десятичный символ и накапливаем в s->value
//  812       c-='0';
//  813       if (c>9)
//  814       {
//  815 	state++;//_HTTP_BRK;//state++;
//  816 	continue; //не цифра, следующее состояние с тем-же символом
//  817       }
//  818       s->value=s->value*10+c; //Накопление
//  819       break;
//  820     case _HTTP_CONTENTLEN_OK:
//  821       //Приняли значение Content-Length
//  822       state=_HTTP_LF;
//  823       continue;
//  824     case _HTTP_EQU:
//  825       //Приняли значение NAME, тут должен быть '=', но мы пока положим на проверку
//  826       val2=s->value;
//  827       state=_HTTP_VALUE;
//  828       
//  829       if ((val2>=201)&&(val2<=208))// Station Attributes to change
//  830       {
//  831 	val2=0;
//  832 	state=_HTTP_STRING;
//  833 	break;
//  834       }
//  835       if ((val2==241)/*||IsGoodHTTPreq(s)==_POST_w*/)
//  836       {
//  837 	val2=0;
//  838 	state=_HTTP_STRING;
//  839 	break;
//  840       }
//  841       if (val2==242)
//  842       {
//  843 	val2=16;
//  844 	state=_HTTP_STRING;
//  845 	break;
//  846       }
//  847       s->value=0;
//  848       break;
//  849     case _HTTP_BRK:
//  850       if (c=='O'||c=='o')
//  851       {
//  852 	s->value=1; //Заменяем "On/Off" на 1
//  853       }
//  854       /*if (val2==2)
//  855       {
//  856 	EE_ENABLE_MODBUS=0;
//  857 	EE_ENABLE_AJAX=0;
//  858       }*/
//  859       //Устанавливаем данные по маске
//  860       SetupRegister(val2,s);
//  861       s->value=0;
//  862       state=_HTTP_AMPERSAND;
//  863       continue; //Стрипаем до &
//  864     case _HTTP_AMPERSAND:
//  865       if (c=='&') state=_HTTP_NAME; //Когда дошли до &, опять начинаем разбор NAME
//  866       break;
//  867     case _HTTP_STRING:
//  868       //Принимаем строку
//  869       if (c=='&')
//  870       {       
//  871         if (val2) // если параметр не пустой
//  872         {
//  873           // если пришло поле №201, то сохраним номер станции, которую надо поменять              
//  874           if (s->value==201) s->statnum= a2i(AUTH_A2); 
//  875          // если пришло поле №202, то поменяем название станции в EEPROM      
//  876           else if (s->value==202)
//  877           {
//  878             char __eeprom *ep=&station_list[s->statnum].LCD_ID[0];
//  879             char *rp=AUTH_A2;
//  880             while (*rp)
//  881             {
//  882               UREG sym=*rp++;
//  883               if (sym =='+') sym=' ';
//  884               *ep++=sym;
//  885             }
//  886             *ep=0;
//  887           }
//  888           // поля №203-206 - поменяем IP станции в EEPROM      
//  889           else if ((s->value>=203)&&(s->value<=206))
//  890           {
//  891            ((char __eeprom *)(&station_list[s->statnum].IP))[s->value-203]=(UINT8)a2i(AUTH_A2);
//  892           }
//  893           // если пришло поле №207, то поменяем порт станции в EEPROM      
//  894           else if (s->value==207)
//  895           {
//  896             station_list[s->statnum].port=(UINT16)a2i(AUTH_A2);         
//  897           }
//  898           else if (s->value==208)
//  899           {
//  900             __no_operation();
//  901           }
//  902         }
//  903 	s->value=0;
//  904         state=_HTTP_NAME; //Следующий элемент
//  905 	break;        
//  906       }
//  907       if ((val2&15)==15)
//  908       {
//  909 	state=_HTTP_STRIP; //Великоват login или pass, стрипаем все остальное
//  910 	break;
//  911       }
//  912       {
//  913 	char *wp=AUTH_A2+val2;
//  914 	*wp++=c;
//  915 	*wp=0;
//  916 	val2++;
//  917       }
//  918       break;
//  919     case _HTTP_STRIP:
//  920       break;
//  921     case _HTTP_BIN_STAGE2:
//  922       s->value=0;
//  923       state=_HTTP_BIN;
//  924       break;
//  925     }
//  926     if (state>_HTTP_BODY)
??HTTP_hook_DATA_RX_5:
        CPI     R24, 10
        BRCC    $+2+2
        RJMP    ??HTTP_hook_DATA_RX_11
//  927     {
//  928       UINT16 l=s->content_length;
//  929       if (!--l) goto L_reqfinish;
??HTTP_hook_DATA_RX_12:
        MOVW    R31:R30, R5:R4
        ADIW    R31:R30, 43
        LDD     R16, Z+22
        LDD     R17, Z+23
        SUBI    R16, 1
        SBCI    R17, 0
        MOV     R18, R16
        OR      R18, R17
        BREQ    $+2+2
        RJMP    ??HTTP_hook_DATA_RX_13
//  930       s->content_length=l;
//  931     }
//  932     data++;
//  933     len--;
//  934   }
//  935   while(len);
//  936   s->state=state;
//  937   s->val2=val2;
//  938   return 0;
//  939   //Закончен разбор запроса
//  940 L_reqfinish:
//  941   s->state=_HTTP_SEND;
        LDI     R16, 22
        STD     Z+2, R16
//  942   s->val2=val2;
        STD     Z+21, R25
//  943   if (state==_HTTP_VALUE) //Последний параметр в POST
        CPI     R24, 12
        BREQ    $+2+2
        RJMP    ??HTTP_hook_DATA_RX_14
//  944   {
//  945     SetupRegister(val2,s);
        MOVW    R31:R30, R5:R4
        MOV     R16, R25
        RCALL   SetupRegister
        RJMP    ??HTTP_hook_DATA_RX_15
//  946   }
??HTTP_hook_DATA_RX_16:
        CPI     R16, 10
        BRNE    ??HTTP_hook_DATA_RX_5
        LDI     R25, 0
        LDI     R24, 2
        RJMP    ??HTTP_hook_DATA_RX_11
??HTTP_hook_DATA_RX_17:
        CPI     R16, 13
        BRNE    ??HTTP_hook_DATA_RX_18
        LDI     R24, 9
        RJMP    ??HTTP_hook_DATA_RX_11
??HTTP_hook_DATA_RX_18:
        LDI     R24, 3
        RJMP    ??HTTP_hook_DATA_RX_9
??HTTP_hook_DATA_RX_19:
        CPI     R16, 34
        BRNE    ??HTTP_hook_DATA_RX_20
        TST     R25
        BRNE    ??HTTP_hook_DATA_RX_21
        RJMP    ??HTTP_hook_DATA_RX_5
??HTTP_hook_DATA_RX_20:
        CPI     R16, 61
        BREQ    ??HTTP_hook_DATA_RX_21
        CPI     R16, 44
        BREQ    ??HTTP_hook_DATA_RX_21
??HTTP_hook_DATA_RX_22:
        MOV     R17, R16
        CPI     R16, 33
        BRCC    ??HTTP_hook_DATA_RX_23
??HTTP_hook_DATA_RX_21:
        LDI     R17, 0
??HTTP_hook_DATA_RX_23:
        LDI     R19, 0
        MOVW    R31:R30, R5:R4
        ADD     R30, R25
        ADC     R31, R19
        SUBI    R30, 189
        SBCI    R31, 255
        ST      Z, R17
        INC     R25
        TST     R17
        BREQ    ??HTTP_hook_DATA_RX_24
        CPI     R25, 32
        BRCS    ??HTTP_hook_DATA_RX_5
??HTTP_hook_DATA_RX_24:
        LDI     R25, 0
        MOV     R17, R24
        SUBI    R17, 3
        BREQ    ??HTTP_hook_DATA_RX_25
        DEC     R17
        BREQ    ??HTTP_hook_DATA_RX_26
        DEC     R17
        BREQ    ??HTTP_hook_DATA_RX_27
        DEC     R17
        BREQ    ??HTTP_hook_DATA_RX_28
        RJMP    ??HTTP_hook_DATA_RX_5
??HTTP_hook_DATA_RX_25:
        LDI     R24, 1
        LDI     R30, LOW(`?<Constant "Content-Length:">`)
        LDI     R31, (`?<Constant "Content-Length:">`) >> 8
        MOVW    R27:R26, R5:R4
        SUBI    R26, 189
        SBCI    R27, 255
        RCALL   stricmp_P
        TST     R16
        BRNE    ??HTTP_hook_DATA_RX_29
        LDI     R24, 7
        RJMP    ??HTTP_hook_DATA_RX_11
??HTTP_hook_DATA_RX_29:
        LDI     R30, LOW((`?<Constant "Content-Length:">` + 16))
        LDI     R31, HIGH((`?<Constant "Content-Length:">` + 16))
        MOVW    R27:R26, R5:R4
        SUBI    R26, 189
        SBCI    R27, 255
        RCALL   stricmp_P
        TST     R16
        BREQ    $+2+2
        RJMP    ??HTTP_hook_DATA_RX_9
??HTTP_hook_DATA_RX_30:
        LDI     R24, 4
        RJMP    ??HTTP_hook_DATA_RX_11
??HTTP_hook_DATA_RX_26:
        CPI     R16, 32
        BRCC    $+2+2
        RJMP    ??HTTP_hook_DATA_RX_8
        CPI     R16, 61
        BREQ    $+2+2
        RJMP    ??HTTP_hook_DATA_RX_5
        LDI     R30, LOW((`?<Constant "Content-Length:">` + 31))
        LDI     R31, HIGH((`?<Constant "Content-Length:">` + 31))
        MOVW    R27:R26, R5:R4
        SUBI    R26, 189
        SBCI    R27, 255
        RCALL   stricmp_P
        TST     R16
        BRNE    ??HTTP_hook_DATA_RX_31
        LDI     R24, 6
??HTTP_hook_DATA_RX_31:
        LDI     R30, LOW((`?<Constant "Content-Length:">` + 40))
        LDI     R31, HIGH((`?<Constant "Content-Length:">` + 40))
        MOVW    R27:R26, R5:R4
        SUBI    R26, 189
        SBCI    R27, 255
        RCALL   stricmp_P
        TST     R16
        BREQ    $+2+2
        RJMP    ??HTTP_hook_DATA_RX_5
        LDI     R24, 5
        RJMP    ??HTTP_hook_DATA_RX_11
??HTTP_hook_DATA_RX_27:
        MOVW    R31:R30, R5:R4
        ADIW    R31:R30, 43
        LDD     R16, Z+25
        STS     (http_sock + 173), R16
        RJMP    ??HTTP_hook_DATA_RX_30
??HTTP_hook_DATA_RX_28:
        MOVW    R31:R30, R5:R4
        RCALL   IsGoodHTTPreq
        TST     R16
        BRNE    $+2+2
        RJMP    ??HTTP_hook_DATA_RX_32
        LDI     R18, LOW((MASK_IP_EEPROM + 22))
        LDI     R19, HIGH((MASK_IP_EEPROM + 22))
        LDI     R16, LOW((http_sock + 173))
        LDI     R17, HIGH((http_sock + 173))
        RCALL   stradd_E
        MOVW    R27:R26, R17:R16
        LDI     R30, LOW((`?<Constant "Content-Length:">` + 44))
        LDI     R31, HIGH((`?<Constant "Content-Length:">` + 44))
        RCALL   stradd_P
        LDI     R18, LOW((MASK_IP_EEPROM + 38))
        LDI     R19, HIGH((MASK_IP_EEPROM + 38))
        RCALL   stradd_E
        LDI     R16, LOW((http_sock + 173))
        LDI     R17, HIGH((http_sock + 173))
        CALL    strlen
        MOV     R20, R16
        LDI     R18, LOW((http_sock + 173))
        LDI     R19, HIGH((http_sock + 173))
        LDI     R16, LOW((http_sock + 107))
        LDI     R17, HIGH((http_sock + 107))
        CALL    MD5cheat
        MOVW    R19:R18, R5:R4
        SUBI    R18, 157
        SBCI    R19, 255
        LDI     R16, LOW((http_sock + 173))
        LDI     R17, HIGH((http_sock + 173))
        CALL    strcpy
        LDI     R16, LOW((http_sock + 173))
        LDI     R17, HIGH((http_sock + 173))
        CALL    strlen
        MOV     R20, R16
        LDI     R18, LOW((http_sock + 173))
        LDI     R19, HIGH((http_sock + 173))
        MOVW    R17:R16, R19:R18
        CALL    MD5cheat
        LDI     R16, 58
        STS     (http_sock + 139), R16
        STS     (http_sock + 172), R16
        LDI     R20, 98
        LDI     R18, LOW((http_sock + 107))
        LDI     R19, HIGH((http_sock + 107))
        MOVW    R17:R16, R19:R18
        CALL    MD5cheat
        LDI     R20, 32
        LDI     R21, 0
        MOVW    R19:R18, R5:R4
        SUBI    R18, 189
        SBCI    R19, 255
        LDI     R16, LOW((http_sock + 107))
        LDI     R17, HIGH((http_sock + 107))
        CALL    strncmp
        OR      R16, R17
        MOVW    R31:R30, R5:R4
        BRNE    ??HTTP_hook_DATA_RX_33
        LDD     R16, Z+43
        CPI     R16, 2
        BRCC    ??HTTP_hook_DATA_RX_32
        INC     R16
        STD     Z+43, R16
        RJMP    ??HTTP_hook_DATA_RX_32
??HTTP_hook_DATA_RX_33:
        STD     Z+43, R25
??HTTP_hook_DATA_RX_32:
        LDI     R16, 1
        MOVW    R31:R30, R5:R4
        STD     Z+44, R16
        RJMP    ??HTTP_hook_DATA_RX_8
??HTTP_hook_DATA_RX_34:
        MOVW    R27:R26, R5:R4
        ADIW    R27:R26, 43
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+19
        LDD     R17, Z+20
        SUBI    R16, 255
        SBCI    R17, 255
        STD     Z+22, R16
        STD     Z+23, R17
        LDI     R16, 0
        STD     Z+19, R16
        STD     Z+20, R16
        LDI     R24, 17
        LDI     R16, 1
        STD     Z+1, R16
        ST      Z, R16
        MOVW    R31:R30, R5:R4
        RCALL   IsGoodHTTPreq
        MOVW    R31:R30, R27:R26
        LD      R17, Z
        CPI     R17, 1
        BREQ    $+2+2
        RJMP    ??HTTP_hook_DATA_RX_12
        SUBI    R16, 4
        BREQ    ??HTTP_hook_DATA_RX_35
        DEC     R16
        BREQ    ??HTTP_hook_DATA_RX_35
        SUBI    R16, 2
        BREQ    ??HTTP_hook_DATA_RX_36
        SUBI    R16, 2
        BREQ    ??HTTP_hook_DATA_RX_35
        DEC     R16
        BREQ    ??HTTP_hook_DATA_RX_37
        DEC     R16
        BREQ    ??HTTP_hook_DATA_RX_38
        DEC     R16
        BREQ    ??HTTP_hook_DATA_RX_39
        RJMP    ??HTTP_hook_DATA_RX_5
??HTTP_hook_DATA_RX_35:
        LDI     R24, 10
        RJMP    ??HTTP_hook_DATA_RX_12
??HTTP_hook_DATA_RX_37:
        MOVW    R31:R30, R5:R4
        SUBI    R30, 19
        SBCI    R31, 255
        LD      R16, Z
        MOV     R17, R16
        INC     R17
        ST      Z, R17
        CPI     R16, 15
        BRNE    ??HTTP_hook_DATA_RX_35
        LDI     R16, 0
??HTTP_hook_DATA_RX_40:
        MOVW    R31:R30, R5:R4
        SUBI    R30, 19
        SBCI    R31, 255
        ST      Z, R16
        RJMP    ??HTTP_hook_DATA_RX_35
??HTTP_hook_DATA_RX_38:
        MOVW    R31:R30, R5:R4
        SUBI    R30, 19
        SBCI    R31, 255
        LD      R16, Z
        MOV     R17, R16
        DEC     R17
        ST      Z, R17
        TST     R16
        BRNE    ??HTTP_hook_DATA_RX_35
        LDI     R16, 15
        RJMP    ??HTTP_hook_DATA_RX_40
??HTTP_hook_DATA_RX_39:
        NOP
        RJMP    ??HTTP_hook_DATA_RX_35
??HTTP_hook_DATA_RX_36:
        RCALL   REFRESH_EEPROM
        RJMP    ??HTTP_hook_DATA_RX_12
??HTTP_hook_DATA_RX_41:
        SUBI    R16, 48
        CPI     R16, 10
        BRCS    ??HTTP_hook_DATA_RX_42
        INC     R24
        RJMP    ??HTTP_hook_DATA_RX_9
??HTTP_hook_DATA_RX_42:
        MOVW    R27:R26, R5:R4
        ADIW    R27:R26, 43
        MOVW    R31:R30, R27:R26
        LDD     R20, Z+19
        LDD     R21, Z+20
        LDI     R18, 10
        MUL     R18, R21
        MOV     R19, R0
        MUL     R18, R20
        MOV     R18, R0
        ADD     R19, R1
        LDI     R17, 0
        ADD     R18, R16
        ADC     R19, R17
        STD     Z+19, R18
        STD     Z+20, R19
        RJMP    ??HTTP_hook_DATA_RX_5
??HTTP_hook_DATA_RX_43:
        MOVW    R31:R30, R5:R4
        ADIW    R31:R30, 43
        LDD     R25, Z+19
        LDI     R24, 12
        CPI     R25, 201
        BRCS    ??HTTP_hook_DATA_RX_44
        CPI     R25, 209
        BRCC    ??HTTP_hook_DATA_RX_44
??HTTP_hook_DATA_RX_45:
        LDI     R25, 0
??HTTP_hook_DATA_RX_46:
        LDI     R24, 15
        RJMP    ??HTTP_hook_DATA_RX_12
??HTTP_hook_DATA_RX_44:
        CPI     R25, 241
        BREQ    ??HTTP_hook_DATA_RX_45
        CPI     R25, 242
        BRNE    ??HTTP_hook_DATA_RX_47
        LDI     R25, 16
        RJMP    ??HTTP_hook_DATA_RX_46
??HTTP_hook_DATA_RX_47:
        LDI     R16, 0
        MOVW    R31:R30, R5:R4
        STD     Z+62, R16
        ADIW    R31:R30, 43
        STD     Z+20, R16
        RJMP    ??HTTP_hook_DATA_RX_12
??HTTP_hook_DATA_RX_48:
        CPI     R16, 79
        BREQ    ??HTTP_hook_DATA_RX_49
        CPI     R16, 111
        BRNE    ??HTTP_hook_DATA_RX_50
??HTTP_hook_DATA_RX_49:
        LDI     R16, 1
        LDI     R17, 0
        MOVW    R31:R30, R5:R4
        STD     Z+62, R16
        STD     Z+63, R17
??HTTP_hook_DATA_RX_50:
        MOVW    R31:R30, R5:R4
        MOV     R16, R25
        RCALL   SetupRegister
        LDI     R16, 0
        MOVW    R31:R30, R5:R4
        STD     Z+62, R16
        ADIW    R31:R30, 43
        STD     Z+20, R16
        LDI     R24, 14
        RJMP    ??HTTP_hook_DATA_RX_9
??HTTP_hook_DATA_RX_51:
        CPI     R16, 38
        BREQ    $+2+2
        RJMP    ??HTTP_hook_DATA_RX_5
        RJMP    ??HTTP_hook_DATA_RX_35
??HTTP_hook_DATA_RX_52:
        CPI     R16, 38
        BREQ    $+2+2
        RJMP    ??HTTP_hook_DATA_RX_53
        TST     R25
        BRNE    $+2+2
        RJMP    ??HTTP_hook_DATA_RX_54
        MOVW    R31:R30, R5:R4
        LDD     R16, Z+62
        LDD     R17, Z+63
        CPI     R16, 201
        LDI     R18, 0
        CPC     R17, R18
        BRNE    ??HTTP_hook_DATA_RX_55
        LDI     R30, LOW((http_sock + 173))
        LDI     R31, HIGH((http_sock + 173))
        RCALL   a2i
        MOVW    R31:R30, R5:R4
        SUBI    R30, 19
        SBCI    R31, 255
        ST      Z, R16
        RJMP    ??HTTP_hook_DATA_RX_54
??HTTP_hook_DATA_RX_55:
        CPI     R16, 202
        CPC     R17, R18
        BRNE    ??HTTP_hook_DATA_RX_56
        LDI     R20, LOW((station_list + 38))
        LDI     R21, HIGH((station_list + 38))
        SUBI    R30, 19
        SBCI    R31, 255
        LD      R17, Z
        LDI     R16, 54
        MUL     R17, R16
        ADD     R20, R0
        ADC     R21, R1
        LDI     R30, LOW((http_sock + 173))
        LDI     R31, HIGH((http_sock + 173))
        RJMP    ??HTTP_hook_DATA_RX_57
??HTTP_hook_DATA_RX_58:
        CPI     R16, 43
        BRNE    ??HTTP_hook_DATA_RX_59
        LDI     R16, 32
??HTTP_hook_DATA_RX_59:
        CALL    __eeput8_16
        SUBI    R20, 255
        SBCI    R21, 255
??HTTP_hook_DATA_RX_57:
        LD      R16, Z+
        TST     R16
        BRNE    ??HTTP_hook_DATA_RX_58
        LDI     R16, 0
??HTTP_hook_DATA_RX_60:
        CALL    __eeput8_16
        RJMP    ??HTTP_hook_DATA_RX_54
??HTTP_hook_DATA_RX_56:
        CPI     R16, 203
        CPC     R17, R18
        BRCS    ??HTTP_hook_DATA_RX_61
        CPI     R16, 207
        CPC     R17, R18
        BRCC    ??HTTP_hook_DATA_RX_61
        LDI     R30, LOW((http_sock + 173))
        LDI     R31, HIGH((http_sock + 173))
        RCALL   a2i
        LDI     R20, LOW((station_list - 203))
        LDI     R21, HIGH((station_list - 203))
        MOVW    R31:R30, R5:R4
        LDD     R18, Z+62
        LDD     R19, Z+63
        ADD     R20, R18
        ADC     R21, R19
        SUBI    R30, 19
        SBCI    R31, 255
        LD      R18, Z
        LDI     R17, 54
        MUL     R18, R17
        ADD     R20, R0
        ADC     R21, R1
        RJMP    ??HTTP_hook_DATA_RX_60
??HTTP_hook_DATA_RX_61:
        CPI     R16, 207
        CPC     R17, R18
        BRNE    ??HTTP_hook_DATA_RX_62
        LDI     R30, LOW((http_sock + 173))
        LDI     R31, HIGH((http_sock + 173))
        RCALL   a2i
        LDI     R20, LOW((station_list + 4))
        LDI     R21, HIGH((station_list + 4))
        MOVW    R31:R30, R5:R4
        SUBI    R30, 19
        SBCI    R31, 255
        LD      R19, Z
        LDI     R18, 54
        MUL     R19, R18
        ADD     R20, R0
        ADC     R21, R1
        CALL    __eeput16_16
        RJMP    ??HTTP_hook_DATA_RX_54
??HTTP_hook_DATA_RX_62:
        CPI     R16, 208
        SBCI    R17, 0
        BRNE    ??HTTP_hook_DATA_RX_54
        NOP
??HTTP_hook_DATA_RX_54:
        LDI     R16, 0
        MOVW    R31:R30, R5:R4
        STD     Z+62, R16
        ADIW    R31:R30, 43
        STD     Z+20, R16
        RJMP    ??HTTP_hook_DATA_RX_35
??HTTP_hook_DATA_RX_53:
        MOV     R17, R25
        ANDI    R17, 0x0F
        CPI     R17, 15
        BRNE    ??HTTP_hook_DATA_RX_63
        LDI     R24, 17
        RJMP    ??HTTP_hook_DATA_RX_12
??HTTP_hook_DATA_RX_63:
        LDI     R30, LOW((http_sock + 173))
        LDI     R31, HIGH((http_sock + 173))
        LDI     R19, 0
        ADD     R30, R25
        ADC     R31, R19
        ST      Z+, R16
        ST      Z, R19
        INC     R25
        RJMP    ??HTTP_hook_DATA_RX_5
??HTTP_hook_DATA_RX_64:
        LDI     R16, 0
        MOVW    R31:R30, R5:R4
        STD     Z+62, R16
        ADIW    R31:R30, 43
        STD     Z+20, R16
        LDI     R24, 18
        RJMP    ??HTTP_hook_DATA_RX_12
??HTTP_hook_DATA_RX_13:
        MOVW    R31:R30, R5:R4
        ADIW    R31:R30, 43
        STD     Z+22, R16
        STD     Z+23, R17
??HTTP_hook_DATA_RX_11:
        LDI     R16, 1
        ADD     R6, R16
        LDI     R16, 0
        ADC     R7, R16
        DEC     R8
??HTTP_hook_DATA_RX_9:
        TST     R8
        BREQ    $+2+2
        RJMP    ??HTTP_hook_DATA_RX_4
        LDI     R16, 43
        ADD     R4, R16
        LDI     R16, 0
        ADC     R5, R16
        MOVW    R27:R26, R5:R4
        MOVW    R31:R30, R5:R4
        STD     Z+2, R24
        STD     Z+21, R25
        RJMP    ??HTTP_hook_DATA_RX_2
//  947   if (state==_HTTP_STRING)
??HTTP_hook_DATA_RX_14:
        CPI     R24, 15
        BRNE    ??HTTP_hook_DATA_RX_15
//  948   {
//  949     if (IsGoodHTTPreq(s)==_POST_s)
        MOVW    R31:R30, R5:R4
        RCALL   IsGoodHTTPreq
        CPI     R16, 12
        BRNE    ??HTTP_hook_DATA_RX_65
//  950     {// Принимали запрос GET, надо записать в eeprom        
//  951         // если пришло поле №208, то поменяем запрос GET в EEPROM      
//  952 //        if (s->value==208)
//  953           char __eeprom *ep=&station_list[s->statnum].req[0];
        LDI     R20, LOW((station_list + 6))
        LDI     R21, HIGH((station_list + 6))
        MOVW    R31:R30, R5:R4
        SUBI    R30, 19
        SBCI    R31, 255
        LD      R17, Z
        LDI     R16, 54
        MUL     R17, R16
        ADD     R20, R0
        ADC     R21, R1
//  954            if (val2)
        TST     R25
        BREQ    ??HTTP_hook_DATA_RX_66
//  955             {
//  956             char *rp=AUTH_A2;
        LDI     R30, LOW((http_sock + 173))
        LDI     R31, HIGH((http_sock + 173))
        RJMP    ??HTTP_hook_DATA_RX_67
//  957             while (*rp)
//  958             {
//  959               *ep++=*rp++;
??HTTP_hook_DATA_RX_68:
        CALL    __eeput8_16
        SUBI    R20, 255
        SBCI    R21, 255
//  960             }
??HTTP_hook_DATA_RX_67:
        LD      R16, Z+
        TST     R16
        BRNE    ??HTTP_hook_DATA_RX_68
//  961             *ep=0;
??HTTP_hook_DATA_RX_66:
        LDI     R16, 0
        CALL    __eeput8_16
        RJMP    ??HTTP_hook_DATA_RX_15
//  962             }
//  963           else
//  964           {
//  965             *ep=0;
//  966           }
//  967     }
//  968     //Принимали login и pass, надо записать в eeprom        
//  969     else if (IsGoodHTTPreq(s)==_POST_w)
??HTTP_hook_DATA_RX_65:
        MOVW    R31:R30, R5:R4
        RCALL   IsGoodHTTPreq
        CPI     R16, 4
        BREQ    ??HTTP_hook_DATA_RX_15
//  970     {
//  971       //Принимали новое имя устройства
//  972       StoreDeviceName(AUTH_A2,s->value);
//  973     }
//  974     else 
//  975     {
//  976       //Принимали страничку Z
//  977       UINT8 __eeprom *dp=(UINT8 __eeprom *)&HTTP_LOGIN;
        LDI     R20, LOW((MASK_IP_EEPROM + 22))
        LDI     R21, HIGH((MASK_IP_EEPROM + 22))
//  978       UREG i=0;
        LDI     R17, 0
        LDI     R30, LOW((http_sock + 173))
        LDI     R31, HIGH((http_sock + 173))
//  979       do
//  980       {
//  981 	*dp++=AUTH_A2[i++];
??HTTP_hook_DATA_RX_69:
        LD      R16, Z+
        CALL    __eeput8_16
        INC     R17
        SUBI    R20, 255
        SBCI    R21, 255
//  982 	if (i==16)
        CPI     R17, 16
        BRNE    ??HTTP_hook_DATA_RX_70
//  983 	{
//  984 	  dp=(UINT8 __eeprom *)&HTTP_PASS;
        LDI     R20, LOW((MASK_IP_EEPROM + 38))
        LDI     R21, HIGH((MASK_IP_EEPROM + 38))
//  985 	}
//  986       }
//  987       while(i<32);
??HTTP_hook_DATA_RX_70:
        CPI     R17, 32
        BRCS    ??HTTP_hook_DATA_RX_69
//  988     }
//  989   }
//  990   p=http_404;
??HTTP_hook_DATA_RX_15:
        LDI     R24, LOW(http_404)
        LDI     R25, (http_404) >> 8
//  991   if ((i=IsGoodHTTPreq(s))!=0)
        MOVW    R31:R30, R5:R4
        RCALL   IsGoodHTTPreq
        MOV     R17, R16
        TST     R16
        BRNE    $+2+2
        RJMP    ??HTTP_hook_DATA_RX_71
//  992   {
//  993     switch(s->af.AUTH_MODE)
        MOVW    R31:R30, R5:R4
        LDD     R16, Z+43
        TST     R16
        BREQ    ??HTTP_hook_DATA_RX_72
        DEC     R16
        BREQ    ??HTTP_hook_DATA_RX_73
        DEC     R16
        BRNE    $+2+2
        RJMP    ??HTTP_hook_DATA_RX_74
        RJMP    ??HTTP_hook_DATA_RX_71
//  994     {
//  995     case 0:
//  996       //Нет авторизации
//  997       p=http_401;
??HTTP_hook_DATA_RX_72:
        LDI     R24, LOW(http_401)
        LDI     R25, (http_401) >> 8
//  998       //Готовим новый nonce
//  999       MD5cheat(AUTH_srv_nonce,(UINT8*)MD5_Buffer,98); //Из говна пулю ;)
        RJMP    ??HTTP_hook_DATA_RX_75
// 1000       break;
// 1001     case 1:
// 1002       //Есть неустаревшая авторизация
// 1003       switch(i)
??HTTP_hook_DATA_RX_73:
        DEC     R17
        BREQ    ??HTTP_hook_DATA_RX_76
        DEC     R17
        BREQ    ??HTTP_hook_DATA_RX_77
        DEC     R17
        BREQ    ??HTTP_hook_DATA_RX_78
        DEC     R17
        BREQ    ??HTTP_hook_DATA_RX_79
        DEC     R17
        BREQ    ??HTTP_hook_DATA_RX_79
        SUBI    R17, 2
        BREQ    ??HTTP_hook_DATA_RX_79
        DEC     R17
        BREQ    ??HTTP_hook_DATA_RX_79
        DEC     R17
        BREQ    ??HTTP_hook_DATA_RX_80
        SUBI    R17, 1
        BRCS    ??HTTP_hook_DATA_RX_81
        SUBI    R17, 3
        BRCS    ??HTTP_hook_DATA_RX_82
        RJMP    ??HTTP_hook_DATA_RX_81
// 1004       {
// 1005       case _GET_root:
// 1006 	//Готовим динамические данные
// 1007 	p=http_root;
??HTTP_hook_DATA_RX_76:
        LDI     R24, LOW(http_root)
        LDI     R25, (http_root) >> 8
// 1008 	s->httpcb.select_n=0;
        LDI     R16, 0
        RJMP    ??HTTP_hook_DATA_RX_83
// 1009 	break;
// 1010       case _POST_z:
// 1011 	p=http_302z;
??HTTP_hook_DATA_RX_80:
        LDI     R24, LOW(http_302z)
        LDI     R25, (http_302z) >> 8
        RJMP    ??HTTP_hook_DATA_RX_81
// 1012 	break;
// 1013       case _POST_w:
// 1014       case _POST_m:
// 1015 	SYNC_EE_();
// 1016 	//PORTC=RAM_BITMAP[0];
// 1017 	//DDRC=RAM_BITMAP[1];
// 1018       case _POST_r:
// 1019       case _POST_e:
// 1020 	p=http_302;
??HTTP_hook_DATA_RX_79:
        LDI     R24, LOW(http_302)
        LDI     R25, (http_302) >> 8
        RJMP    ??HTTP_hook_DATA_RX_81
// 1021 	break;
// 1022       case _POST_f:        
// 1023       case _POST_p:        
// 1024       case _POST_s:        
// 1025 	p=http_302s;
??HTTP_hook_DATA_RX_82:
        LDI     R24, LOW(http_302s)
        LDI     R25, (http_302s) >> 8
        RJMP    ??HTTP_hook_DATA_RX_81
// 1026 	break;    
// 1027       case _GET_z:
// 1028 	//Готовим динамические данные
// 1029 	{
// 1030 	  UINT8 __eeprom *dp=(UINT8 __eeprom *)&IP_EEPROM;
??HTTP_hook_DATA_RX_77:
        LDI     R24, LOW((MASK_IP_EEPROM + 4))
        LDI     R25, HIGH((MASK_IP_EEPROM + 4))
// 1031 	  UREG i=0;
        CLR     R6
        LDI     R26, LOW((http_sock + 173))
        LDI     R27, HIGH((http_sock + 173))
// 1032 	  do
// 1033 	  {
// 1034 	    i2a(AUTH_A2+i*5,*dp++);
??HTTP_hook_DATA_RX_84:
        MOVW    R21:R20, R25:R24
        CALL    __eeget8_16
        LDI     R17, 0
        MOVW    R31:R30, R27:R26
        RCALL   i2a
        ADIW    R25:R24, 1
// 1035 	    i++;
        INC     R6
// 1036 	    if (i==4)
        LDI     R16, 4
        CP      R6, R16
        BRNE    ??HTTP_hook_DATA_RX_85
// 1037 	    {
// 1038 	      dp=(UINT8 __eeprom *)MAC_EEPROM;
        LDI     R24, LOW((MASK_IP_EEPROM + 16))
        LDI     R25, HIGH((MASK_IP_EEPROM + 16))
// 1039 	    }
// 1040 	  }
// 1041 	  while(i<10);
??HTTP_hook_DATA_RX_85:
        ADIW    R27:R26, 5
        LDI     R16, 10
        CP      R6, R16
        BRCS    ??HTTP_hook_DATA_RX_84
// 1042 	}
// 1043 	p=http_z;
        LDI     R24, LOW(http_z)
        LDI     R25, (http_z) >> 8
// 1044 	s->httpcb.select_n=240;
        LDI     R16, 240
        MOVW    R31:R30, R5:R4
        RJMP    ??HTTP_hook_DATA_RX_83
// 1045 	break;
// 1046       case _GET_s:  
// 1047         /*
// 1048         //Готовим динамические данные
// 1049         {
// 1050           UINT8 __eeprom *sl=(UINT8 __eeprom *)&station_list;
// 1051           UREG i=0;
// 1052           do
// 1053           {
// 1054              i2a(AUTH_A2+i*5,*sl++);
// 1055              i++;
// 1056           }
// 1057           while(i<10);          
// 1058         }
// 1059         */
// 1060         p=http_s;
??HTTP_hook_DATA_RX_78:
        LDI     R24, LOW(http_s)
        LDI     R25, (http_s) >> 8
// 1061        	s->httpcb.select_n=201;
        LDI     R16, 201
??HTTP_hook_DATA_RX_83:
        STD     Z+53, R16
// 1062         break;
// 1063       }
// 1064       s->af.AUTH_MODE=2; //Текущая авторизация устарела
??HTTP_hook_DATA_RX_81:
        LDI     R16, 2
        STD     Z+43, R16
        RJMP    ??HTTP_hook_DATA_RX_71
// 1065       break;      
// 1066     case 2:
// 1067       p=http_401stale;
??HTTP_hook_DATA_RX_74:
        LDI     R24, LOW(http_401stale)
        LDI     R25, (http_401stale) >> 8
// 1068       s->af.AUTH_MODE=0; //Нафиг текущую авторизацию
        LDI     R16, 0
        STD     Z+43, R16
// 1069       //Готовим новый nonce
// 1070       MD5cheat(AUTH_srv_nonce,(UINT8*)MD5_Buffer,98); //Из говна пулю ;)
??HTTP_hook_DATA_RX_75:
        LDI     R20, 98
        LDI     R18, LOW((http_sock + 107))
        LDI     R19, HIGH((http_sock + 107))
        LDI     R16, LOW((http_sock + 140))
        LDI     R17, HIGH((http_sock + 140))
        CALL    MD5cheat
// 1071       break;
// 1072     }
// 1073   }
// 1074   AUTH_srv_nonce[32]=0;
??HTTP_hook_DATA_RX_71:
        LDI     R16, 0
        STS     (http_sock + 172), R16
// 1075   //AUTH_A2[32]=0;
// 1076   s->httpcb.html=p;
        MOVW    R31:R30, R5:R4
        STD     Z+46, R24
        STD     Z+47, R25
// 1077   netw_memcpy(&s->httpcb_ack,&s->httpcb,sizeof(HTTP_CB));
        LDI     R16, 8
        LDI     R17, 0
        ADIW    R31:R30, 46
        LDI     R18, 54
        ADD     R4, R18
        ADC     R5, R17
        MOVW    R27:R26, R5:R4
        CALL    netw_memcpy
// 1078   return 1; //Есть данные для передачи
??HTTP_hook_DATA_RX_3:
        LDI     R16, 1
??HTTP_hook_DATA_RX_2:
        LD      R24, Y+
        LD      R25, Y+
        LD      R4, Y+
        LD      R5, Y+
        LD      R6, Y+
        LD      R7, Y+
        LD      R8, Y+
        RET
// 1079 }
// 1080 

        RSEG CODE:CODE:NOROOT(1)
// 1081 static __x UREG HTTP_hook_DATA_TX(UREG len, UINT8 *data, HTTP_CB *cb, HTTP_SOCK *s)
HTTP_hook_DATA_TX:
// 1082 {
        ST      -Y, R7
        ST      -Y, R6
        ST      -Y, R5
        ST      -Y, R4
        ST      -Y, R25
        ST      -Y, R24
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        REQUIRE ?Register_R6_is_cg_reg
        REQUIRE ?Register_R7_is_cg_reg
        MOV     R7, R16
        MOVW    R5:R4, R27:R26
        MOVW    R27:R26, R19:R18
        MOVW    R25:R24, R21:R20
// 1083 //  HTTP_CB *cb;
// 1084   //Посылка новых данных
// 1085   UREG c=s->state;
        MOVW    R31:R30, R21:R20
        LDD     R16, Z+45
// 1086   UREG i=0;
        CLR     R6
// 1087 
// 1088   if (c==_HTTP_PREP_SEND)
        CPI     R16, 21
        BRNE    ??HTTP_hook_DATA_TX_0
// 1089   {
// 1090     s->state=c=_HTTP_SEND;
        LDI     R16, 22
        STD     Z+45, R16
// 1091     s->sock.async_req=3;
        LDI     R16, 3
        STD     Z+42, R16
// 1092   }
// 1093   if (c<_HTTP_SEND) return 0; //Ничего не передаем, не тот режим
// 1094   if (!cb->html) return 0; //Пока нет данных для передачи
??HTTP_hook_DATA_TX_1:
        LD      R16, X+
        LD      R17, X
        SBIW    R27:R26, 1
        OR      R16, R17
        BRNE    ??HTTP_hook_DATA_TX_2
        RJMP    ??HTTP_hook_DATA_TX_3
??HTTP_hook_DATA_TX_0:
        CPI     R16, 22
        BRCC    ??HTTP_hook_DATA_TX_1
??HTTP_hook_DATA_TX_3:
        LDI     R16, 0
        RJMP    ??HTTP_hook_DATA_TX_4
// 1095 //    _print_num(_sData, (UINT16) data);
// 1096  // _print_num(_sLen, (UINT16) len);
// 1097 L_REPRINT_SN:
// 1098   if ((c=IsGoodHTTPreq(s))!=_GET_z)
// 1099   {
// 1100     UREG i=cb->select_n;
// 1101     i-=1;
// 1102     if (i<8)
// 1103     {
// 1104       i2a(AUTH_A2+3*5,((char __eeprom *)(&OUTG_IP))[i]);
// 1105     }
// 1106   }
// 1107   i2a(s->select_name,cb->select_n);
// 1108 L_CHUNK:
// 1109   //Генерируем кусочки
// 1110   switch(cb->chunk_mode)
// 1111   {
// 1112   case ASCIIZ_CHUNK:
// 1113     {
// 1114       const char *chunk=cb->chunk_ram;
// 1115       while((c=*chunk)!=0)
// 1116       {
// 1117 	if (i>=len)
// 1118 	{
// 1119 	  cb->chunk_ram=chunk;
// 1120 	  goto L_EFRAME;
// 1121 	}
// 1122 	chunk++;
// 1123 	if (data) *data++=c;
// 1124 	i++;
// 1125       }
// 1126       if (!c) cb->chunk_mode=0;
// 1127       cb->chunk_ram=chunk;
// 1128       break;
// 1129     }
// 1130   case FLASH_ASCIIZ_CHUNK:
// 1131     {
// 1132       const char __flash *chunk=cb->chunk;
// 1133       while((c=*chunk)!=0)
// 1134       {
// 1135 	if (i>=len)
// 1136 	{
// 1137 	  cb->chunk=chunk;
// 1138 	  goto L_EFRAME;
// 1139 	}
// 1140 	chunk++;
// 1141 	if (data) *data++=c;
// 1142 	i++;
// 1143       }
// 1144       if (!c) cb->chunk_mode=0;
// 1145       cb->chunk=chunk;
// 1146       break;
// 1147     }
// 1148   case EEPROM_ASCIIZ_CHUNK:  
// 1149     {
// 1150       const char __eeprom *chunk=cb->chunk_eeprom;      
// 1151       while((c=*chunk)!=0)
// 1152       {
// 1153 	if (i>=len)
// 1154 	{
// 1155 	  cb->chunk_eeprom=chunk;
// 1156 	  goto L_EFRAME;
// 1157 	}
// 1158 	chunk++;
// 1159 	if (data) *data++=c;
// 1160 	i++;
// 1161       }
// 1162       if (!c) cb->chunk_mode=0;
// 1163       cb->chunk_eeprom=chunk;
// 1164       break;
// 1165     }
// 1166   default:
// 1167     {
// 1168       const char *chunk=cb->chunk_ram;
// 1169       while(cb->chunk_mode)
// 1170       {
// 1171 	if (i>=len)
// 1172 	{
// 1173 	  cb->chunk_ram=chunk;
// 1174 	  goto L_EFRAME;
// 1175 	}
// 1176 	c=*((char*)chunk++);
// 1177 	if (data) *data++=c;
// 1178 	i++;
// 1179       }
// 1180       cb->chunk_ram=chunk;
// 1181       break;
// 1182     }
// 1183   case NO_CHUNK:
// 1184     break;
// 1185   }
// 1186   //Разбираем пакованные данные
// 1187   for(;;)
// 1188   //while(i<len)
// 1189   {
// 1190     c=*cb->html;
// 1191     if (c>0&&c<128)
// 1192     {
// 1193       if (i>=len) goto L_EFRAME;
// 1194       cb->html++;
// 1195       if (data) *data++=c;
// 1196       i++;
// 1197       continue;
// 1198     }
// 1199     cb->html++;
// 1200 /*    if (c>=_sel0_&&c<=_sel9_)
// 1201     {
// 1202       //sel0-9
// 1203       //chunk=" SELECTED>";
// 1204       cb->chunk=__get_SELECTED();
// 1205       cb->chunk_mode=FLASH_ASCIIZ_CHUNK;
// 1206       {
// 1207 	UREG m=255;
// 1208 	switch(cb->select_n)
// 1209 	{
// 1210 	case 1:
// 1211 	  m=RAM_SPEED;
// 1212 	  break;
// 1213 	case 2:
// 1214 	  m=RAM_PARITY;
// 1215 	  break;
// 1216 	}
// 1217 	if (m!=(UREG)(c-_sel0_)) cb->chunk=__get_ETAG();
// 1218       }
// 1219       goto L_CHUNK;;	    
// 1220     }*/
// 1221     if (c>=_radid0_&&c<=_radid8_)
// 1222     {
// 1223       
// 1224       //radid0-9
// 1225      switch (c)
// 1226       {        
// 1227         case _radid0_: // выводим список радиостанций из EEPROM
// 1228 //          cb->chunk_eeprom=(char const __eeprom *)&station_list[0];      
// 1229 //          cb->chunk_mode=EEPROM_LIST_CHUNK;
// 1230 //          goto L_CHUNK;        
// 1231           break;        
// 1232       case _radid1_: // номер текущей станции
// 1233         {          
// 1234           i2a(AUTH_A2, s->statnum);
// 1235           cb->chunk_ram=AUTH_A2;
// 1236           cb->chunk_mode=ASCIIZ_CHUNK;
// 1237           goto L_CHUNK;
// 1238         }
// 1239       case _radid2_: // station ID
// 1240         {          
// 1241           cb->chunk_eeprom=&station_list[s->statnum].LCD_ID[0];
// 1242           cb->chunk_mode=EEPROM_ASCIIZ_CHUNK;
// 1243           goto L_CHUNK;
// 1244         }  
// 1245       case _radid3_: // IP1
// 1246         {          
// 1247           i2a(AUTH_A2, (UINT8) (station_list[s->statnum].IP));
// 1248           cb->chunk_ram=AUTH_A2;
// 1249           cb->chunk_mode=ASCIIZ_CHUNK;
// 1250           goto L_CHUNK;
// 1251         }    
// 1252       case _radid4_: // IP2
// 1253         {          
// 1254           i2a(AUTH_A2, (UINT8) (station_list[s->statnum].IP>>8));
// 1255           cb->chunk_ram=AUTH_A2;
// 1256           cb->chunk_mode=ASCIIZ_CHUNK;
// 1257           goto L_CHUNK;
// 1258         }
// 1259       case _radid5_: // IP3
// 1260         {          
// 1261           i2a(AUTH_A2, (UINT8) (station_list[s->statnum].IP >>16));
// 1262           cb->chunk_ram=AUTH_A2;
// 1263           cb->chunk_mode=ASCIIZ_CHUNK;
// 1264           goto L_CHUNK;
// 1265         }    
// 1266       case _radid6_: // IP4
// 1267         {          
// 1268           i2a(AUTH_A2, (UINT8) (station_list[s->statnum].IP >> 24));
// 1269           cb->chunk_ram=AUTH_A2;
// 1270           cb->chunk_mode=ASCIIZ_CHUNK;
// 1271           goto L_CHUNK;
// 1272         }      
// 1273       case _radid7_: // station port
// 1274         {          
// 1275           i2a(AUTH_A2, (UINT16) (station_list[s->statnum].port));
// 1276           cb->chunk_ram=AUTH_A2;
// 1277           cb->chunk_mode=ASCIIZ_CHUNK;
// 1278           goto L_CHUNK;
// 1279         }              
// 1280       case _radid8_: // get request
// 1281         {
// 1282           cb->chunk_eeprom=&station_list[s->statnum].req[0];
// 1283           cb->chunk_mode=EEPROM_ASCIIZ_CHUNK;
// 1284           goto L_CHUNK;
// 1285         }
// 1286       }
// 1287       cb->chunk_ram=AUTH_A2+(c-_radid0_)*5;      
// 1288       cb->chunk_mode=ASCIIZ_CHUNK;
// 1289       goto L_CHUNK;
// 1290     }
// 1291     
// 1292     if (c>=_vlanid0_&&c<=_vlanid9_)
// 1293     {
// 1294       //vlanid0-9
// 1295       cb->chunk_ram=AUTH_A2+(c-_vlanid0_)*5;
// 1296       cb->chunk_mode=ASCIIZ_CHUNK;
// 1297       goto L_CHUNK;
// 1298     }
// 1299     switch(c)
// 1300     {
// 1301     case 0:
// 1302       if (cb->stk)
// 1303       {
// 1304 	cb->html=cb->stk;
// 1305 	cb->stk=NULL;
// 1306 	continue;
// 1307       }
// 1308       else
// 1309       {
// 1310 	cb->html--; //Не убегаем с 0
// 1311 	if (!data)
// 1312 	{
// 1313 	  //Все данные нам подтвердили, выходим
// 1314 	  s->state=(UREG)-1;
// 1315 	  CloseTCPsocket(&s->sock);
// 1316 	  goto L_EFRAME;
// 1317 	}
// 1318       }
// 1319       break;
// 1320     default:
// 1321       cb->chunk=CHUNKS[c-128];
// 1322       cb->chunk_mode=FLASH_ASCIIZ_CHUNK;
// 1323       goto L_CHUNK;
// 1324 /*    case _binary_out_:
// 1325       cb->chunk_ram=(char*)&http_sock._RS485_BUF;;
// 1326       cb->chunk_mode=253;
// 1327       goto L_CHUNK;*/
// 1328     case _svn_revision_:
// 1329       cb->chunk=__get_SVN_Revision();
// 1330       cb->chunk_mode=FLASH_ASCIIZ_CHUNK;
// 1331       goto L_CHUNK;
// 1332     case _nonce_:
// 1333       cb->chunk_ram=__get_AUTH_srv_nonce();
// 1334       cb->chunk_mode=ASCIIZ_CHUNK;
// 1335       goto L_CHUNK;
// 1336     case _select_name_:
// 1337       cb->select_n++;
??HTTP_hook_DATA_TX_5:
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+7
        INC     R16
        STD     Z+7, R16
// 1338       cb->chunk_ram=s->select_name;
        MOVW    R17:R16, R25:R24
        SUBI    R16, 189
        SBCI    R17, 255
        STD     Z+2, R16
        STD     Z+3, R17
// 1339       cb->chunk_mode=ASCIIZ_CHUNK;
??HTTP_hook_DATA_TX_6:
        LDI     R16, 255
        STD     Z+6, R16
// 1340       goto L_REPRINT_SN;
??HTTP_hook_DATA_TX_2:
        MOVW    R31:R30, R25:R24
        RCALL   IsGoodHTTPreq
        CPI     R16, 2
        BREQ    ??HTTP_hook_DATA_TX_7
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+7
        DEC     R16
        CPI     R16, 8
        BRCC    ??HTTP_hook_DATA_TX_7
        LDI     R20, LOW((MASK_IP_EEPROM + 8))
        LDI     R21, HIGH((MASK_IP_EEPROM + 8))
        LDI     R17, 0
        ADD     R20, R16
        ADC     R21, R17
        CALL    __eeget8_16
        LDI     R30, LOW((http_sock + 188))
        LDI     R31, HIGH((http_sock + 188))
        RCALL   i2a
??HTTP_hook_DATA_TX_7:
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+7
        LDI     R17, 0
        MOVW    R31:R30, R25:R24
        SUBI    R30, 189
        SBCI    R31, 255
        RCALL   i2a
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+6
        SUBI    R16, 253
        BRNE    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_8
        DEC     R16
        BRNE    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_9
        DEC     R16
        BREQ    ??HTTP_hook_DATA_TX_10
        DEC     R16
        BRNE    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_11
        RJMP    ??HTTP_hook_DATA_TX_12
??HTTP_hook_DATA_TX_10:
        MOV     R31, R27
        LDD     R18, Z+2
        LDD     R19, Z+3
        RJMP    ??HTTP_hook_DATA_TX_13
??HTTP_hook_DATA_TX_14:
        SUBI    R18, 255
        SBCI    R19, 255
        MOV     R17, R4
        OR      R17, R5
        BREQ    ??HTTP_hook_DATA_TX_15
        MOVW    R31:R30, R5:R4
        ST      Z+, R16
        MOVW    R5:R4, R31:R30
??HTTP_hook_DATA_TX_15:
        INC     R6
??HTTP_hook_DATA_TX_13:
        MOVW    R31:R30, R19:R18
        LD      R17, Z
        MOV     R16, R17
        TST     R17
        BREQ    ??HTTP_hook_DATA_TX_16
        CP      R6, R7
        BRCS    ??HTTP_hook_DATA_TX_14
??HTTP_hook_DATA_TX_17:
        MOVW    R31:R30, R27:R26
??HTTP_hook_DATA_TX_18:
        STD     Z+2, R18
        STD     Z+3, R19
// 1341     case _check_eeprom_restored_:
// 1342       /*if (!EEPROM_RESTORED) */ continue;
// 1343       /* c=_root_level1_+3; */
// 1344     case _root_level1_:
// 1345     case _root_level2_:
// 1346     case _root_level3_:
// 1347       cb->stk=cb->html;
// 1348       cb->html=HTTP_LEVELS[c-_root_level1_];
// 1349       continue;
// 1350     case _voltage_:
// 1351       cb->chunk_ram=AUTH_A2+0;
// 1352       cb->select_n++;
// 1353       cb->chunk_mode=ASCIIZ_CHUNK;
// 1354       goto L_REPRINT_SN;
// 1355     case _logval_:
// 1356       cb->chunk_ram=AUTH_A2+5;
// 1357       cb->select_n++;
// 1358       cb->chunk_mode=ASCIIZ_CHUNK;
// 1359       goto L_REPRINT_SN;
// 1360     case _dec_select_name_:
// 1361       cb->select_n--;
// 1362       goto L_REPRINT_SN;
// 1363 /*    case _is_checked_:
// 1364       cb->chunk=__get_CHECKED();
// 1365       cb->chunk_mode=FLASH_ASCIIZ_CHUNK;
// 1366       switch(cb->select_n)
// 1367       {
// 1368       case 4:
// 1369 	if (EE_ENABLE_MODBUS) goto L_CHUNK;
// 1370 	break;
// 1371       case 5:
// 1372 	if (EE_ENABLE_AJAX) goto L_CHUNK;
// 1373 	break;
// 1374       }
// 1375       cb->chunk=__get_ETAG();
// 1376       goto L_CHUNK;*/
// 1377 /*    case _on_off_:
// 1378       {
// 1379 	UINT16 m;
// 1380 	UREG i, mask;
// 1381 	i=cb->select_n-1;
// 1382 	m=_fastmask(i);
// 1383 	mask=m>>8;
// 1384 	cb->chunk=OnOff_P(RAM_BITMAP[__multiply_unsigned(m,32)>>8]&mask);
// 1385       }
// 1386       cb->chunk_mode=FLASH_ASCIIZ_CHUNK;
// 1387       goto L_CHUNK;*/
// 1388     }
// 1389     break;
// 1390   }
// 1391 L_EFRAME:
// 1392 //  _print_num(_si, (UINT16)i); 
// 1393 //  _print_rn();
// 1394   return i;
??HTTP_hook_DATA_TX_19:
        MOV     R16, R6
??HTTP_hook_DATA_TX_4:
        LD      R24, Y+
        LD      R25, Y+
        LD      R4, Y+
        LD      R5, Y+
        LD      R6, Y+
        LD      R7, Y+
        RET
??HTTP_hook_DATA_TX_16:
        LDI     R16, 0
        MOVW    R31:R30, R27:R26
        STD     Z+6, R16
??HTTP_hook_DATA_TX_20:
        STD     Z+2, R18
        STD     Z+3, R19
        RJMP    ??HTTP_hook_DATA_TX_11
??HTTP_hook_DATA_TX_21:
        SUBI    R18, 255
        SBCI    R19, 255
        MOV     R17, R4
        OR      R17, R5
        BREQ    ??HTTP_hook_DATA_TX_22
        MOVW    R31:R30, R5:R4
        ST      Z+, R16
        MOVW    R5:R4, R31:R30
??HTTP_hook_DATA_TX_22:
        INC     R6
??HTTP_hook_DATA_TX_23:
        MOVW    R31:R30, R19:R18
        LPM     R17, Z
        MOV     R16, R17
        TST     R17
        BREQ    ??HTTP_hook_DATA_TX_16
        CP      R6, R7
        BRCS    ??HTTP_hook_DATA_TX_21
        RJMP    ??HTTP_hook_DATA_TX_17
??HTTP_hook_DATA_TX_24:
        SUBI    R20, 255
        SBCI    R21, 255
        MOV     R17, R4
        OR      R17, R5
        BREQ    ??HTTP_hook_DATA_TX_25
        MOVW    R31:R30, R5:R4
        ST      Z+, R16
        MOVW    R5:R4, R31:R30
??HTTP_hook_DATA_TX_25:
        INC     R6
??HTTP_hook_DATA_TX_26:
        CALL    __eeget8_16
        TST     R16
        BREQ    ??HTTP_hook_DATA_TX_27
        CP      R6, R7
        BRCS    ??HTTP_hook_DATA_TX_24
        MOVW    R31:R30, R27:R26
        STD     Z+2, R20
        STD     Z+3, R21
        RJMP    ??HTTP_hook_DATA_TX_19
??HTTP_hook_DATA_TX_27:
        LDI     R16, 0
        MOVW    R31:R30, R27:R26
        STD     Z+6, R16
        STD     Z+2, R20
        STD     Z+3, R21
        RJMP    ??HTTP_hook_DATA_TX_11
??HTTP_hook_DATA_TX_12:
        LDD     R18, Z+2
        LDD     R19, Z+3
        RJMP    ??HTTP_hook_DATA_TX_28
??HTTP_hook_DATA_TX_29:
        MOVW    R31:R30, R19:R18
        LD      R16, Z+
        MOVW    R19:R18, R31:R30
        MOV     R17, R4
        OR      R17, R5
        BREQ    ??HTTP_hook_DATA_TX_30
        MOVW    R31:R30, R5:R4
        ST      Z+, R16
        MOVW    R5:R4, R31:R30
??HTTP_hook_DATA_TX_30:
        INC     R6
??HTTP_hook_DATA_TX_28:
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+6
        TST     R16
        BREQ    ??HTTP_hook_DATA_TX_20
        CP      R6, R7
        BRCS    ??HTTP_hook_DATA_TX_29
        RJMP    ??HTTP_hook_DATA_TX_18
??HTTP_hook_DATA_TX_31:
        CP      R6, R7
        BRCS    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_19
        LD      R18, X+
        LD      R19, X
        SUBI    R18, 255
        SBCI    R19, 255
        ST      X, R19
        ST      -X, R18
        MOV     R17, R4
        OR      R17, R5
        BREQ    ??HTTP_hook_DATA_TX_32
        MOVW    R31:R30, R5:R4
        ST      Z+, R16
        MOVW    R5:R4, R31:R30
??HTTP_hook_DATA_TX_32:
        INC     R6
??HTTP_hook_DATA_TX_11:
        LD      R30, X+
        LD      R31, X
        SBIW    R27:R26, 1
        LPM     R16, Z
        TST     R16
        BREQ    ??HTTP_hook_DATA_TX_33
        CPI     R16, 128
        BRCS    ??HTTP_hook_DATA_TX_31
??HTTP_hook_DATA_TX_33:
        LD      R18, X+
        LD      R19, X
        SUBI    R18, 255
        SBCI    R19, 255
        ST      X, R19
        ST      -X, R18
        CPI     R16, 212
        BRCC    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_34
        CPI     R16, 221
        BRCS    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_34
        MOV     R17, R16
        SUBI    R17, 213
        BREQ    ??HTTP_hook_DATA_TX_35
        DEC     R17
        BREQ    ??HTTP_hook_DATA_TX_36
        DEC     R17
        BREQ    ??HTTP_hook_DATA_TX_37
        DEC     R17
        BREQ    ??HTTP_hook_DATA_TX_38
        DEC     R17
        BRNE    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_39
        DEC     R17
        BRNE    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_40
        DEC     R17
        BRNE    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_41
        DEC     R17
        BRNE    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_42
        RJMP    ??HTTP_hook_DATA_TX_43
??HTTP_hook_DATA_TX_35:
        MOVW    R31:R30, R25:R24
        SUBI    R30, 19
        SBCI    R31, 255
        LD      R16, Z
??HTTP_hook_DATA_TX_44:
        LDI     R17, 0
??HTTP_hook_DATA_TX_45:
        LDI     R30, LOW((http_sock + 173))
        LDI     R31, HIGH((http_sock + 173))
        RCALL   i2a
        LDI     R16, LOW((http_sock + 173))
        LDI     R17, HIGH((http_sock + 173))
??HTTP_hook_DATA_TX_46:
        MOVW    R31:R30, R27:R26
        STD     Z+2, R16
        STD     Z+3, R17
??HTTP_hook_DATA_TX_47:
        LDI     R16, 255
        STD     Z+6, R16
        RJMP    ??HTTP_hook_DATA_TX_10
??HTTP_hook_DATA_TX_36:
        LDI     R16, LOW((station_list + 38))
        LDI     R17, HIGH((station_list + 38))
??HTTP_hook_DATA_TX_48:
        MOVW    R31:R30, R25:R24
        SUBI    R30, 19
        SBCI    R31, 255
        LD      R19, Z
        LDI     R18, 54
        MUL     R19, R18
        ADD     R16, R0
        ADC     R17, R1
        MOVW    R31:R30, R27:R26
        STD     Z+2, R16
        STD     Z+3, R17
        LDI     R16, 253
        STD     Z+6, R16
??HTTP_hook_DATA_TX_8:
        MOV     R31, R27
        LDD     R20, Z+2
        LDD     R21, Z+3
        RJMP    ??HTTP_hook_DATA_TX_26
??HTTP_hook_DATA_TX_37:
        MOVW    R31:R30, R25:R24
        SUBI    R30, 19
        SBCI    R31, 255
        LD      R17, Z
        LDI     R16, 54
        MUL     R17, R16
        LDI     R20, LOW(station_list)
        LDI     R21, (station_list) >> 8
        ADD     R20, R0
        ADC     R21, R1
        CALL    __eeget32_16
        RJMP    ??HTTP_hook_DATA_TX_44
??HTTP_hook_DATA_TX_38:
        MOVW    R31:R30, R25:R24
        SUBI    R30, 19
        SBCI    R31, 255
        LD      R17, Z
        LDI     R16, 54
        MUL     R17, R16
        LDI     R20, LOW(station_list)
        LDI     R21, (station_list) >> 8
        ADD     R20, R0
        ADC     R21, R1
        CALL    __eeget32_16
        MOV     R16, R17
        RJMP    ??HTTP_hook_DATA_TX_44
??HTTP_hook_DATA_TX_39:
        MOVW    R31:R30, R25:R24
        SUBI    R30, 19
        SBCI    R31, 255
        LD      R17, Z
        LDI     R16, 54
        MUL     R17, R16
        LDI     R20, LOW(station_list)
        LDI     R21, (station_list) >> 8
        ADD     R20, R0
        ADC     R21, R1
        CALL    __eeget32_16
        MOV     R16, R18
        RJMP    ??HTTP_hook_DATA_TX_44
??HTTP_hook_DATA_TX_40:
        MOVW    R31:R30, R25:R24
        SUBI    R30, 19
        SBCI    R31, 255
        LD      R17, Z
        LDI     R16, 54
        MUL     R17, R16
        LDI     R20, LOW(station_list)
        LDI     R21, (station_list) >> 8
        ADD     R20, R0
        ADC     R21, R1
        CALL    __eeget32_16
        MOV     R16, R19
        RJMP    ??HTTP_hook_DATA_TX_44
??HTTP_hook_DATA_TX_41:
        LDI     R20, LOW((station_list + 4))
        LDI     R21, HIGH((station_list + 4))
        MOVW    R31:R30, R25:R24
        SUBI    R30, 19
        SBCI    R31, 255
        LD      R17, Z
        LDI     R16, 54
        MUL     R17, R16
        ADD     R20, R0
        ADC     R21, R1
        CALL    __eeget16_16
        RJMP    ??HTTP_hook_DATA_TX_45
??HTTP_hook_DATA_TX_42:
        LDI     R16, LOW((station_list + 6))
        LDI     R17, HIGH((station_list + 6))
        RJMP    ??HTTP_hook_DATA_TX_48
??HTTP_hook_DATA_TX_43:
        LDI     R18, LOW((http_sock - 887))
        LDI     R19, HIGH((http_sock - 887))
??HTTP_hook_DATA_TX_49:
        LDI     R17, 5
        MUL     R16, R17
        ADD     R18, R0
        ADC     R19, R1
        MOVW    R31:R30, R27:R26
        STD     Z+2, R18
        STD     Z+3, R19
        RJMP    ??HTTP_hook_DATA_TX_47
??HTTP_hook_DATA_TX_34:
        CPI     R16, 231
        BRCS    ??HTTP_hook_DATA_TX_50
        CPI     R16, 241
        BRCC    ??HTTP_hook_DATA_TX_50
        LDI     R18, LOW((http_sock - 982))
        LDI     R19, HIGH((http_sock - 982))
        RJMP    ??HTTP_hook_DATA_TX_49
??HTTP_hook_DATA_TX_50:
        MOV     R17, R16
        SUBI    R17, 242
        BRNE    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_5
        DEC     R17
        BRNE    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_51
        SUBI    R17, 1
        BRCS    ??HTTP_hook_DATA_TX_52
        SUBI    R17, 3
        BRCC    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_53
        BRNE    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_11
        DEC     R17
        BRNE    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_54
        DEC     R17
        BRNE    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_55
        SUBI    R17, 2
        BREQ    ??HTTP_hook_DATA_TX_56
        DEC     R17
        BREQ    ??HTTP_hook_DATA_TX_57
        SUBI    R17, 4
        BRNE    ??HTTP_hook_DATA_TX_52
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+4
        LDD     R17, Z+5
        OR      R16, R17
        BREQ    ??HTTP_hook_DATA_TX_58
        LDD     R16, Z+4
        ST      X+, R16
        ST      X, R17
        SBIW    R27:R26, 1
        LDI     R16, 0
        MOV     R31, R27
        STD     Z+4, R16
        STD     Z+5, R16
        RJMP    ??HTTP_hook_DATA_TX_11
??HTTP_hook_DATA_TX_58:
        LD      R16, X+
        LD      R17, X
        SUBI    R16, 1
        SBCI    R17, 0
        ST      X, R17
        ST      -X, R16
        OR      R4, R5
        BREQ    $+2+2
        RJMP    ??HTTP_hook_DATA_TX_19
        ADIW    R25:R24, 27
        MOVW    R31:R30, R25:R24
        LDI     R16, 255
        STD     Z+18, R16
        LDI     R16, 5
        ST      Z, R16
        RJMP    ??HTTP_hook_DATA_TX_19
??HTTP_hook_DATA_TX_52:
        LDI     R17, 2
        MUL     R16, R17
        MOVW    R31:R30, R1:R0
        SUBI    R30, LOW((-(CHUNKS - 256) & 0xFFFF))
        SBCI    R31, HIGH((-(CHUNKS - 256) & 0xFFFF))
        LPM     R16, Z+
        LPM     R17, Z
??HTTP_hook_DATA_TX_59:
        MOVW    R31:R30, R27:R26
        STD     Z+2, R16
        STD     Z+3, R17
        LDI     R16, 254
        STD     Z+6, R16
??HTTP_hook_DATA_TX_9:
        MOV     R31, R27
        LDD     R18, Z+2
        LDD     R19, Z+3
        RJMP    ??HTTP_hook_DATA_TX_23
??HTTP_hook_DATA_TX_57:
        RCALL   __get_SVN_Revision
        RJMP    ??HTTP_hook_DATA_TX_59
??HTTP_hook_DATA_TX_56:
        LDI     R16, LOW((http_sock + 140))
        LDI     R17, HIGH((http_sock + 140))
        RJMP    ??HTTP_hook_DATA_TX_46
??HTTP_hook_DATA_TX_53:
        LD      R18, X+
        LD      R19, X
        SBIW    R27:R26, 1
        MOVW    R31:R30, R27:R26
        STD     Z+4, R18
        STD     Z+5, R19
        LDI     R17, 2
        MUL     R16, R17
        MOVW    R31:R30, R1:R0
        SUBI    R30, LOW((-(HTTP_LEVELS - 488) & 0xFFFF))
        SBCI    R31, HIGH((-(HTTP_LEVELS - 488) & 0xFFFF))
        LPM     R16, Z+
        LPM     R17, Z
        ST      X+, R16
        ST      X, R17
        SBIW    R27:R26, 1
        RJMP    ??HTTP_hook_DATA_TX_11
??HTTP_hook_DATA_TX_55:
        LDI     R16, LOW((http_sock + 173))
        LDI     R17, HIGH((http_sock + 173))
??HTTP_hook_DATA_TX_60:
        MOVW    R31:R30, R27:R26
        STD     Z+2, R16
        STD     Z+3, R17
        LDD     R16, Z+7
        INC     R16
        STD     Z+7, R16
        RJMP    ??HTTP_hook_DATA_TX_6
??HTTP_hook_DATA_TX_54:
        LDI     R16, LOW((http_sock + 178))
        LDI     R17, HIGH((http_sock + 178))
        RJMP    ??HTTP_hook_DATA_TX_60
??HTTP_hook_DATA_TX_51:
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+7
        DEC     R16
        STD     Z+7, R16
        RJMP    ??HTTP_hook_DATA_TX_2
// 1395 }
// 1396 

        RSEG CODE:CODE:NOROOT(1)
// 1397 __x UREG HTTP_hook(UREG state, UREG len, UINT8 *data, TCP_SOCK *_s)
HTTP_hook:
// 1398 {
        MOV     R20, R16
        MOV     R22, R17
        MOVW    R17:R16, R27:R26
        MOVW    R27:R26, R19:R18
// 1399   HTTP_SOCK *s=(HTTP_SOCK *)_s;
// 1400   HTTP_CB *cb;
// 1401   UREG i;
// 1402   UREG j;
// 1403   switch(state)
        DEC     R20
        BREQ    ??HTTP_hook_0
        SUBI    R20, 2
        BREQ    ??HTTP_hook_1
        DEC     R20
        BREQ    ??HTTP_hook_0
        DEC     R20
        BREQ    ??HTTP_hook_2
        DEC     R20
        BREQ    ??HTTP_hook_3
        DEC     R20
        BREQ    ??HTTP_hook_4
        DEC     R20
        BREQ    ??HTTP_hook_5
        DEC     R20
        BREQ    ??HTTP_hook_6
        DEC     R20
        BREQ    ??HTTP_hook_7
        DEC     R20
        BRNE    $+2+2
        RJMP    ??HTTP_hook_8
        DEC     R20
        BRNE    $+2+2
        RJMP    ??HTTP_hook_9
        RJMP    ??HTTP_hook_10
// 1404   {
// 1405   case TCP_EVENT_CONREQ:
// 1406     j=http_q_c_pos; //А сколько народу у нас в ожидании?
??HTTP_hook_0:
        LDS     R16, http_q_c_pos
// 1407     goto L1;
// 1408   case TCP_EVENT_CLOSE:
// 1409     if ((s->state==(UREG)-1)&&(IsGoodHTTPreq(s)==_POST_r)&&(s->af.AUTH_MODE))
// 1410     {
// 1411       __disable_interrupt();
// 1412       for(;;); //Reboot device
// 1413     }
// 1414   case TCP_EVENT_ABORT:
// 1415     j=http_q_c_pos;
// 1416   L1:
// 1417     {
// 1418       char *p=(char*)&s->state;
        MOVW    R31:R30, R27:R26
        ADIW    R31:R30, 45
// 1419       i=sizeof(_HTTP_CONTROL)+sizeof(s->state);
        LDI     R17, 62
        LDI     R18, 0
// 1420       do
// 1421       {
// 1422 	*p++=0;
??HTTP_hook_11:
        ST      Z+, R18
// 1423       }
// 1424       while(--i);
        DEC     R17
        BRNE    ??HTTP_hook_11
// 1425       //do *p++=0; while(--i);
// 1426       s->af.AUTH_PRESENT=0;
        MOVW    R31:R30, R27:R26
        STD     Z+44, R18
// 1427     }
// 1428     return j; //Количество ожидающих клиентов
        RET
??HTTP_hook_1:
        MOVW    R31:R30, R19:R18
        LDD     R16, Z+45
        CPI     R16, 255
        BRNE    ??HTTP_hook_0
        RCALL   IsGoodHTTPreq
        CPI     R16, 8
        BRNE    ??HTTP_hook_0
        MOVW    R31:R30, R27:R26
        LDD     R16, Z+43
        TST     R16
        BREQ    ??HTTP_hook_0
        CLI
??HTTP_hook_12:
        RJMP    ??HTTP_hook_12
// 1429     //s->content_length=(UINT16)-1;
// 1430     //break;
// 1431   case TCP_EVENT_ASYNC_REQ:
// 1432     i=s->sock.async_req;
??HTTP_hook_6:
        MOVW    R31:R30, R19:R18
        LDD     R20, Z+42
// 1433     s->sock.async_req=0;
        LDI     R16, 0
        STD     Z+42, R16
// 1434     if (s->state==_HTTP_SEND)
        LDD     R16, Z+45
        CPI     R16, 22
        BRNE    ??HTTP_hook_10
// 1435     {
// 1436       if (i==3)
        CPI     R20, 3
        BRNE    ??HTTP_hook_10
// 1437       {
// 1438 	s->sock.txreq=TCP_TXREQ_SEND; //Специально, для досыла после первого пакета
        LDI     R16, 3
        STD     Z+41, R16
        RJMP    ??HTTP_hook_10
// 1439       }
// 1440     }
// 1441     break;
// 1442   case TCP_EVENT_DATA:
// 1443     return HTTP_hook_DATA_RX(len,data,s);
??HTTP_hook_4:
        MOVW    R27:R26, R17:R16
        MOV     R16, R22
        RJMP    HTTP_hook_DATA_RX
// 1444   case TCP_EVENT_ACK:
// 1445     //Подтверждение данных
// 1446     cb=&s->httpcb_ack;
??HTTP_hook_2:
        SUBI    R18, 202
        RJMP    ??HTTP_hook_13
// 1447     goto L_SEND;
// 1448   case TCP_EVENT_REGENERATE:
// 1449     //Откат
// 1450     //netw_memcpy(&s->httpcb,&s->httpcb_ack,sizeof(HTTP_CB));
// 1451     {
// 1452       char *dst=(char*)(&s->httpcb);
??HTTP_hook_3:
        MOVW    R31:R30, R19:R18
        ADIW    R31:R30, 46
// 1453       //char *src=(char*)(&s->httpcb_ack);
// 1454       i=sizeof(HTTP_CB);
        LDI     R18, 8
// 1455       do
// 1456       {
// 1457 	*dst=dst[sizeof(HTTP_CB)];//*src++;
??HTTP_hook_14:
        LDD     R19, Z+8
        ST      Z+, R19
// 1458 	dst++;
// 1459       }
// 1460       while(--i);
        DEC     R18
        BRNE    ??HTTP_hook_14
// 1461     }
// 1462   case TCP_EVENT_SEND:
// 1463     cb=&s->httpcb;
??HTTP_hook_5:
        MOVW    R19:R18, R27:R26
        SUBI    R18, 210
??HTTP_hook_13:
        SBCI    R19, 255
// 1464   L_SEND:
// 1465     return HTTP_hook_DATA_TX(len,data,cb,s);
        MOVW    R21:R20, R27:R26
        MOVW    R27:R26, R17:R16
        MOV     R16, R22
        RJMP    HTTP_hook_DATA_TX
// 1466   case TCP_EVENT_QUE_ALLOC:
// 1467     //Занимаем буфер TCP_QUE_CLIENT, если это возможно
// 1468     i=http_q_c_pos;
??HTTP_hook_7:
        LDS     R20, http_q_c_pos
// 1469     if (i==(sizeof(http_q_c)/sizeof(TCP_QUE_CLIENT))) return 0; //Нет места
        CPI     R20, 4
        BRNE    ??HTTP_hook_15
??HTTP_hook_10:
        LDI     R16, 0
        RET
// 1470     *((TCP_QUE_CLIENT **)data)=http_q_c+i;
??HTTP_hook_15:
        LDI     R18, 18
        MUL     R20, R18
        LDI     R18, LOW(http_q_c)
        LDI     R19, (http_q_c) >> 8
        ADD     R18, R0
        ADC     R19, R1
        MOVW    R31:R30, R17:R16
        ST      Z, R18
        STD     Z+1, R19
// 1471     i++;
// 1472     http_q_c_pos=i;
        INC     R20
        STS     http_q_c_pos, R20
// 1473     return i; //Сколько всего
        RJMP    ??HTTP_hook_16
// 1474   case TCP_EVENT_QUE_GET:
// 1475     //Получаем первый TCP_QUE_CLIENT в очереди
// 1476     *((TCP_QUE_CLIENT **)data)=http_q_c;
??HTTP_hook_8:
        LDI     R18, LOW(http_q_c)
        LDI     R19, (http_q_c) >> 8
        MOVW    R31:R30, R17:R16
        ST      Z, R18
        STD     Z+1, R19
// 1477     return http_q_c_pos; //Сколько в очереди
??HTTP_hook_16:
        LDS     R16, http_q_c_pos
        RET
// 1478   case TCP_EVENT_QUE_REMOVE:
// 1479     //Удаляем клиента из очереди
// 1480     {
// 1481       j=http_q_c_pos;
??HTTP_hook_9:
        LDS     R16, http_q_c_pos
// 1482       if (j)
        TST     R16
        BREQ    ??HTTP_hook_17
// 1483       {
// 1484 	char *dst=(char*)(http_q_c+0);
        LDI     R30, LOW(http_q_c)
        LDI     R31, (http_q_c) >> 8
// 1485 	//char *src=(char*)(http_q_c+1);
// 1486 	i=sizeof(http_q_c)-sizeof(TCP_QUE_CLIENT);
        LDI     R17, 54
// 1487 	do
// 1488 	{
// 1489 	  //*dst++=*src++;
// 1490 	  *dst=dst[sizeof(TCP_QUE_CLIENT)];
??HTTP_hook_18:
        LDD     R18, Z+18
        ST      Z+, R18
// 1491 	  dst++;
// 1492 	}
// 1493 	while(--i);
        DEC     R17
        BRNE    ??HTTP_hook_18
// 1494 	j--;
        DEC     R16
// 1495 	http_q_c_pos=j;
        STS     http_q_c_pos, R16
// 1496       }
// 1497       return j; //Сколько осталось
??HTTP_hook_17:
        RET
// 1498     }
// 1499   }
// 1500   return 0;
// 1501 }
// 1502 

        RSEG CODE:CODE:NOROOT(1)
// 1503 void InitVars(void)
InitVars:
// 1504 {
// 1505   UREG i;
// 1506 /*  i=sizeof(EEPROM_BITMAP)-1;
// 1507   //Init EE
// 1508   do
// 1509   {
// 1510     RAM_BITMAP[i]=EEPROM_BITMAP[i];
// 1511   }
// 1512   while((--i)!=(UREG)-1);*/
// 1513   //Init MAC
// 1514   i=sizeof(MAC_EEPROM);
        LDI     R18, 6
        LDI     R23, 0
// 1515   do
// 1516   {
// 1517     MAC0[i]=MAC_EEPROM[i];
??InitVars_0:
        LDI     R20, LOW((MASK_IP_EEPROM + 16))
        LDI     R21, HIGH((MASK_IP_EEPROM + 16))
        ADD     R20, R18
        ADC     R21, R23
        CALL    __eeget8_16
        MOV     R30, R18
        LDI     R31, 0
        SUBI    R30, LOW((-(MAC0) & 0xFFFF))
        SBCI    R31, (-(MAC0) & 0xFFFF) >> 8
        ST      Z, R16
// 1518 //    MAC_GATE0[i]=MAC_GATE[i];
// 1519   }
// 1520   while((--i)!=(UREG)-1);
        DEC     R18
        CPI     R18, 255
        BRNE    ??InitVars_0
// 1521   //Init IP
// 1522   IP=IP_EEPROM;
        LDI     R20, ((MASK_IP_EEPROM + 4) & 0xff) & 0xFF
        LDI     R21, (((MASK_IP_EEPROM + 4) >> 8) & 0xff) & 0xFF
        CALL    __eeget32_16
        LDI     R30, LOW(IP)
        LDI     R31, (IP) >> 8
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
// 1523   MASK_IP=MASK_IP_EEPROM;
        LDI     R20, LOW(MASK_IP_EEPROM)
        LDI     R21, (MASK_IP_EEPROM) >> 8
        CALL    __eeget32_16
        LDI     R30, LOW(MASK_IP)
        LDI     R31, (MASK_IP) >> 8
        ST      Z, R16
        STD     Z+1, R17
        STD     Z+2, R18
        STD     Z+3, R19
// 1524   stationNum=stationNum_EEPROM;
        LDI     R20, LOW(stationNum_EEPROM)
        LDI     R21, (stationNum_EEPROM) >> 8
        CALL    __eeget8_16
        STS     stationNum, R16
// 1525 }
        RET
// 1526 

        RSEG CODE:CODE:NOROOT(1)
// 1527 __monitor void WDT_Prescaler_Change(UREG psr)
WDT_Prescaler_Change:
// 1528 {
        IN      R17, 0x3F
        CLI
// 1529   __watchdog_reset();
        WDR
// 1530   /* Start timed equence */
// 1531   //WDTCSR |= (1<<WDCE) | (1<<WDE);
// 1532   /* Set new prescaler(time-out) value = 64K cycles (~0.5 s) */
// 1533   //WDTCSR = (1<<WDE) | psr;
// 1534 }
        OUT     0x3F, R17
        RET
// 1535 
// 1536 //void ExecuteETH(void);
// 1537 
// 1538 extern void AddGETsocket(void);
// 1539 extern void AddPOSTsocket(void);
// 1540 extern void AddHTTPsocket(void);
// 1541 extern void StartGET(void);
// 1542 extern void StopGET(void);
// 1543 extern void StartPOST(void);
// 1544 
// 1545 //__no_init UCHAR VS_BUFFER32 [32];
// 1546 
// 1547 // Быстрое считывание cчетчика пакетов
// 1548 #pragma inline =forced
// 1549 UREG _enc28j60Read_EPKTCNT (void)
// 1550 { 	
// 1551         UREG data;
// 1552         // set the bank (if needed)
// 1553 	if((EPKTCNT & BANK_MASK) != Enc28j60Bank)
// 1554 	{       // set the bank       
// 1555                 cbi (ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_CS);
// 1556                 // issue write command
// 1557         	SPDR = ENC28J60_BIT_FIELD_CLR | (ECON1 & ADDR_MASK);
// 1558 	        while(!(SPSR & (1<<SPIF)));
// 1559           	// write data
// 1560           	SPDR = (ECON1_BSEL1|ECON1_BSEL0);
// 1561         	while(!(SPSR & (1<<SPIF)));
// 1562                 sbi (ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_CS);
// 1563                 
// 1564                 cbi (ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_CS);
// 1565                 SPDR = ENC28J60_BIT_FIELD_SET | (ECON1 & ADDR_MASK);
// 1566 	        while(!(SPSR & (1<<SPIF)));
// 1567           	// write data
// 1568           	SPDR = ((EPKTCNT & BANK_MASK)>>5);
// 1569         	while(!(SPSR & (1<<SPIF)));
// 1570                 sbi (ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_CS);                                
// 1571 		Enc28j60Bank = (EPKTCNT & BANK_MASK);
// 1572 	}
// 1573         cbi (ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_CS);
// 1574         // issue read command
// 1575 	SPDR = ENC28J60_READ_CTRL_REG | (EPKTCNT & ADDR_MASK);
// 1576 	while(!(SPSR & (1<<SPIF)));
// 1577 	// read data
// 1578 	SPDR = 0xFF;
// 1579 	while(!(SPSR & (1<<SPIF)));
// 1580 	// do dummy read if needed
// 1581 	data = SPDR;
// 1582         sbi (ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_CS);
// 1583         return data;
// 1584 	// release CS
// 1585 }
// 1586 
// 1587 // состояние плеера

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
// 1588 volatile UREG PLAYER_STATE=PLAYER_STATE_STOPED;
PLAYER_STATE:
        DS8 1
// 1589 
// 1590 volatile UINT8 BufferPKT=0;
BufferPKT:
        DS8 1
// 1591 volatile UINT8 FIFO_pkt_TS;
FIFO_pkt_TS:
        DS8 1

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "2">`:
        DC8 "2"

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "Content-Length:">`:
        DC8 "Content-Length:"
        DC8 "Authorization:"
        DC8 "response"
        DC8 "uri"
        DC8 ":uNikeE:"
// 1592 
// 1593 #pragma inline =forced
// 1594 void Try2PlayMP3 (void)
// 1595 {
// 1596     //Выгребаем мп3 данные только состоянии "проигрывание"
// 1597     if (PLAYER_STATE==PLAYER_STATE_PLAYING)
// 1598     {    
// 1599         if ((VS_DREQ_PIN&(1<<VS_DREQ)))//VS_DREQ==1
// 1600         {         
// 1601           if (!_MP3fifo_read32()) // если данные в мп3 буфере исчерпаны
// 1602           {
// 1603              PLAYER_STATE=PLAYER_STATE_BUFFERING; 
// 1604              LCD_fprintline(1,"Buffering");
// 1605           }
// 1606         }
// 1607       }
// 1608       // зашли в состоянии "установлен ZeroWindow"
// 1609       if (GET_WINDOW_STATE==GET_WINDOW_STATE_ZERO)
// 1610         {              
// 1611           switch (PLAYER_STATE)
// 1612           {            
// 1613           case PLAYER_STATE_BUFFERING:
// 1614             // если плеер находился в состоянии "буферизация" то переводим в режим "воспроизведение"          
// 1615             PLAYER_STATE=PLAYER_STATE_PLAYING;
// 1616             LCD_fprintline(1,"Playing");
// 1617             get_sock.sock.async_req=1; //Запустим асинхронный старт
// 1618 //            sbi (PORTD, PD3);               
// 1619             break;
// 1620           case PLAYER_STATE_PLAYING:
// 1621             // в режиме "воспроизведение" обнулилось окно - надо запустить асинхронный старт            
// 1622             get_sock.sock.async_req=1; //Запустим асинхронный старт
// 1623 //            sbi (PORTD, PD3);               
// 1624             break;
// 1625           default:
// 1626             break;
// 1627           }                    
// 1628         }
// 1629 }
// 1630 

        RSEG NEAR_F:CODE:NOROOT(0)
`?<Constant "Buffering">`:
        DC8 "Buffering"
        DC8 "Playing"
        DC8 "Connecting"
        DC8 "Stopping"
// 1631 char const __flash _Hello_string[]=\ 
_Hello_string:
        DC8 0DH, 0AH, 2AH, 2AH, 2AH, 20H, 75H, 45H
        DC8 74H, 68H, 52H, 61H, 64H, 69H, 6FH, 20H
        DC8 76H, 31H, 2EH, 30H, 30H, 2CH, 28H, 63H
        DC8 29H, 32H, 30H, 31H, 30H, 0DH, 0AH, 2AH
        DC8 2AH, 2AH, 20H, 62H, 79H, 20H, 41H, 6CH
        DC8 65H, 78H, 61H, 6EH, 64H, 65H, 72H, 20H
        DC8 59H, 65H, 72H, 65H, 7AH, 65H, 79H, 65H
        DC8 76H, 0DH, 0AH, 2AH, 2AH, 2AH, 20H, 75H
        DC8 4EH, 69H, 6BH, 65H, 20H, 54H, 43H, 50H
        DC8 2FH, 49H, 50H, 20H, 73H, 74H, 61H, 63H
        DC8 6BH, 20H, 62H, 79H, 20H, 52H, 53H, 54H
        DC8 37H, 2FH, 43H, 42H, 53H, 49H, 45H, 0DH
        DC8 0AH, 0DH, 0AH, 0

        RSEG NEAR_F:CODE:NOROOT(0)
HTTP_LEVELS:
        DC16 http_root_level1, http_root_level2, http_root_level3
        DC16 http_eeprom_refr_button
// 1632 "\r\n\ 
// 1633 *** uEthRadio v1.00,(c)2010\r\n\ 
// 1634 *** by Alexander Yerezeyev\r\n\ 
// 1635 *** uNike TCP/IP stack by RST7/CBSIE\r\n\ 
// 1636 \r\n";
// 1637 
// 1638 #pragma inline=forced
// 1639 UINT16 _READ_U16_REV(volatile UINT8 *p)
// 1640 {
// 1641 #pragma diag_suppress=Pa082
// 1642   return p[1]|(p[0]<<8);
// 1643 #pragma diag_default=Pa082
// 1644 }
// 1645 
// 1646 

        RSEG CODE:CODE:NOROOT(1)
// 1647 __task void main(void)
main:
// 1648 {
// 1649   UINT16 ii;
// 1650   UINT8 *p;
// 1651   sbi(DDRD, PD3);  
        SBI     0x11, 0x03
// 1652   sbi(DDRD, PD5); 
        SBI     0x11, 0x05
// 1653   sbi (PORTD, PD3);  
        SBI     0x12, 0x03
// 1654   _delay_ms(1000);
        LDI     R16, 255
        LDI     R17, 211
        LDI     R18, 48
        SUBI    R16, 1
        SBCI    R17, 0
        SBCI    R18, 0
        BRNE    $-6
        RJMP    $+2
        NOP
// 1655   cbi (PORTD, PD3);
        CBI     0x12, 0x03
// 1656   VS_INIT(); 
        CALL    VS_INIT
// 1657   VS_VOL();  
        CALL    VS_VOL
// 1658   p=(UINT8*)&http_sock;
        LDI     R30, LOW(http_sock)
        LDI     R31, (http_sock) >> 8
// 1659   ii=sizeof(http_sock);
        LDI     R16, 238
        LDI     R17, 0
// 1660   do
// 1661   {
// 1662     *p++=0;
??main_0:
        ST      Z+, R17
// 1663   }
// 1664   while(--ii);
        DEC     R16
        BRNE    ??main_0
// 1665   uart_init();
        CALL    uart_init
// 1666  // for (i=0;i<64;i++) {while ( !( UCSRA & (1<<UDRE)) );UDR = 0xAA;}
// 1667    _print_fstr(_Hello_string);
        LDI     R16, LOW((`?<Constant "Buffering">` + 38))
        LDI     R17, HIGH((`?<Constant "Buffering">` + 38))
        CALL    _print_fstr
// 1668   #ifdef CONSOLE_DEBUG
// 1669   _print_fstr(_Hello_string);
// 1670   #endif
// 1671   TWAR=0x00;
        LDI     R16, 0
        OUT     0x02, R16
// 1672   InitVars();
        RCALL   InitVars
// 1673   __disable_interrupt();
        CLI
// 1674   nic_init();
        CALL    nic_init
// 1675   InitEthernetHW();
        CALL    InitEthernetHW
// 1676   fifo_init();
        CALL    fifo_init
// 1677   //fifo_test();
// 1678   __enable_interrupt();
        SEI
// 1679    AddHTTPsocket(); 
        RCALL   AddHTTPsocket
// 1680    AddGETsocket();
        CALL    AddGETsocket
// 1681   // AddPOSTsocket();
// 1682   //_delay_ms(1000);
// 1683    //_delay_ms(1000);
// 1684    LCD_init_4();     
        CALL    LCD_init_4
// 1685    stationNum=stationNum_EEPROM;   
        LDI     R20, LOW(stationNum_EEPROM)
        LDI     R21, (stationNum_EEPROM) >> 8
        CALL    __eeget8_16
        STS     stationNum, R16
// 1686    LCD_fprintlineEE(0,&station_list[stationNum].LCD_ID[0]);
        LDI     R30, LOW((station_list + 38))
        LDI     R31, HIGH((station_list + 38))
        LDS     R17, stationNum
        LDI     R16, 54
        MUL     R17, R16
        ADD     R30, R0
        ADC     R31, R1
        LDI     R16, 0
        CALL    LCD_fprintlineEE
// 1687    LCD_TCPstate(get_sock.sock.state); 
        LDS     R16, (get_sock + 27)
        CALL    LCD_TCPstate
// 1688    LCD_PLAYERstate(PLAYER_STATE);
        LDS     R16, PLAYER_STATE
        CALL    LCD_PLAYERstate
// 1689   //Инициализируем ADC
// 1690   //ADMUX=(0<<REFS1)|(0<<REFS0)|(1<<ADLAR)|6; //Выбираем линию 1
// 1691   //ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADIF)|7;//Прескаллер 1:128
// 1692   // Инициализация таймера 1
// 1693   OCR1A=0x0001; 
        LDI     R16, 1
        LDI     R17, 0
        OUT     0x2B, R17
        OUT     0x2A, R16
// 1694   TCCR1A|=(1<<COM1A1)|(1<<COM1A0)|(1<<WGM11);// 9 bit PWM
        IN      R16, 0x2F
        ORI     R16, 0xC2
        OUT     0x2F, R16
// 1695   TCCR2|=(1<<CS22)|(1<<CS21)|(1<<CS20); //1024
        IN      R16, 0x25
        ORI     R16, 0x07
        OUT     0x25, R16
// 1696   TCCR1B|=(1<<WGM12)|(1<<CS10);
        IN      R16, 0x2E
        ORI     R16, 0x09
        OUT     0x2E, R16
// 1697   TIMSK|=(1<<TOIE2);
        IN      R16, 0x39
        ORI     R16, 0x40
        OUT     0x39, R16
        RJMP    ??main_1
// 1698   //UINT8 i;
// 1699   //for (i=0;i<=9;i++)    {LCD_putc ('*');}
// 1700 //  station_list[stationNum].LCD_ID[0]='A';    
// 1701   for(;;)
// 1702   {  
// 1703     BufferPKT=0; // Сбросим флаг того, что пакет пришел из буфера
// 1704     if (ETH_TASK_WAKEUP) // если таймер натикал
// 1705     {
// 1706         ETH_TASK_WAKEUP=0;         
// 1707         goto L_WAKE_UP; // принудительно вызовем стек
// 1708     }
// 1709     // иначе вызываем только после того, как что то пришло в буфер
// 1710     if((_enc28j60Read_EPKTCNT()!=0)&&(nic_poll() != 0))
// 1711     {
// 1712 L_WAKE_UP:
// 1713       INT_ETH_PROCESS_PKT2();   //Позвать стек (в RAM-буфере лежит пакет)      
// 1714       UREG fc=ETHfifo_CNT;
// 1715       while(fc--)   // пока есть пакеты в буфере      
// 1716       {        
// 1717         cbi (TIMSK, TOIE2);
// 1718         UINT8 TS;
// 1719         INT8 CTS;
// 1720         UINT16 PKT_len;
// 1721         UINT8 irshigh8;
// 1722         PKT_len=ETHfifo_PKT_read((unsigned char *)&ETH_PKT.hdr.dst_mac, &TS);//Считаем пакет, и таймаут    
// 1723         FIFO_pkt_TS=TS; // сохраним таймаут в переменной для последующего использования  
// 1724         irshigh8=(UINT8) (irs_high&0x00FF);
// 1725         CTS = (INT8) TS;
// 1726         CTS-=irshigh8;
// 1727         if (CTS<0) 
// 1728         {
// 1729           #ifdef CONSOLE_DEBUG
// 1730           _print_num("Old PKT:",(UINT16)(irshigh8));
// 1731           _print_rn();
// 1732           #endif
// 1733           continue;  // пакет устарел - пропускаем его                     
// 1734         }         
// 1735         #ifdef CONSOLE_DEBUG        
// 1736         IP_FRAME *ip;
// 1737         ip=(IP_FRAME*)(&ETH_PKT); 
// 1738         _print_num("FFlen:",PKT_len);
// 1739         _print_num("IDFF:",_READ_U16_REV (((UINT8*)(&ip->ip.id))));
// 1740         #endif
// 1741         BufferPKT=1;  // поднимем флаг - "есть пакет из буфера"
// 1742         ETH_PKT_mode=1;
// 1743         ETH_PKT_len=PKT_len;
// 1744         INT_ETH_PROCESS_PKT2(); // позовем стек
// 1745         UREG i;
// 1746         for (i=0;i<=4;i++) Try2PlayMP3();
// 1747       }   
// 1748     }
// 1749   sbi (TIMSK, TOIE2);
// 1750   UREG i;
// 1751   for (i=0;i<=3;i++) Try2PlayMP3();
// 1752 //  Try2PlayMP3();
// 1753   OCR1A = (UINT16)(_MP3fifo_len()>>8);
// 1754   if (Keyboard_task)
// 1755   {
// 1756     switch (Keyboard_task)
// 1757     {
// 1758       case Keyboard_task_startget:
// 1759         LCD_fprintline(1,"Connecting");
// 1760         StartGET();
// 1761         break;
// 1762       case Keyboard_task_stopget:
// 1763          PLAYER_STATE= PLAYER_STATE_STOPREQ;
// 1764          LCD_fprintline(1,"Stopping");
// 1765         break;
// 1766       case Keyboard_task_stationchange:
// 1767         stationNum++;
??main_2:
        LDS     R16, stationNum
        INC     R16
        STS     stationNum, R16
// 1768         if (stationNum>15) stationNum=0;
        LDS     R16, stationNum
        CPI     R16, 16
        BRCS    ??main_3
        LDI     R16, 0
        STS     stationNum, R16
// 1769         stationNum_EEPROM=stationNum;
??main_3:
        LDS     R16, stationNum
        LDI     R20, LOW(stationNum_EEPROM)
        LDI     R21, (stationNum_EEPROM) >> 8
        CALL    __eeput8_16
// 1770         LCD_fprintlineEE(0,&station_list[stationNum].LCD_ID[0]);
        LDI     R30, LOW((station_list + 38))
        LDI     R31, HIGH((station_list + 38))
        LDS     R17, stationNum
        LDI     R16, 54
        MUL     R17, R16
        ADD     R30, R0
        ADC     R31, R1
        LDI     R16, 0
        CALL    LCD_fprintlineEE
// 1771         break;          
// 1772     }
// 1773     Keyboard_task=0;
??main_4:
        LDI     R16, 0
        STS     Keyboard_task, R16
??main_1:
        LDI     R16, 0
        STS     (PLAYER_STATE + 1), R16
        SBIS    0x02, 0x01
        RJMP    ??main_5
        CBI     0x02, 0x01
        RJMP    ??main_6
??main_5:
        LDS     R16, Enc28j60Bank
        CPI     R16, 32
        BREQ    ??main_7
        CBI     0x18, 0x02
        LDI     R16, 191
        OUT     0x0F, R16
??main_8:
        SBIS    0x0E, 0x07
        RJMP    ??main_8
        LDI     R16, 3
        OUT     0x0F, R16
??main_9:
        SBIS    0x0E, 0x07
        RJMP    ??main_9
        SBI     0x18, 0x02
        CBI     0x18, 0x02
        LDI     R16, 159
        OUT     0x0F, R16
??main_10:
        SBIS    0x0E, 0x07
        RJMP    ??main_10
        LDI     R16, 1
        OUT     0x0F, R16
??main_11:
        SBIS    0x0E, 0x07
        RJMP    ??main_11
        SBI     0x18, 0x02
        LDI     R16, 32
        STS     Enc28j60Bank, R16
??main_7:
        CBI     0x18, 0x02
        LDI     R16, 25
        OUT     0x0F, R16
??main_12:
        SBIS    0x0E, 0x07
        RJMP    ??main_12
        LDI     R16, 255
        OUT     0x0F, R16
??main_13:
        SBIS    0x0E, 0x07
        RJMP    ??main_13
        IN      R16, 0x0F
        SBI     0x18, 0x02
        TST     R16
        BRNE    $+2+2
        RJMP    ??main_14
        CALL    nic_poll
        OR      R16, R17
        BRNE    $+2+2
        RJMP    ??main_14
??main_6:
        CALL    INT_ETH_PROCESS_PKT2
        LDS     R4, ETHfifo_CNT
        TST     R4
        BRNE    $+2+2
        RJMP    ??main_14
??main_15:
        TST     R4
        BRNE    $+2+2
        RJMP    ??main_14
        DEC     R4
        IN      R16, 0x39
        ANDI    R16, 0xBF
        OUT     0x39, R16
        LDI     R30, LOW(ETH_PKT)
        LDI     R31, (ETH_PKT) >> 8
        LDI     R27, 0
        LDS     R20, ETHfifo_pRD
        LDS     R21, (ETHfifo_pRD + 1)
        LDS     R22, (ETHfifo_pRD + 2)
        LDS     R23, (ETHfifo_pRD + 3)
        CBI     0x12, 0x04
        LDI     R16, 3
        OUT     0x0F, R16
??main_16:
        SBIS    0x0E, 0x07
        RJMP    ??main_16
        OUT     0x0F, R22
??main_17:
        SBIS    0x0E, 0x07
        RJMP    ??main_17
        OUT     0x0F, R21
??main_18:
        SBIS    0x0E, 0x07
        RJMP    ??main_18
        OUT     0x0F, R20
??main_19:
        SBIS    0x0E, 0x07
        RJMP    ??main_19
        LDI     R16, 1
        LDI     R17, 0
??main_20:
        CLR     R5
        LDI     R18, 255
        OUT     0x0F, R18
        SUBI    R20, 255
        SBCI    R21, 255
        SBCI    R22, 255
        SBCI    R23, 255
        CPI     R20, 0
        CPC     R21, R5
        LDI     R18, 2
        CPC     R22, R18
        CPC     R23, R5
        BRCS    ??main_21
        INC     R5
??main_21:
        SBIS    0x0E, 0x07
        RJMP    ??main_21
        IN      R0, 0x0F
        MOV     R18, R27
        TST     R27
        BREQ    ??main_22
        DEC     R18
        BREQ    ??main_23
        DEC     R18
        BREQ    ??main_24
        RJMP    ??main_25
??main_22:
        MOV     R25, R0
        LDI     R24, 0
??main_26:
        SUBI    R16, 255
        SBCI    R17, 255
        INC     R27
        RJMP    ??main_27
??main_23:
        OR      R24, R0
        RJMP    ??main_26
??main_24:
        MOV     R26, R0
        INC     R27
        CPI     R24, 119
        LDI     R16, 5
        CPC     R25, R16
        BRCS    ??main_28
        LDI     R24, 118
        LDI     R25, 5
??main_28:
        LDS     R16, ETHfifo_pWR
        LDS     R17, (ETHfifo_pWR + 1)
        LDS     R18, (ETHfifo_pWR + 2)
        LDS     R19, (ETHfifo_pWR + 3)
        LDS     R0, ETHfifo_pRD
        LDS     R1, (ETHfifo_pRD + 1)
        LDS     R2, (ETHfifo_pRD + 2)
        LDS     R3, (ETHfifo_pRD + 3)
        CP      R16, R0
        CPC     R17, R1
        CPC     R18, R2
        CPC     R19, R3
        BRCC    ??main_29
        SUB     R16, R0
        SBC     R17, R1
        SBC     R18, R2
        SBC     R19, R3
        SUBI    R16, 69
        SBCI    R17, 201
        SBCI    R18, 255
        SBCI    R19, 255
        RJMP    ??main_30
??main_29:
        CP      R0, R16
        CPC     R1, R17
        CPC     R2, R18
        CPC     R3, R19
        BRCC    ??main_31
        SUB     R16, R0
        SBC     R17, R1
        SBC     R18, R2
        SBC     R19, R3
        RJMP    ??main_30
??main_31:
        LDI     R16, 0
        LDI     R17, 0
        LDI     R18, 0
        LDI     R19, 0
??main_30:
        CP      R16, R24
        CPC     R17, R25
        SBCI    R18, 0
        SBCI    R19, 0
        BRCC    ??main_32
        LDI     R18, 0
        LDI     R19, 0
        RJMP    ??main_33
??main_32:
        MOVW    R17:R16, R25:R24
        SUBI    R16, 255
        SBCI    R17, 255
        RJMP    ??main_27
??main_25:
        ST      Z+, R0
??main_27:
        TST     R5
        BREQ    ??main_34
        SBI     0x12, 0x04
        LDI     R20, 69
        LDI     R21, 201
        LDI     R22, 1
        LDI     R23, 0
        CBI     0x12, 0x04
        LDI     R18, 3
        OUT     0x0F, R18
??main_35:
        SBIS    0x0E, 0x07
        RJMP    ??main_35
        OUT     0x0F, R22
??main_36:
        SBIS    0x0E, 0x07
        RJMP    ??main_36
        OUT     0x0F, R21
??main_37:
        SBIS    0x0E, 0x07
        RJMP    ??main_37
        OUT     0x0F, R20
??main_38:
        SBIS    0x0E, 0x07
        RJMP    ??main_38
??main_34:
        MOVW    R19:R18, R17:R16
        SUBI    R16, 1
        SBCI    R17, 0
        OR      R18, R19
        BREQ    $+2+2
        RJMP    ??main_20
        SBI     0x12, 0x04
        LDI     R30, LOW(ETHfifo_pRD)
        LDI     R31, (ETHfifo_pRD) >> 8
        ST      Z, R20
        STD     Z+1, R21
        STD     Z+2, R22
        STD     Z+3, R23
        LDS     R16, ETHfifo_CNT
        DEC     R16
        STS     ETHfifo_CNT, R16
        MOVW    R19:R18, R25:R24
??main_33:
        STS     (PLAYER_STATE + 2), R26
        LDS     R16, (_A_count_200ms_low + 2)
        LDS     R17, (_A_count_200ms_low + 3)
        SUB     R26, R16
        BRPL    $+2+2
        RJMP    ??main_15
        LDI     R16, 1
        STS     (PLAYER_STATE + 1), R16
        STS     ETH_PKT_mode, R16
        STS     ETH_PKT_len, R18
        STS     (ETH_PKT_len + 1), R19
        CALL    INT_ETH_PROCESS_PKT2
        LDI     R24, 5
        RJMP    ??main_39
??main_40:
        LDI     R16, 1
        STS     (get_sock + 42), R16
??main_41:
        DEC     R24
        BRNE    $+2+2
        RJMP    ??main_15
??main_39:
        LDS     R16, PLAYER_STATE
        CPI     R16, 2
        BREQ    $+2+2
        RJMP    ??main_42
        SBIS    0x10, 0x07
        RJMP    ??main_42
        LDI     R16, LOW(VS_BUFFER32)
        LDI     R17, (VS_BUFFER32) >> 8
        LDI     R30, LOW(MP3fifo_pWR)
        LDI     R31, (MP3fifo_pWR) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        LDI     R30, LOW(MP3fifo_pRD)
        LDI     R31, (MP3fifo_pRD) >> 8
        LD      R0, Z
        LDD     R1, Z+1
        LDD     R2, Z+2
        LDD     R3, Z+3
        CP      R20, R0
        CPC     R21, R1
        CPC     R22, R2
        CPC     R23, R3
        BRCC    ??main_43
        LDI     R20, 68
        LDI     R21, 201
        LDI     R22, 1
        LDI     R23, 0
        SUB     R20, R0
        SBC     R21, R1
        SBC     R22, R2
        SBC     R23, R3
        LDI     R30, LOW(MP3fifo_pWR)
        LDI     R31, (MP3fifo_pWR) >> 8
        LD      R0, Z
        LDD     R1, Z+1
        LDD     R2, Z+2
        LDD     R3, Z+3
        ADD     R20, R0
        ADC     R21, R1
        ADC     R22, R2
        ADC     R23, R3
        RJMP    ??main_44
??main_43:
        MOVW    R21:R20, R1:R0
        MOVW    R23:R22, R3:R2
        LDI     R30, LOW(MP3fifo_pWR)
        LDI     R31, (MP3fifo_pWR) >> 8
        LD      R0, Z
        LDD     R1, Z+1
        LDD     R2, Z+2
        LDD     R3, Z+3
        CP      R20, R0
        CPC     R21, R1
        CPC     R22, R2
        CPC     R23, R3
        BRCC    ??main_45
        MOVW    R21:R20, R1:R0
        MOVW    R23:R22, R3:R2
        LDI     R30, LOW(MP3fifo_pRD)
        LDI     R31, (MP3fifo_pRD) >> 8
        LD      R0, Z
        LDD     R1, Z+1
        LDD     R2, Z+2
        LDD     R3, Z+3
        SUB     R20, R0
        SBC     R21, R1
        SBC     R22, R2
        SBC     R23, R3
??main_44:
        CPI     R20, 32
        SBCI    R21, 0
        SBCI    R22, 0
        SBCI    R23, 0
        BRCC    ??main_46
??main_45:
        LDI     R16, 1
        STS     PLAYER_STATE, R16
        LDI     R30, LOW(`?<Constant "Buffering">`)
        LDI     R31, (`?<Constant "Buffering">`) >> 8
        CALL    LCD_fprintline
        RJMP    ??main_42
??main_46:
        LDI     R30, LOW(MP3fifo_pRD)
        LDI     R31, (MP3fifo_pRD) >> 8
        LD      R0, Z
        LDD     R1, Z+1
        LDD     R2, Z+2
        LDD     R3, Z+3
        MOVW    R21:R20, R1:R0
        MOVW    R23:R22, R3:R2
        SUBI    R20, 224
        SBCI    R21, 255
        SBCI    R22, 255
        SBCI    R23, 255
        CPI     R20, 68
        SBCI    R21, 201
        SBCI    R22, 1
        LDI     R18, 0
        SBCI    R23, 0
        BRCS    $+2+2
        RJMP    ??main_47
        CBI     0x12, 0x04
        LDI     R16, 3
        OUT     0x0F, R16
??main_48:
        SBIS    0x0E, 0x07
        RJMP    ??main_48
        OUT     0x0F, R2
??main_49:
        SBIS    0x0E, 0x07
        RJMP    ??main_49
        OUT     0x0F, R1
??main_50:
        SBIS    0x0E, 0x07
        RJMP    ??main_50
        OUT     0x0F, R0
??main_51:
        SBIS    0x0E, 0x07
        RJMP    ??main_51
        LDI     R16, 255
        OUT     0x0F, R16
??main_52:
        SBIS    0x0E, 0x07
        RJMP    ??main_52
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     VS_BUFFER32, R17
??main_53:
        SBIS    0x0E, 0x07
        RJMP    ??main_53
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 1), R17
??main_54:
        SBIS    0x0E, 0x07
        RJMP    ??main_54
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 2), R17
??main_55:
        SBIS    0x0E, 0x07
        RJMP    ??main_55
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 3), R17
??main_56:
        SBIS    0x0E, 0x07
        RJMP    ??main_56
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 4), R17
??main_57:
        SBIS    0x0E, 0x07
        RJMP    ??main_57
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 5), R17
??main_58:
        SBIS    0x0E, 0x07
        RJMP    ??main_58
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 6), R17
??main_59:
        SBIS    0x0E, 0x07
        RJMP    ??main_59
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 7), R17
??main_60:
        SBIS    0x0E, 0x07
        RJMP    ??main_60
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 8), R17
??main_61:
        SBIS    0x0E, 0x07
        RJMP    ??main_61
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 9), R17
??main_62:
        SBIS    0x0E, 0x07
        RJMP    ??main_62
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 10), R17
??main_63:
        SBIS    0x0E, 0x07
        RJMP    ??main_63
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 11), R17
??main_64:
        SBIS    0x0E, 0x07
        RJMP    ??main_64
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 12), R17
??main_65:
        SBIS    0x0E, 0x07
        RJMP    ??main_65
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 13), R17
??main_66:
        SBIS    0x0E, 0x07
        RJMP    ??main_66
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 14), R17
??main_67:
        SBIS    0x0E, 0x07
        RJMP    ??main_67
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 15), R17
??main_68:
        SBIS    0x0E, 0x07
        RJMP    ??main_68
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 16), R17
??main_69:
        SBIS    0x0E, 0x07
        RJMP    ??main_69
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 17), R17
??main_70:
        SBIS    0x0E, 0x07
        RJMP    ??main_70
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 18), R17
??main_71:
        SBIS    0x0E, 0x07
        RJMP    ??main_71
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 19), R17
??main_72:
        SBIS    0x0E, 0x07
        RJMP    ??main_72
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 20), R17
??main_73:
        SBIS    0x0E, 0x07
        RJMP    ??main_73
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 21), R17
??main_74:
        SBIS    0x0E, 0x07
        RJMP    ??main_74
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 22), R17
??main_75:
        SBIS    0x0E, 0x07
        RJMP    ??main_75
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 23), R17
??main_76:
        SBIS    0x0E, 0x07
        RJMP    ??main_76
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 24), R17
??main_77:
        SBIS    0x0E, 0x07
        RJMP    ??main_77
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 25), R17
??main_78:
        SBIS    0x0E, 0x07
        RJMP    ??main_78
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 26), R17
??main_79:
        SBIS    0x0E, 0x07
        RJMP    ??main_79
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 27), R17
??main_80:
        SBIS    0x0E, 0x07
        RJMP    ??main_80
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 28), R17
??main_81:
        SBIS    0x0E, 0x07
        RJMP    ??main_81
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 29), R17
??main_82:
        SBIS    0x0E, 0x07
        RJMP    ??main_82
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 30), R17
??main_83:
        SBIS    0x0E, 0x07
        RJMP    ??main_83
        IN      R17, 0x0F
        STS     (VS_BUFFER32 + 31), R17
        SBI     0x12, 0x04
        LDI     R16, 32
        ADD     R0, R16
        ADC     R1, R18
        ADC     R2, R18
        ADC     R3, R18
        ST      Z, R20
        STD     Z+1, R1
        STD     Z+2, R2
        STD     Z+3, R3
        RJMP    ??main_84
??main_47:
        LDI     R30, 68
        SUB     R30, R0
        LDI     R18, 32
        SUB     R18, R30
        TST     R30
        BREQ    ??main_85
        CBI     0x12, 0x04
        LDI     R19, 3
        OUT     0x0F, R19
??main_86:
        SBIS    0x0E, 0x07
        RJMP    ??main_86
        OUT     0x0F, R2
??main_87:
        SBIS    0x0E, 0x07
        RJMP    ??main_87
        OUT     0x0F, R1
??main_88:
        SBIS    0x0E, 0x07
        RJMP    ??main_88
        OUT     0x0F, R0
??main_89:
        SBIS    0x0E, 0x07
        RJMP    ??main_89
        MOV     R19, R30
??main_90:
        LDI     R20, 255
        OUT     0x0F, R20
??main_91:
        SBIS    0x0E, 0x07
        RJMP    ??main_91
        IN      R20, 0x0F
        MOVW    R31:R30, R17:R16
        ST      Z+, R20
        MOVW    R17:R16, R31:R30
        DEC     R19
        BRNE    ??main_90
        SBI     0x12, 0x04
        CLR     R0
        CLR     R1
        CLR     R2
        CLR     R3
        LDI     R30, LOW(MP3fifo_pRD)
        LDI     R31, (MP3fifo_pRD) >> 8
        ST      Z, R0
        STD     Z+1, R0
        STD     Z+2, R0
        STD     Z+3, R0
??main_85:
        TST     R18
        BREQ    ??main_84
        CBI     0x12, 0x04
        LDI     R19, 3
        OUT     0x0F, R19
??main_92:
        SBIS    0x0E, 0x07
        RJMP    ??main_92
        OUT     0x0F, R2
??main_93:
        SBIS    0x0E, 0x07
        RJMP    ??main_93
        OUT     0x0F, R1
??main_94:
        SBIS    0x0E, 0x07
        RJMP    ??main_94
        OUT     0x0F, R0
        LDI     R21, 0
        ADD     R0, R18
        ADC     R1, R21
        ADC     R2, R21
        ADC     R3, R21
        LDI     R30, LOW(MP3fifo_pRD)
        ST      Z, R0
        STD     Z+1, R1
        STD     Z+2, R2
        STD     Z+3, R3
??main_95:
        SBIS    0x0E, 0x07
        RJMP    ??main_95
        MOV     R19, R18
??main_96:
        LDI     R18, 255
        OUT     0x0F, R18
??main_97:
        SBIS    0x0E, 0x07
        RJMP    ??main_97
        IN      R18, 0x0F
        MOVW    R31:R30, R17:R16
        ST      Z+, R18
        MOVW    R17:R16, R31:R30
        DEC     R19
        BRNE    ??main_96
        SBI     0x12, 0x04
??main_84:
        CBI     0x18, 0x03
        LDS     R16, VS_BUFFER32
        OUT     0x0F, R16
??main_98:
        SBIS    0x0E, 0x07
        RJMP    ??main_98
        LDS     R16, (VS_BUFFER32 + 1)
        OUT     0x0F, R16
??main_99:
        SBIS    0x0E, 0x07
        RJMP    ??main_99
        LDS     R16, (VS_BUFFER32 + 2)
        OUT     0x0F, R16
??main_100:
        SBIS    0x0E, 0x07
        RJMP    ??main_100
        LDS     R16, (VS_BUFFER32 + 3)
        OUT     0x0F, R16
??main_101:
        SBIS    0x0E, 0x07
        RJMP    ??main_101
        LDS     R16, (VS_BUFFER32 + 4)
        OUT     0x0F, R16
??main_102:
        SBIS    0x0E, 0x07
        RJMP    ??main_102
        LDS     R16, (VS_BUFFER32 + 5)
        OUT     0x0F, R16
??main_103:
        SBIS    0x0E, 0x07
        RJMP    ??main_103
        LDS     R16, (VS_BUFFER32 + 6)
        OUT     0x0F, R16
??main_104:
        SBIS    0x0E, 0x07
        RJMP    ??main_104
        LDS     R16, (VS_BUFFER32 + 7)
        OUT     0x0F, R16
??main_105:
        SBIS    0x0E, 0x07
        RJMP    ??main_105
        LDS     R16, (VS_BUFFER32 + 8)
        OUT     0x0F, R16
??main_106:
        SBIS    0x0E, 0x07
        RJMP    ??main_106
        LDS     R16, (VS_BUFFER32 + 9)
        OUT     0x0F, R16
??main_107:
        SBIS    0x0E, 0x07
        RJMP    ??main_107
        LDS     R16, (VS_BUFFER32 + 10)
        OUT     0x0F, R16
??main_108:
        SBIS    0x0E, 0x07
        RJMP    ??main_108
        LDS     R16, (VS_BUFFER32 + 11)
        OUT     0x0F, R16
??main_109:
        SBIS    0x0E, 0x07
        RJMP    ??main_109
        LDS     R16, (VS_BUFFER32 + 12)
        OUT     0x0F, R16
??main_110:
        SBIS    0x0E, 0x07
        RJMP    ??main_110
        LDS     R16, (VS_BUFFER32 + 13)
        OUT     0x0F, R16
??main_111:
        SBIS    0x0E, 0x07
        RJMP    ??main_111
        LDS     R16, (VS_BUFFER32 + 14)
        OUT     0x0F, R16
??main_112:
        SBIS    0x0E, 0x07
        RJMP    ??main_112
        LDS     R16, (VS_BUFFER32 + 15)
        OUT     0x0F, R16
??main_113:
        SBIS    0x0E, 0x07
        RJMP    ??main_113
        LDS     R16, (VS_BUFFER32 + 16)
        OUT     0x0F, R16
??main_114:
        SBIS    0x0E, 0x07
        RJMP    ??main_114
        LDS     R16, (VS_BUFFER32 + 17)
        OUT     0x0F, R16
??main_115:
        SBIS    0x0E, 0x07
        RJMP    ??main_115
        LDS     R16, (VS_BUFFER32 + 18)
        OUT     0x0F, R16
??main_116:
        SBIS    0x0E, 0x07
        RJMP    ??main_116
        LDS     R16, (VS_BUFFER32 + 19)
        OUT     0x0F, R16
??main_117:
        SBIS    0x0E, 0x07
        RJMP    ??main_117
        LDS     R16, (VS_BUFFER32 + 20)
        OUT     0x0F, R16
??main_118:
        SBIS    0x0E, 0x07
        RJMP    ??main_118
        LDS     R16, (VS_BUFFER32 + 21)
        OUT     0x0F, R16
??main_119:
        SBIS    0x0E, 0x07
        RJMP    ??main_119
        LDS     R16, (VS_BUFFER32 + 22)
        OUT     0x0F, R16
??main_120:
        SBIS    0x0E, 0x07
        RJMP    ??main_120
        LDS     R16, (VS_BUFFER32 + 23)
        OUT     0x0F, R16
??main_121:
        SBIS    0x0E, 0x07
        RJMP    ??main_121
        LDS     R16, (VS_BUFFER32 + 24)
        OUT     0x0F, R16
??main_122:
        SBIS    0x0E, 0x07
        RJMP    ??main_122
        LDS     R16, (VS_BUFFER32 + 25)
        OUT     0x0F, R16
??main_123:
        SBIS    0x0E, 0x07
        RJMP    ??main_123
        LDS     R16, (VS_BUFFER32 + 26)
        OUT     0x0F, R16
??main_124:
        SBIS    0x0E, 0x07
        RJMP    ??main_124
        LDS     R16, (VS_BUFFER32 + 27)
        OUT     0x0F, R16
??main_125:
        SBIS    0x0E, 0x07
        RJMP    ??main_125
        LDS     R16, (VS_BUFFER32 + 28)
        OUT     0x0F, R16
??main_126:
        SBIS    0x0E, 0x07
        RJMP    ??main_126
        LDS     R16, (VS_BUFFER32 + 29)
        OUT     0x0F, R16
??main_127:
        SBIS    0x0E, 0x07
        RJMP    ??main_127
        LDS     R16, (VS_BUFFER32 + 30)
        OUT     0x0F, R16
??main_128:
        SBIS    0x0E, 0x07
        RJMP    ??main_128
        LDS     R16, (VS_BUFFER32 + 31)
        OUT     0x0F, R16
??main_129:
        SBIS    0x0E, 0x07
        RJMP    ??main_129
        SBI     0x18, 0x03
??main_42:
        LDS     R16, GET_WINDOW_STATE
        CPI     R16, 1
        BREQ    $+2+2
        RJMP    ??main_41
        LDS     R16, PLAYER_STATE
        DEC     R16
        BREQ    ??main_130
        DEC     R16
        BRNE    $+2+2
        RJMP    ??main_40
        RJMP    ??main_41
??main_130:
        LDI     R16, 2
        STS     PLAYER_STATE, R16
        LDI     R30, LOW((`?<Constant "Buffering">` + 10))
        LDI     R31, HIGH((`?<Constant "Buffering">` + 10))
        LDI     R16, 1
        CALL    LCD_fprintline
        RJMP    ??main_40
??main_14:
        IN      R16, 0x39
        ORI     R16, 0x40
        OUT     0x39, R16
        LDI     R24, 4
??main_131:
        LDS     R16, PLAYER_STATE
        CPI     R16, 2
        BREQ    $+2+2
        RJMP    ??main_132
        SBIS    0x10, 0x07
        RJMP    ??main_132
        LDI     R26, LOW(VS_BUFFER32)
        LDI     R27, (VS_BUFFER32) >> 8
        LDI     R30, LOW(MP3fifo_pWR)
        LDI     R31, (MP3fifo_pWR) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        LDI     R30, LOW(MP3fifo_pRD)
        LDI     R31, (MP3fifo_pRD) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        CP      R16, R20
        CPC     R17, R21
        CPC     R18, R22
        CPC     R19, R23
        BRCC    ??main_133
        LDI     R16, 68
        LDI     R17, 201
        LDI     R18, 1
        LDI     R19, 0
        SUB     R16, R20
        SBC     R17, R21
        SBC     R18, R22
        SBC     R19, R23
        LDI     R30, LOW(MP3fifo_pWR)
        LDI     R31, (MP3fifo_pWR) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        ADD     R16, R20
        ADC     R17, R21
        ADC     R18, R22
        ADC     R19, R23
        RJMP    ??main_134
??main_133:
        MOVW    R17:R16, R21:R20
        MOVW    R19:R18, R23:R22
        LDI     R30, LOW(MP3fifo_pWR)
        LDI     R31, (MP3fifo_pWR) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        CP      R16, R20
        CPC     R17, R21
        CPC     R18, R22
        CPC     R19, R23
        BRCC    ??main_135
        MOVW    R17:R16, R21:R20
        MOVW    R19:R18, R23:R22
        LDI     R30, LOW(MP3fifo_pRD)
        LDI     R31, (MP3fifo_pRD) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        SUB     R16, R20
        SBC     R17, R21
        SBC     R18, R22
        SBC     R19, R23
??main_134:
        CPI     R16, 32
        SBCI    R17, 0
        SBCI    R18, 0
        SBCI    R19, 0
        BRCC    ??main_136
??main_135:
        LDI     R16, 1
        STS     PLAYER_STATE, R16
        LDI     R30, LOW(`?<Constant "Buffering">`)
        LDI     R31, (`?<Constant "Buffering">`) >> 8
        CALL    LCD_fprintline
        RJMP    ??main_132
??main_136:
        LDI     R30, LOW(MP3fifo_pRD)
        LDI     R31, (MP3fifo_pRD) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        MOVW    R17:R16, R21:R20
        MOVW    R19:R18, R23:R22
        SUBI    R16, 224
        SBCI    R17, 255
        SBCI    R18, 255
        SBCI    R19, 255
        CPI     R16, 68
        SBCI    R17, 201
        LDI     R30, 1
        CPC     R18, R30
        LDI     R30, 0
        CPC     R19, R30
        BRCS    $+2+2
        RJMP    ??main_137
        CBI     0x12, 0x04
        LDI     R16, 3
        OUT     0x0F, R16
??main_138:
        SBIS    0x0E, 0x07
        RJMP    ??main_138
        OUT     0x0F, R22
??main_139:
        SBIS    0x0E, 0x07
        RJMP    ??main_139
        OUT     0x0F, R21
??main_140:
        SBIS    0x0E, 0x07
        RJMP    ??main_140
        OUT     0x0F, R20
??main_141:
        SBIS    0x0E, 0x07
        RJMP    ??main_141
        LDI     R16, 255
        OUT     0x0F, R16
??main_142:
        SBIS    0x0E, 0x07
        RJMP    ??main_142
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     VS_BUFFER32, R17
??main_143:
        SBIS    0x0E, 0x07
        RJMP    ??main_143
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 1), R17
??main_144:
        SBIS    0x0E, 0x07
        RJMP    ??main_144
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 2), R17
??main_145:
        SBIS    0x0E, 0x07
        RJMP    ??main_145
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 3), R17
??main_146:
        SBIS    0x0E, 0x07
        RJMP    ??main_146
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 4), R17
??main_147:
        SBIS    0x0E, 0x07
        RJMP    ??main_147
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 5), R17
??main_148:
        SBIS    0x0E, 0x07
        RJMP    ??main_148
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 6), R17
??main_149:
        SBIS    0x0E, 0x07
        RJMP    ??main_149
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 7), R17
??main_150:
        SBIS    0x0E, 0x07
        RJMP    ??main_150
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 8), R17
??main_151:
        SBIS    0x0E, 0x07
        RJMP    ??main_151
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 9), R17
??main_152:
        SBIS    0x0E, 0x07
        RJMP    ??main_152
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 10), R17
??main_153:
        SBIS    0x0E, 0x07
        RJMP    ??main_153
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 11), R17
??main_154:
        SBIS    0x0E, 0x07
        RJMP    ??main_154
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 12), R17
??main_155:
        SBIS    0x0E, 0x07
        RJMP    ??main_155
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 13), R17
??main_156:
        SBIS    0x0E, 0x07
        RJMP    ??main_156
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 14), R17
??main_157:
        SBIS    0x0E, 0x07
        RJMP    ??main_157
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 15), R17
??main_158:
        SBIS    0x0E, 0x07
        RJMP    ??main_158
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 16), R17
??main_159:
        SBIS    0x0E, 0x07
        RJMP    ??main_159
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 17), R17
??main_160:
        SBIS    0x0E, 0x07
        RJMP    ??main_160
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 18), R17
??main_161:
        SBIS    0x0E, 0x07
        RJMP    ??main_161
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 19), R17
??main_162:
        SBIS    0x0E, 0x07
        RJMP    ??main_162
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 20), R17
??main_163:
        SBIS    0x0E, 0x07
        RJMP    ??main_163
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 21), R17
??main_164:
        SBIS    0x0E, 0x07
        RJMP    ??main_164
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 22), R17
??main_165:
        SBIS    0x0E, 0x07
        RJMP    ??main_165
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 23), R17
??main_166:
        SBIS    0x0E, 0x07
        RJMP    ??main_166
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 24), R17
??main_167:
        SBIS    0x0E, 0x07
        RJMP    ??main_167
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 25), R17
??main_168:
        SBIS    0x0E, 0x07
        RJMP    ??main_168
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 26), R17
??main_169:
        SBIS    0x0E, 0x07
        RJMP    ??main_169
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 27), R17
??main_170:
        SBIS    0x0E, 0x07
        RJMP    ??main_170
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 28), R17
??main_171:
        SBIS    0x0E, 0x07
        RJMP    ??main_171
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 29), R17
??main_172:
        SBIS    0x0E, 0x07
        RJMP    ??main_172
        IN      R17, 0x0F
        OUT     0x0F, R16
        STS     (VS_BUFFER32 + 30), R17
??main_173:
        SBIS    0x0E, 0x07
        RJMP    ??main_173
        IN      R17, 0x0F
        STS     (VS_BUFFER32 + 31), R17
        SBI     0x12, 0x04
        SUBI    R20, 224
        SBCI    R21, 255
        LDI     R30, LOW(MP3fifo_pRD)
        ST      Z, R20
        STD     Z+1, R21
        STD     Z+2, R18
        STD     Z+3, R19
        RJMP    ??main_174
??main_137:
        LDI     R30, 68
        SUB     R30, R20
        LDI     R16, 32
        MOV     R0, R16
        SUB     R0, R30
        TST     R30
        BREQ    ??main_175
        CBI     0x12, 0x04
        LDI     R16, 3
        OUT     0x0F, R16
??main_176:
        SBIS    0x0E, 0x07
        RJMP    ??main_176
        OUT     0x0F, R22
??main_177:
        SBIS    0x0E, 0x07
        RJMP    ??main_177
        OUT     0x0F, R21
??main_178:
        SBIS    0x0E, 0x07
        RJMP    ??main_178
        OUT     0x0F, R20
??main_179:
        SBIS    0x0E, 0x07
        RJMP    ??main_179
        MOV     R16, R30
??main_180:
        LDI     R17, 255
        OUT     0x0F, R17
??main_181:
        SBIS    0x0E, 0x07
        RJMP    ??main_181
        IN      R17, 0x0F
        ST      X+, R17
        DEC     R16
        BRNE    ??main_180
        SBI     0x12, 0x04
        LDI     R20, 0
        LDI     R21, 0
        LDI     R22, 0
        LDI     R23, 0
        LDI     R30, LOW(MP3fifo_pRD)
        ST      Z, R20
        STD     Z+1, R20
        STD     Z+2, R20
        STD     Z+3, R20
??main_175:
        TST     R0
        BREQ    ??main_174
        CBI     0x12, 0x04
        LDI     R16, 3
        OUT     0x0F, R16
??main_182:
        SBIS    0x0E, 0x07
        RJMP    ??main_182
        OUT     0x0F, R22
??main_183:
        SBIS    0x0E, 0x07
        RJMP    ??main_183
        OUT     0x0F, R21
??main_184:
        SBIS    0x0E, 0x07
        RJMP    ??main_184
        OUT     0x0F, R20
        CLR     R1
        ADD     R20, R0
        ADC     R21, R1
        ADC     R22, R1
        ADC     R23, R1
        LDI     R30, LOW(MP3fifo_pRD)
        ST      Z, R20
        STD     Z+1, R21
        STD     Z+2, R22
        STD     Z+3, R23
??main_185:
        SBIS    0x0E, 0x07
        RJMP    ??main_185
        MOV     R16, R0
??main_186:
        LDI     R17, 255
        OUT     0x0F, R17
??main_187:
        SBIS    0x0E, 0x07
        RJMP    ??main_187
        IN      R17, 0x0F
        ST      X+, R17
        DEC     R16
        BRNE    ??main_186
        SBI     0x12, 0x04
??main_174:
        CBI     0x18, 0x03
        LDS     R16, VS_BUFFER32
        OUT     0x0F, R16
??main_188:
        SBIS    0x0E, 0x07
        RJMP    ??main_188
        LDS     R16, (VS_BUFFER32 + 1)
        OUT     0x0F, R16
??main_189:
        SBIS    0x0E, 0x07
        RJMP    ??main_189
        LDS     R16, (VS_BUFFER32 + 2)
        OUT     0x0F, R16
??main_190:
        SBIS    0x0E, 0x07
        RJMP    ??main_190
        LDS     R16, (VS_BUFFER32 + 3)
        OUT     0x0F, R16
??main_191:
        SBIS    0x0E, 0x07
        RJMP    ??main_191
        LDS     R16, (VS_BUFFER32 + 4)
        OUT     0x0F, R16
??main_192:
        SBIS    0x0E, 0x07
        RJMP    ??main_192
        LDS     R16, (VS_BUFFER32 + 5)
        OUT     0x0F, R16
??main_193:
        SBIS    0x0E, 0x07
        RJMP    ??main_193
        LDS     R16, (VS_BUFFER32 + 6)
        OUT     0x0F, R16
??main_194:
        SBIS    0x0E, 0x07
        RJMP    ??main_194
        LDS     R16, (VS_BUFFER32 + 7)
        OUT     0x0F, R16
??main_195:
        SBIS    0x0E, 0x07
        RJMP    ??main_195
        LDS     R16, (VS_BUFFER32 + 8)
        OUT     0x0F, R16
??main_196:
        SBIS    0x0E, 0x07
        RJMP    ??main_196
        LDS     R16, (VS_BUFFER32 + 9)
        OUT     0x0F, R16
??main_197:
        SBIS    0x0E, 0x07
        RJMP    ??main_197
        LDS     R16, (VS_BUFFER32 + 10)
        OUT     0x0F, R16
??main_198:
        SBIS    0x0E, 0x07
        RJMP    ??main_198
        LDS     R16, (VS_BUFFER32 + 11)
        OUT     0x0F, R16
??main_199:
        SBIS    0x0E, 0x07
        RJMP    ??main_199
        LDS     R16, (VS_BUFFER32 + 12)
        OUT     0x0F, R16
??main_200:
        SBIS    0x0E, 0x07
        RJMP    ??main_200
        LDS     R16, (VS_BUFFER32 + 13)
        OUT     0x0F, R16
??main_201:
        SBIS    0x0E, 0x07
        RJMP    ??main_201
        LDS     R16, (VS_BUFFER32 + 14)
        OUT     0x0F, R16
??main_202:
        SBIS    0x0E, 0x07
        RJMP    ??main_202
        LDS     R16, (VS_BUFFER32 + 15)
        OUT     0x0F, R16
??main_203:
        SBIS    0x0E, 0x07
        RJMP    ??main_203
        LDS     R16, (VS_BUFFER32 + 16)
        OUT     0x0F, R16
??main_204:
        SBIS    0x0E, 0x07
        RJMP    ??main_204
        LDS     R16, (VS_BUFFER32 + 17)
        OUT     0x0F, R16
??main_205:
        SBIS    0x0E, 0x07
        RJMP    ??main_205
        LDS     R16, (VS_BUFFER32 + 18)
        OUT     0x0F, R16
??main_206:
        SBIS    0x0E, 0x07
        RJMP    ??main_206
        LDS     R16, (VS_BUFFER32 + 19)
        OUT     0x0F, R16
??main_207:
        SBIS    0x0E, 0x07
        RJMP    ??main_207
        LDS     R16, (VS_BUFFER32 + 20)
        OUT     0x0F, R16
??main_208:
        SBIS    0x0E, 0x07
        RJMP    ??main_208
        LDS     R16, (VS_BUFFER32 + 21)
        OUT     0x0F, R16
??main_209:
        SBIS    0x0E, 0x07
        RJMP    ??main_209
        LDS     R16, (VS_BUFFER32 + 22)
        OUT     0x0F, R16
??main_210:
        SBIS    0x0E, 0x07
        RJMP    ??main_210
        LDS     R16, (VS_BUFFER32 + 23)
        OUT     0x0F, R16
??main_211:
        SBIS    0x0E, 0x07
        RJMP    ??main_211
        LDS     R16, (VS_BUFFER32 + 24)
        OUT     0x0F, R16
??main_212:
        SBIS    0x0E, 0x07
        RJMP    ??main_212
        LDS     R16, (VS_BUFFER32 + 25)
        OUT     0x0F, R16
??main_213:
        SBIS    0x0E, 0x07
        RJMP    ??main_213
        LDS     R16, (VS_BUFFER32 + 26)
        OUT     0x0F, R16
??main_214:
        SBIS    0x0E, 0x07
        RJMP    ??main_214
        LDS     R16, (VS_BUFFER32 + 27)
        OUT     0x0F, R16
??main_215:
        SBIS    0x0E, 0x07
        RJMP    ??main_215
        LDS     R16, (VS_BUFFER32 + 28)
        OUT     0x0F, R16
??main_216:
        SBIS    0x0E, 0x07
        RJMP    ??main_216
        LDS     R16, (VS_BUFFER32 + 29)
        OUT     0x0F, R16
??main_217:
        SBIS    0x0E, 0x07
        RJMP    ??main_217
        LDS     R16, (VS_BUFFER32 + 30)
        OUT     0x0F, R16
??main_218:
        SBIS    0x0E, 0x07
        RJMP    ??main_218
        LDS     R16, (VS_BUFFER32 + 31)
        OUT     0x0F, R16
??main_219:
        SBIS    0x0E, 0x07
        RJMP    ??main_219
        SBI     0x18, 0x03
??main_132:
        LDS     R16, GET_WINDOW_STATE
        CPI     R16, 1
        BRNE    ??main_220
        LDS     R16, PLAYER_STATE
        DEC     R16
        BREQ    ??main_221
        DEC     R16
        BREQ    ??main_222
        RJMP    ??main_220
??main_221:
        LDI     R16, 2
        STS     PLAYER_STATE, R16
        LDI     R30, LOW((`?<Constant "Buffering">` + 10))
        LDI     R31, HIGH((`?<Constant "Buffering">` + 10))
        LDI     R16, 1
        CALL    LCD_fprintline
??main_222:
        LDI     R16, 1
        STS     (get_sock + 42), R16
??main_220:
        DEC     R24
        BREQ    $+2+2
        RJMP    ??main_131
        LDI     R30, LOW(MP3fifo_pWR)
        LDI     R31, (MP3fifo_pWR) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        LDD     R18, Z+2
        LDD     R19, Z+3
        LDI     R30, LOW(MP3fifo_pRD)
        LDI     R31, (MP3fifo_pRD) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        CP      R16, R20
        CPC     R17, R21
        CPC     R18, R22
        CPC     R19, R23
        BRCC    ??main_223
        LDI     R16, 68
        LDI     R17, 201
        LDI     R18, 1
        SUB     R16, R20
        SBC     R17, R21
        SBC     R18, R22
        LDI     R30, LOW(MP3fifo_pWR)
        LDI     R31, (MP3fifo_pWR) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        ADD     R16, R20
        ADC     R17, R21
        ADC     R18, R22
        RJMP    ??main_224
??main_223:
        MOVW    R17:R16, R21:R20
        MOVW    R19:R18, R23:R22
        LDI     R30, LOW(MP3fifo_pWR)
        LDI     R31, (MP3fifo_pWR) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        LDD     R23, Z+3
        CP      R16, R20
        CPC     R17, R21
        CPC     R18, R22
        CPC     R19, R23
        BRCC    ??main_225
        MOVW    R17:R16, R21:R20
        MOV     R18, R22
        LDI     R30, LOW(MP3fifo_pRD)
        LDI     R31, (MP3fifo_pRD) >> 8
        LD      R20, Z
        LDD     R21, Z+1
        LDD     R22, Z+2
        SUB     R16, R20
        SBC     R17, R21
        SBC     R18, R22
        RJMP    ??main_224
??main_225:
        LDI     R17, 0
        LDI     R18, 0
??main_224:
        OUT     0x2B, R18
        OUT     0x2A, R17
        LDS     R16, Keyboard_task
        TST     R16
        BRNE    $+2+2
        RJMP    ??main_1
        LDS     R16, Keyboard_task
        DEC     R16
        BREQ    ??main_226
        DEC     R16
        BREQ    ??main_227
        DEC     R16
        BRNE    $+2+2
        RJMP    ??main_2
        RJMP    ??main_4
??main_226:
        LDI     R30, LOW((`?<Constant "Buffering">` + 18))
        LDI     R31, HIGH((`?<Constant "Buffering">` + 18))
        LDI     R16, 1
        CALL    LCD_fprintline
        CALL    StartGET
        RJMP    ??main_4
??main_227:
        LDI     R16, 3
        STS     PLAYER_STATE, R16
        LDI     R30, LOW((`?<Constant "Buffering">` + 29))
        LDI     R31, HIGH((`?<Constant "Buffering">` + 29))
        LDI     R16, 1
        CALL    LCD_fprintline
        RJMP    ??main_4
        REQUIRE _A_TWAR
        REQUIRE _A_DDRD
        REQUIRE _A_PORTD
        REQUIRE _A_TCCR2
        REQUIRE _A_OCR1A
        REQUIRE _A_TCCR1B
        REQUIRE _A_TCCR1A
        REQUIRE _A_TIMSK
        REQUIRE _A_PIND
        REQUIRE _A_SPSR
        REQUIRE _A_SPDR
        REQUIRE _A_PORTB
// 1774   }
// 1775 }
// 1776 };

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DC16    0
        REQUIRE ?need_segment_init

        RSEG SWITCH:CODE:NOROOT(1)
`?<Jumptable for HTTP_hook_DATA_RX>_0`:
        DW      (??HTTP_hook_DATA_RX_6) /2
        DW      (??HTTP_hook_DATA_RX_16) /2
        DW      (??HTTP_hook_DATA_RX_17) /2
        DW      (??HTTP_hook_DATA_RX_22) /2
        DW      (??HTTP_hook_DATA_RX_20) /2
        DW      (??HTTP_hook_DATA_RX_19) /2
        DW      (??HTTP_hook_DATA_RX_19) /2
        DW      (??HTTP_hook_DATA_RX_41) /2
        DW      (??HTTP_hook_DATA_RX_8) /2
        DW      (??HTTP_hook_DATA_RX_34) /2
        DW      (??HTTP_hook_DATA_RX_41) /2
        DW      (??HTTP_hook_DATA_RX_43) /2
        DW      (??HTTP_hook_DATA_RX_41) /2
        DW      (??HTTP_hook_DATA_RX_48) /2
        DW      (??HTTP_hook_DATA_RX_51) /2
        DW      (??HTTP_hook_DATA_RX_52) /2
        DW      (??HTTP_hook_DATA_RX_5) /2
        DW      (??HTTP_hook_DATA_RX_5) /2
        DW      (??HTTP_hook_DATA_RX_41) /2
        DW      (??HTTP_hook_DATA_RX_64) /2

        END
// 
//    13 bytes in segment ABSOLUTE
// 6 440 bytes in segment CODE
//     1 byte  in segment EEPROM_AN
//    54 bytes in segment EEPROM_I
//     6 bytes in segment INITTAB
//   201 bytes in segment NEAR_F
//    34 bytes in segment NEAR_N
//   315 bytes in segment NEAR_Z
//    40 bytes in segment SWITCH
// 
// 6 681 bytes of CODE  memory (+  6 bytes shared)
//   349 bytes of DATA  memory (+ 13 bytes shared)
//    54 bytes of XDATA memory (+  1 byte  shared)
//
//Errors: none
//Warnings: none
