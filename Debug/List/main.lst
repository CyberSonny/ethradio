###############################################################################
#                                                                             #
#                                                       22/Mar/2010  20:31:38 #
# IAR C/C++ Compiler V5.30.0.20166/W32, Evaluation Version  for Atmel AVR     #
# Copyright 1996-2009 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  G:\AVR\EthRadio_buf_inline\main.c                        #
#    Command line =  --string_literals_in_flash G:\AVR\EthRadio_buf_inline\ma #
#                    in.c --cpu=m32 -ms -o G:\AVR\EthRadio_buf_inline\Debug\O #
#                    bj\ -lC G:\AVR\EthRadio_buf_inline\Debug\List\ -lB       #
#                    G:\AVR\EthRadio_buf_inline\Debug\List\                   #
#                    --initializers_in_flash -s9 --no_code_motion --debug     #
#                    -DENABLE_BIT_DEFINITIONS -e -I "C:\Program Files\IAR     #
#                    Systems\Embedded Workbench Evaluation 5.3\avr\INC\" -I   #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    Evaluation 5.3\avr\INC\CLIB\" --eeprom_size 1024         #
#                    --lock_regs=1                                            #
#    List file    =  G:\AVR\EthRadio_buf_inline\Debug\List\main.lst           #
#    Object file  =  G:\AVR\EthRadio_buf_inline\Debug\Obj\main.r90            #
#                                                                             #
#                                                                             #
###############################################################################

G:\AVR\EthRadio_buf_inline\main.c
      1          /* Name: main.c
      2           * Project: uNikeE - Software Ethernet MAC and upper layers stack
      3           * Author: Dmitry Oparin aka Rst7/CBSIE
      4           * Creation Date: 25-Jan-2009
      5           * Copyright: (C)2008,2009 by Rst7/CBSIE
      6           * License: GNU GPL v3 (see http://www.gnu.org/licenses/gpl-3.0.txt)
      7           */
      8          
      9          #include "nic.h"

   \                                 In  segment ABSOLUTE, at 0x22
   \   <__C6> volatile __io _A_TWAR
   \                     _A_TWAR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   <__C30> volatile __io _A_SPSR
   \                     _A_SPSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2f
   \   <__C32> volatile __io _A_SPDR
   \                     _A_SPDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30
   \   <__C34> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31
   \   <__C36> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   <__C38> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   <__C50> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x45
   \   <__C77> volatile __io _A_TCCR2
   \                     _A_TCCR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4a
   \   <__C89> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x4e
   \   <__C95> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4f
   \   <__C97> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   <__C118> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1
     10          #include "network.h"
     11          #include "nike_e.h"
     12          #include "tcp.h"
     13          #include "pages.h"
     14          #include "pgmspace.h"
     15          
     16          #include "http_srv.h"
     17          #include "io.h"
     18          
     19          #include "vs.h"
     20          #include "lcd.h"
     21          #include "FIFO.h"
     22          #include "http_get.h"
     23          #include "station.h"
     24          #include "kb.h"
     25          #include "player.h"
     26          
     27          //#include "revision.c"
     28          
     29          //#define TIFR_OCF1B  TIFR&(1<<OCF1B)
     30          
     31          
     32          //char i2a_buf[5];

   \                                 In  segment NEAR_N, align 1, keep-with-next
     33          __no_init UINT16  MP3indic;
   \                     MP3indic:
   \   00000000                      DS8 2

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     34          UREG http_q_c_pos;
   \                     http_q_c_pos:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     35          TCP_QUE_CLIENT http_q_c[4];
   \                     http_q_c:
   \   00000000                      DS8 72
     36          

   \                                 In  segment EEPROM_AN, at 0x0, root
     37          __root __eeprom char DUMMY_EEPROM@ 0 =0x55 ;
   \                     DUMMY_EEPROM:
   \   00000000   55                 DC8 85
     38          //volatile char EEPROM_FAULT; //Глобальная ошибка EEPROM

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     39          volatile char EEPROM_RESTORED; //Восстановлено 2 из 3
   \                     EEPROM_RESTORED:
   \   00000000                      DS8 1
     40          
     41          extern UINT8 MAC0[];
     42          extern UINT8 MAC_GATE0[];
     43          extern UINT32 IP;
     44          extern UINT32 MASK_IP;
     45          

   \                                 In  segment EEPROM_I, align 1, keep-with-next
     46          __eeprom UINT32 OUTG_IP[2]={IP2UINT32(192,168,113,2),IP2UINT32(192,168,113,1)};
     47          __eeprom UINT32 MASK_IP_EEPROM={IP2UINT32(255,255,255,0)};
   \                     MASK_IP_EEPROM:
   \   00000000   FFFF00FF           DD 16777215
     48          __eeprom char MAC_EEPROM[ETH_HWA_LEN]={0x00,0x13,0x12,0x19,0x80,0x28};
     49          __eeprom UINT32 IP_EEPROM=IP2UINT32(192,168,113,3);
   \                     IP_EEPROM:
   \   00000004   A8C00371           DD 57780416
   \                     OUTG_IP:
   \   00000008   A8C00271A8C0       DD 41003200, 24225984
   \              0171        
   \                     MAC_EEPROM:
   \   00000010   130019122880       DC8 0, 19, 18, 25, 128, 40
     50          __eeprom char HTTP_LOGIN[16]="root";
   \                     HTTP_LOGIN:
   \   00000016   6F72746F00         DC8 "root"
   \   0000001B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0000000000  
     51          __eeprom char HTTP_PASS[16]="root";
   \                     HTTP_PASS:
   \   00000026   6F72746F00         DC8 "root"
   \   0000002B   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0000000000  
     52          
     53          #pragma inline = forced
     54          UINT32 _MP3fifo_len(void)
     55          {
     56          	UINT32 len;
     57          
     58          	if(MP3fifo_pRD > MP3fifo_pWR)
     59          	{
     60          		len = MP3fifo_pEND-MP3fifo_pRD+1+MP3fifo_pWR-MP3fifo_pSTART;
     61          	}
     62          	else if(MP3fifo_pRD < MP3fifo_pWR)
     63          	{
     64          		len = MP3fifo_pWR-MP3fifo_pRD;
     65          	}
     66          	else
     67          	{
     68          		len = 0;
     69          	}
     70          
     71          	return len;
     72          }
     73          

   \                                 In  segment NEAR_N, align 1, keep-with-next
     74          __no_init UINT8 VS_BUFFER32 [32];
   \                     VS_BUFFER32:
   \   00000000                      DS8 32
     75          
     76          #pragma inline = forced
     77          UINT8 _MP3fifo_read32()
     78          {
     79          	UINT32 pRD;
     80          	UINT8 c;
     81                  UREG d;
     82                  UINT8* data=&VS_BUFFER32[0];
     83          //        MP3len=_MP3fifo_len();
     84                  if (_MP3fifo_len()<32) return 0; // если в буфере <32 байт, то выходим с 0
     85          //        MP3indic=(UINT16) (MP3len>>8);        
     86          	pRD = MP3fifo_pRD;
     87                  
     88                  if ((pRD+32) <= MP3fifo_pEND)   // перехода на начало не будет                                     
     89                  {                               //можно считывать все 32 байта подряд
     90                 	  FM_CS_ENABLE();                              
     91          	  SPDR=FM_READ;
     92                    UREG addr;
     93                    addr=(pRD>>16);
     94                    while (!(SPSR & (1<<SPIF)));
     95          	  SPDR=addr;
     96                    addr=(pRD>>8);
     97                    while (!(SPSR & (1<<SPIF)));
     98          	  SPDR=addr;
     99                    addr=(pRD);        
    100                    while (!(SPSR & (1<<SPIF)));
    101                	  SPDR=addr;
    102                 	  d = 0xff;
    103                    while (!(SPSR & (1<<SPIF)));          
    104          	  SPDR = d;
    105                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 1
    106                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 2
    107                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 3
    108                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 4
    109                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 5
    110                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 6
    111                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 7
    112                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 8
    113                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 9
    114                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //10
    115                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //11
    116                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //12
    117                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //13
    118                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //14
    119                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //15
    120                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //16
    121                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 1
    122                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 2
    123                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 3
    124                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 4
    125                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 5
    126                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 6
    127                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 7
    128                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 8
    129                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; // 9
    130                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //10
    131                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //11
    132                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //12
    133                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //13
    134                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //14
    135                    while (!(SPSR & (1<<SPIF))); c = SPDR; SPDR = d; *data++ = c; //15
    136                    while (!(SPSR & (1<<SPIF))); c = SPDR; *data = c; //16
    137          	  FM_CS_DISABLE();     
    138                    pRD += 32; // сместим указатель чтения на первый непрочитанный элемент (переноса не будет)
    139          	  MP3fifo_pRD = pRD;                    
    140                  }
    141                  else // при чтении надо будет перенести указатель на старт - будем читать 2мя порциями
    142                  {
    143                    UINT8 i, len1, len2;          
    144                    len1=MP3fifo_pEND-pRD+1; // первая порция - читаем до потолка
    145                    len2 = 32-len1;// вторая порция - адрес на старт и продолжаем
    146                    if (len1)
    147                    {
    148                      UREG addr;
    149                      FM_CS_ENABLE();
    150                      SPDR=FM_READ;
    151                      addr = (UREG) (pRD>>16);
    152                      while (!(SPSR & (1<<SPIF)));
    153          	    SPDR= addr;
    154                      addr= (UREG)(pRD>>8); 
    155                      while (!(SPSR & (1<<SPIF)));
    156          	    SPDR=addr;
    157                      addr= (UREG)(pRD);
    158                      while (!(SPSR & (1<<SPIF)));
    159                	    SPDR= addr;       
    160                      d = 0xFF;
    161                      while (!(SPSR & (1<<SPIF)));
    162                      for (i=0; i<len1; i++)
    163                      {
    164                        SPDR = d;
    165                        while (!(SPSR & (1<<SPIF)));
    166                        *data++= SPDR;
    167                      }
    168                      FM_CS_DISABLE();
    169                      pRD=MP3fifo_pSTART; // ставим начальный адрес (двигаем хвост)
    170                      MP3fifo_pRD = pRD; // указатель чтения мп3 данных  
    171                    } 
    172                    // и если есть что читать - дочитываем
    173                    if (len2)
    174                    {
    175                      UREG addr;
    176                      FM_CS_ENABLE();
    177          	    SPDR=FM_READ;
    178                      addr=(UREG)(pRD>>16);
    179                      while (!(SPSR & (1<<SPIF)));
    180          	    SPDR=addr;
    181                      addr=(UREG)(pRD>>8);  
    182                      while (!(SPSR & (1<<SPIF)));
    183          	    SPDR=addr;
    184                      addr=(UREG)(pRD);        
    185                      while (!(SPSR & (1<<SPIF)));
    186                	    SPDR=addr;
    187                      pRD+=len2;// сдвигаем хвост на кол-во прочитанных байт и прибавляем 1 для указания на след. непрочитанный          
    188          	    MP3fifo_pRD = pRD; // указатель чтения мп3 данных          
    189                	    d = 0xff;            
    190                      while (!(SPSR & (1<<SPIF)));            
    191                      for (i=0; i<len2; i++)
    192                      {
    193                        SPDR = d;
    194                        while (!(SPSR & (1<<SPIF)));
    195                        *data++ = SPDR;
    196                      }            
    197                      FM_CS_DISABLE();
    198                    }
    199                  }
    200                      data=&VS_BUFFER32[0];
    201          //            cbr (SPSR, SPI2X); // set low freq. 1/4 SCLK (4MHz)
    202                      VS_DS_clr();
    203                      SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//0
    204                      SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//2
    205                      SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//4
    206                      SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//6
    207                      SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//8
    208                      SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//10
    209                      SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//12
    210                      SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//14
    211                      SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//16
    212                      SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//18
    213                      SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//20
    214                      SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//22
    215                      SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//24
    216                      SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//26
    217                      SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data++;while (!(SPSR & (1<<SPIF)));//28
    218                      SPDR=*data++;while (!(SPSR & (1<<SPIF)));SPDR=*data;while (!(SPSR & (1<<SPIF)));//30-31
    219                      VS_DS_set();
    220          //            sbr (SPSR, SPI2X); // set high freq. 1/2 SCLK (8MHz)
    221          	return 1;
    222          }
    223          
    224          extern char const __flash _EthWRlen[];
    225          extern char const __flash _EthTS[]; 
    226          extern char const __flash _EthCNT[];
    227          extern char const __flash _EthpWRH[];
    228          extern char const __flash _EthpWRL[];
    229          
    230          extern char const __flash _EthRDlen[];
    231          extern char const __flash _EthpRDH[];
    232          extern char const __flash _EthpRDL[];
    233          
    234          #pragma inline = forced
    235          UINT32 _ETHfifo_len(void)
    236          {
    237          	UINT32 len;
    238          
    239          	if(ETHfifo_pRD > ETHfifo_pWR)
    240          	{
    241          		len = ETHfifo_pEND-ETHfifo_pRD+1+ETHfifo_pWR-ETHfifo_pSTART;
    242          	}
    243          	else if(ETHfifo_pRD < ETHfifo_pWR)
    244          	{
    245          		len = ETHfifo_pWR-ETHfifo_pRD;
    246          	}
    247          	else
    248          	{
    249          		len = 0;
    250          	}
    251          
    252          	return len;
    253          }
    254          
    255          // Читаем пакет, длину, таймаут
    256          #pragma inline = forced
    257          UINT16 ETHfifo_PKT_read(UINT8* data, UINT8* TS)
    258          {
    259          	UINT32 pRD; //локальный указатель на запись
    260                  UINT16 len1, len;        
    261          	UREG c;
    262          	UINT8 header_cnt=0;
    263                 	pRD = ETHfifo_pRD;
    264                  
    265          //       len+=3; //  к длине Ethernet пакета добавим 2 байта его длины и 1 байт метки времени
    266          //        #ifdef CONSOLE_DEBUG
    267          //           _print_num (_EthRDlen,len); _print_num (_EthTS,(UINT16)TS);
    268          //           _print_num (_EthpRDH,(UINT16)(pRD>>16)); _print_num (_EthpRDL,(UINT16)pRD);
    269          //        #endif
    270          //        len1=len;
    271                  
    272            	FM_CS_ENABLE();
    273                  SPDR=FM_READ;
    274                  while (!(SPSR & (1<<SPIF)));
    275                  SPDR=(pRD>>16);
    276                  while (!(SPSR & (1<<SPIF)));
    277                  SPDR=(pRD>>8);
    278                  while (!(SPSR & (1<<SPIF)));
    279                  SPDR=(pRD);
    280                  while (!(SPSR & (1<<SPIF)));
    281                  // Открыли сессию чтения из FIFO                         
    282                  len1=1;
    283                  do
    284                  {
    285                    UREG f=0;
    286                    SPDR = 0xFF;
    287                    if (++pRD>ETHfifo_pEND) f=1; // при чтении след. ячейки упремся в потолок... начнем с начала
    288                    while (!(SPSR & (1<<SPIF))); // wait SPI comm. finished                 
    289                    c=SPDR; // прочитали байт из FRAM          
    290                    switch (header_cnt)
    291                    {
    292                      case 0:
    293                        len=(UINT16)(c<<8); // прочитали старший байт длины пакета
    294                        len1++;
    295                        header_cnt++;
    296                        break;
    297                      case 1:
    298                        len|=(UINT16)c; //len1 - считали младший байт длины пакета
    299                        len1++;
    300                        header_cnt++;
    301                        break;
    302                      case 2:  
    303                        *TS=(UINT8)c; // считали метку времени и запомнили ее
    304                        header_cnt++; // 
    305                        // Ограничим длину пакета на всякий случай, чтоб при отладке не запороть ОЗУ)
    306                        if (len> ETH_MAX_PACKET_SIZE) len = ETH_MAX_PACKET_SIZE;
    307                        if (_ETHfifo_len() < (UINT32) len) return 0; // в буфер записано меньше, чем пытаемся считать
    308                        len1=len+1; // обновим длину цикла с учетом длины пакета+1
    309                        #ifdef CONSOLE_DEBUG
    310                        _print_num (_EthRDlen,len); _print_num (_EthTS,(UINT16)(*TS));
    311                        _print_num (_EthpRDH,(UINT16)((pRD-1)>>16)); _print_num (_EthpRDL,(UINT16)(pRD-1));
    312                        #endif
    313                        break;
    314                      default:
    315                        *data++=c; // считали очередной байт пакета
    316                        break;
    317                    }             	
    318                    if (f) // при чтении след. ячейки упремся в потолок... начнем с начала
    319                    {
    320                 	    FM_CS_DISABLE(); // закроем старую сессию    
    321                      pRD=ETHfifo_pSTART;
    322            	    FM_CS_ENABLE();            
    323                      SPDR=FM_READ;
    324                      while (!(SPSR & (1<<SPIF)));
    325                      SPDR=(pRD>>16);
    326                      while (!(SPSR & (1<<SPIF)));
    327                      SPDR=(pRD>>8);
    328                      while (!(SPSR & (1<<SPIF)));
    329                      SPDR=(pRD);
    330                      while (!(SPSR & (1<<SPIF)));
    331                  // Открыли сессию чтения из FIFO                                   
    332                    }
    333                  }
    334                  while (len1--);        
    335                  FM_CS_DISABLE();
    336                  ETHfifo_pRD=pRD; // запомнили текущее значение указателя чтения
    337                  ETHfifo_CNT--;// уменьшаем счетчик пакетов в FIFO
    338                  #ifdef CONSOLE_DEBUG
    339                      _print_num (_EthCNT,(UINT16)ETHfifo_CNT);
    340                  #endif       
    341                  return len;    
    342          }
    343          
    344          
    345          
    346          #pragma inline=forced
    347          const char __flash *OnOff_P(UREG flag)
    348          {
    349            return !flag?"On":"Off";
    350          }
    351          

   \                                 In  segment CODE, align 2, keep-with-next
    352          char *stradd_E(char *d, char __eeprom *s)
   \                     stradd_E:
    353          {
   \   00000000   01F8               MOVW    R31:R30, R17:R16
    354            char c;
    355            UREG max=15;
   \   00000002   E01F               LDI     R17, 15
    356            do
    357            {
    358              c=*s++;
   \                     ??stradd_E_0:
   \   00000004   01A9               MOVW    R21:R20, R19:R18
   \   00000006   ........           CALL    __eeget8_16
   \   0000000A   5F2F               SUBI    R18, 255
   \   0000000C   4F3F               SBCI    R19, 255
    359              if (!(--max)) c=0;
   \   0000000E   951A               DEC     R17
   \   00000010   F409               BRNE    ??stradd_E_1
   \   00000012   E000               LDI     R16, 0
    360              *d++=c;
   \                     ??stradd_E_1:
   \   00000014   9301               ST      Z+, R16
    361            }
    362            while(c);
   \   00000016   2300               TST     R16
   \   00000018   F7A9               BRNE    ??stradd_E_0
    363            return d-1;
   \   0000001A   9731               SBIW    R31:R30, 1
   \   0000001C   018F               MOVW    R17:R16, R31:R30
   \   0000001E   9508               RET
    364          }
    365          

   \                                 In  segment CODE, align 2, keep-with-next
    366          __x_z char *stradd_P(char *d, char __flash *s)
   \                     stradd_P:
   \                     ??stradd_P_0:
    367          {
    368            char c;
    369            do
    370            {
    371              c=*s++;
   \   00000000   9105               LPM     R16, Z+
    372              *d++=c;
   \   00000002   930D               ST      X+, R16
    373            }
    374            while(c);
   \   00000004   2300               TST     R16
   \   00000006   F7E1               BRNE    ??stradd_P_0
    375            return d-1;
   \   00000008   9711               SBIW    R27:R26, 1
   \   0000000A   018D               MOVW    R17:R16, R27:R26
   \   0000000C   9508               RET
    376          }
    377          
    378          void MD5cheat(char *out, unsigned char *p, UREG len);
    379          
    380          //Секретный ключ MD5(login+':'+realm+':'+pass)+':'
    381          #define AUTH_A1 (MD5_Buffer+0)
    382          //nonce, который мы передаем клиенту + ':'
    383          #define AUTH_srv_nonce (MD5_Buffer+33)
    384          //MD5(METHOD+':'+URL), он же будет буфером исходных данных для изготовления A1, A2
    385          #define AUTH_A2 (MD5_Buffer+66)
    386          
    387          #define ASCIIZ_CHUNK (255)
    388          #define FLASH_ASCIIZ_CHUNK (254)
    389          #define EEPROM_ASCIIZ_CHUNK (253)
    390          #define NO_CHUNK (0)
    391          
    392          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    393          HTTP_SOCK http_sock;
   \                     http_sock:
   \   00000000                      DS8 238
    394          
    395          #define MD5_Buffer (http_sock._MD5_Buffer)
    396          
    397          extern void *debug_addr;
    398          
    399          //================================================================

   \                                 In  segment CODE, align 2, keep-with-next
    400          void AddHTTPsocket(void)
   \                     AddHTTPsocket:
    401          {
    402            __x UREG HTTP_hook(UREG state, UREG len, UINT8 *data, TCP_SOCK *_s);
    403            http_sock.sock.lport=htons(80);
   \   00000000   ....               LDI     R30, LOW(http_sock)
   \   00000002   ....               LDI     R31, (http_sock) >> 8
   \   00000004   E530               LDI     R19, 80
   \   00000006   E020               LDI     R18, 0
   \   00000008   8727               STD     Z+15, R18
   \   0000000A   8B30               STD     Z+16, R19
    404            http_sock.sock.type=TCP_TYPE_SERVER;
   \   0000000C   E001               LDI     R16, 1
   \   0000000E   8302               STD     Z+2, R16
    405            http_sock.sock.state=TCP_STATE_LISTENING;
   \   00000010   8F03               STD     Z+27, R16
    406            http_sock.sock.hook=HTTP_hook;
   \   00000012   ....               LDI     R16, LOW(HTTP_hook/2)
   \   00000014   ....               LDI     R17, (HTTP_hook/2) >> 8
   \   00000016   8303               STD     Z+3, R16
   \   00000018   8314               STD     Z+4, R17
    407            http_sock.sock.win=htons(0x800);
   \   0000001A   E030               LDI     R19, 0
   \   0000001C   E028               LDI     R18, 8
   \   0000001E   8F25               STD     Z+29, R18
   \   00000020   8F36               STD     Z+30, R19
    408            AddTCPsocket(&http_sock.sock);
   \   00000022   ........           JMP     AddTCPsocket
    409          }
    410          //================================================================
    411          __x_z UREG stricmp_P(const char *s, const char __flash *d);
    412          
    413          static __x_z UREG stricmp_PSOCK(HTTP_SOCK *hs, const char __flash *d)
    414          {
    415            return stricmp_P(hs->http_hdr_item,d);
    416          }
    417          

   \                                 In  segment CODE, align 2, keep-with-next
    418          __x_z UREG stricmp_P(const char *s, const char __flash *d)
   \                     stricmp_P:
   \                     ??stricmp_P_0:
    419          {
    420            UREG cs;
    421            UREG cd;
    422            do
    423            {
    424              cs=*s++;
   \   00000000   910D               LD      R16, X+
    425              cd=*d++;
   \   00000002   9115               LPM     R17, Z+
    426              if (cs>='a'&&cs<='z') cs+='A'-'a';
   \   00000004   3601               CPI     R16, 97
   \   00000006   F018               BRCS    ??stricmp_P_1
   \   00000008   370B               CPI     R16, 123
   \   0000000A   F408               BRCC    ??stricmp_P_1
   \   0000000C   5200               SUBI    R16, 32
    427              if (cd>='a'&&cd<='z') cd+='A'-'a';
   \                     ??stricmp_P_1:
   \   0000000E   3611               CPI     R17, 97
   \   00000010   F018               BRCS    ??stricmp_P_2
   \   00000012   371B               CPI     R17, 123
   \   00000014   F408               BRCC    ??stricmp_P_2
   \   00000016   5210               SUBI    R17, 32
    428              if (!cs) break;
   \                     ??stricmp_P_2:
   \   00000018   2300               TST     R16
   \   0000001A   F021               BREQ    ??stricmp_P_3
    429              if (!cd) break;
   \   0000001C   2311               TST     R17
   \   0000001E   F011               BREQ    ??stricmp_P_3
    430            }
    431            while(cs==cd);
   \   00000020   1701               CP      R16, R17
   \   00000022   F371               BREQ    ??stricmp_P_0
    432            return cs-cd;
   \                     ??stricmp_P_3:
   \   00000024   1B01               SUB     R16, R17
   \   00000026   9508               RET
    433          }
    434          
    435          
    436          __z void _i2a(char *s, UINT16 v);
    437          
    438          #pragma optimize=no_inline

   \                                 In  segment CODE, align 2, keep-with-next
    439          __z void i2a(char *s, UINT16 v)
   \                     i2a:
    440          {
    441            _i2a(s,v);
   \   00000000   ........           JMP     _i2a
    442          }
    443          

   \                                 In  segment NEAR_F, align 1, keep-with-next
    444          static const char __flash * __flash HTTP_LEVELS[]={http_root_level1,http_root_level2,http_root_level3,http_eeprom_refr_button};
   \                     HTTP_LEVELS:
   \   00000000   ............       DC16 http_root_level1, http_root_level2, http_root_level3
   \   00000006   ....               DC16 http_eeprom_refr_button
    445          
    446          enum _LIST_OF_HTTP_REQS
    447          {
    448            _NOT_A_GOOD_HTTP_REQ=0,
    449            _GET_root,
    450            _GET_z,
    451            _GET_s,
    452            _POST_w,
    453            _POST_m,
    454            _POST_b,
    455            _POST_e,
    456            _POST_r,
    457            _POST_z,
    458            _POST_f,
    459            _POST_p,
    460            _POST_s,
    461          };
    462          
    463          /*static const char __flash SELTAGS_1[]=" SELECTED>";
    464          
    465          #pragma optimize=no_inline
    466          static const char __flash * __get_SELECTED(void)
    467          {
    468            return SELTAGS_1;
    469          }
    470          
    471          #pragma optimize=no_inline
    472          static const char __flash * __get_ETAG(void)
    473          {
    474            return SELTAGS_1+9;
    475          }
    476          
    477          #pragma optimize=no_inline
    478          static const char __flash * __get_CHECKED(void)
    479          {
    480            return " CHECKED>";
    481          }*/
    482          
    483          #pragma optimize=no_inline

   \                                 In  segment CODE, align 2, keep-with-next
    484          static const char __flash *__get_SVN_Revision(void)
   \                     __get_SVN_Revision:
    485          {
    486            return "2";
   \   00000000   ....               LDI     R16, LOW(`?<Constant "2">`)
   \   00000002   ....               LDI     R17, (`?<Constant "2">`) >> 8
   \   00000004   9508               RET
    487          }
    488          

   \                                 In  segment CODE, align 2, keep-with-next
    489          __z UREG IsGoodHTTPreq(HTTP_SOCK *hs)
   \                     IsGoodHTTPreq:
    490          {
    491            UREG c=hs->req[0];
   \   00000000   59ED               SUBI    R30, 157
   \   00000002   4FFF               SBCI    R31, 255
   \   00000004   8120               LD      R18, Z
    492            UREG c5=hs->req[5];
   \   00000006   8115               LDD     R17, Z+5
    493            UREG c6=hs->req[6];
   \   00000008   8106               LDD     R16, Z+6
    494            if (c=='G')
   \   0000000A   3427               CPI     R18, 71
   \   0000000C   F461               BRNE    ??IsGoodHTTPreq_0
    495            {
    496              if (c5=='\0') return _GET_root;
   \   0000000E   2311               TST     R17
   \   00000010   F411               BRNE    ??IsGoodHTTPreq_1
   \   00000012   E001               LDI     R16, 1
   \   00000014   9508               RET
    497              if (c5=='z') return _GET_z;
   \                     ??IsGoodHTTPreq_1:
   \   00000016   371A               CPI     R17, 122
   \   00000018   F411               BRNE    ??IsGoodHTTPreq_2
   \   0000001A   E002               LDI     R16, 2
   \   0000001C   9508               RET
    498              if (c5=='s') return _GET_s;
   \                     ??IsGoodHTTPreq_2:
   \   0000001E   3713               CPI     R17, 115
   \   00000020   F521               BRNE    ??IsGoodHTTPreq_3
   \   00000022   E003               LDI     R16, 3
   \   00000024   9508               RET
    499            }
    500            else
    501              if (c=='P')
   \                     ??IsGoodHTTPreq_0:
   \   00000026   3520               CPI     R18, 80
   \   00000028   F501               BRNE    ??IsGoodHTTPreq_3
    502              {
    503                if (c6=='w') return _POST_w;
   \   0000002A   3707               CPI     R16, 119
   \   0000002C   F411               BRNE    ??IsGoodHTTPreq_4
   \   0000002E   E004               LDI     R16, 4
   \   00000030   9508               RET
    504                if (c6=='m') return _POST_m;
   \                     ??IsGoodHTTPreq_4:
   \   00000032   360D               CPI     R16, 109
   \   00000034   F411               BRNE    ??IsGoodHTTPreq_5
   \   00000036   E005               LDI     R16, 5
   \   00000038   9508               RET
    505                if (c6=='e') return _POST_e;
   \                     ??IsGoodHTTPreq_5:
   \   0000003A   3605               CPI     R16, 101
   \   0000003C   F411               BRNE    ??IsGoodHTTPreq_6
   \   0000003E   E007               LDI     R16, 7
   \   00000040   9508               RET
    506                if (c6=='r') return _POST_r;
   \                     ??IsGoodHTTPreq_6:
   \   00000042   3702               CPI     R16, 114
   \   00000044   F411               BRNE    ??IsGoodHTTPreq_7
   \   00000046   E008               LDI     R16, 8
   \   00000048   9508               RET
    507                if (c6=='z') return _POST_z;
   \                     ??IsGoodHTTPreq_7:
   \   0000004A   370A               CPI     R16, 122
   \   0000004C   F411               BRNE    ??IsGoodHTTPreq_8
   \   0000004E   E009               LDI     R16, 9
   \   00000050   9508               RET
    508                if (c6=='f') return _POST_f;
   \                     ??IsGoodHTTPreq_8:
   \   00000052   3606               CPI     R16, 102
   \   00000054   F411               BRNE    ??IsGoodHTTPreq_9
   \   00000056   E00A               LDI     R16, 10
   \   00000058   9508               RET
    509                if (c6=='p') return _POST_p;
   \                     ??IsGoodHTTPreq_9:
   \   0000005A   3700               CPI     R16, 112
   \   0000005C   F411               BRNE    ??IsGoodHTTPreq_10
   \   0000005E   E00B               LDI     R16, 11
   \   00000060   9508               RET
    510                if (c6=='s') return _POST_s;
   \                     ??IsGoodHTTPreq_10:
   \   00000062   3703               CPI     R16, 115
   \   00000064   F411               BRNE    ??IsGoodHTTPreq_3
   \   00000066   E00C               LDI     R16, 12
   \   00000068   9508               RET
    511              }
    512            return _NOT_A_GOOD_HTTP_REQ;
   \                     ??IsGoodHTTPreq_3:
   \   0000006A   E000               LDI     R16, 0
   \   0000006C   9508               RET
    513          }
    514          
    515          //#pragma optimize=no_inline
    516          #pragma inline=forced
    517          static const char *__get_AUTH_srv_nonce(void)
    518          {
    519            return AUTH_srv_nonce;
    520          }
    521          
    522          #pragma segment="EEPROM_I"

   \                                 In  segment CODE, align 2, keep-with-next
    523          void REFRESH_EEPROM(void)
   \                     REFRESH_EEPROM:
    524          {
    525            if (EEPROM_RESTORED)
   \   00000000   9100....           LDS     R16, EEPROM_RESTORED
   \   00000004   2300               TST     R16
   \   00000006   F0E1               BREQ    ??REFRESH_EEPROM_0
    526            {
    527              //volatile char __eeprom *p=(volatile char __eeprom *)__segment_begin("EEPROM_I");
    528              volatile char __eeprom *p=(volatile char __eeprom *)MAC_EEPROM;
   \   00000008   ....               LDI     R20, LOW((MASK_IP_EEPROM + 16))
   \   0000000A   ....               LDI     R21, HIGH((MASK_IP_EEPROM + 16))
    529              do
    530              {
    531                char c;
    532                EEPROM_RESTORED=0;
   \                     ??REFRESH_EEPROM_1:
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   9300....           STS     EEPROM_RESTORED, R16
    533                c=*p;
   \   00000012   ........           CALL    __eeget8_16
    534                if (EEPROM_RESTORED)
   \   00000016   9110....           LDS     R17, EEPROM_RESTORED
   \   0000001A   2311               TST     R17
   \   0000001C   F059               BREQ    ??REFRESH_EEPROM_2
    535                {
    536          	*p=c;
   \   0000001E   ........           CALL    __eeput8_16
    537          	EEPROM_RESTORED=0;
   \   00000022   E000               LDI     R16, 0
   \   00000024   9300....           STS     EEPROM_RESTORED, R16
    538          	c=*p;
   \   00000028   ........           CALL    __eeget8_16
    539          	if (EEPROM_RESTORED) break; //Не восстанавливается
   \   0000002C   9100....           LDS     R16, EEPROM_RESTORED
   \   00000030   2300               TST     R16
   \   00000032   F431               BRNE    ??REFRESH_EEPROM_0
    540                }
    541              }
    542              while(++p!=(volatile char __eeprom *)__segment_end("EEPROM_I"));
   \                     ??REFRESH_EEPROM_2:
   \   00000034   5F4F               SUBI    R20, 255
   \   00000036   4F5F               SBCI    R21, 255
   \   00000038   ....               LDI     R17, (SFE(EEPROM_I)) >> 8
   \   0000003A   ....               CPI     R20, LOW(SFE(EEPROM_I))
   \   0000003C   0751               CPC     R21, R17
   \   0000003E   F731               BRNE    ??REFRESH_EEPROM_1
    543            }
    544          }
   \                     ??REFRESH_EEPROM_0:
   \   00000040   9508               RET
    545          

   \                                 In  segment CODE, align 2, keep-with-next
    546          void SYNC_EE_(void)
   \                     SYNC_EE_:
    547          {
    548          }
   \   00000000   9508               RET
    549          

   \                                 In  segment CODE, align 2, keep-with-next
    550          static __z void SetupRegister(UREG select_n, HTTP_SOCK *s)
   \                     SetupRegister:
    551          {
   \   00000000   2F20               MOV     R18, R16
    552            void StartGET(void);
    553            UINT16 value=s->value;
   \   00000002   AD06               LDD     R16, Z+62
    554            
    555            if (select_n>=243)//IsGoodHTTPreq(s)==_POST_z)
   \   00000004   3F23               CPI     R18, 243
   \   00000006   F080               BRCS    ??SetupRegister_0
    556            {
    557              select_n-=243;
   \   00000008   5F23               SUBI    R18, 243
    558              if (select_n<4)
   \   0000000A   3024               CPI     R18, 4
   \   0000000C   F418               BRCC    ??SetupRegister_1
    559              {
    560                ((char __eeprom *)(&IP_EEPROM))[select_n]=value;
   \   0000000E   ....               LDI     R20, LOW((MASK_IP_EEPROM + 4))
   \   00000010   ....               LDI     R21, HIGH((MASK_IP_EEPROM + 4))
   \   00000012   C005               RJMP    ??SetupRegister_2
    561              }
    562              else
    563              {
    564                select_n-=4;
   \                     ??SetupRegister_1:
   \   00000014   5024               SUBI    R18, 4
    565                if (select_n<ETH_HWA_LEN)
   \   00000016   3026               CPI     R18, 6
   \   00000018   F4A8               BRCC    ??SetupRegister_3
    566                {
    567          	MAC_EEPROM[select_n]=value;
   \   0000001A   ....               LDI     R20, LOW((MASK_IP_EEPROM + 16))
   \   0000001C   ....               LDI     R21, HIGH((MASK_IP_EEPROM + 16))
   \                     ??SetupRegister_2:
   \   0000001E   E030               LDI     R19, 0
   \   00000020   0F42               ADD     R20, R18
   \   00000022   1F53               ADC     R21, R19
   \   00000024   ........           JMP     __eeput8_16
    568                }
    569              }
    570              return;
    571            }
    572            select_n-=1;
   \                     ??SetupRegister_0:
   \   00000028   952A               DEC     R18
    573            if (select_n<8)
   \   0000002A   3028               CPI     R18, 8
   \   0000002C   F458               BRCC    ??SetupRegister_3
    574            {
    575              ((char __eeprom *)(&OUTG_IP))[select_n]=value;
   \   0000002E   ....               LDI     R20, LOW((MASK_IP_EEPROM + 8))
   \   00000030   ....               LDI     R21, HIGH((MASK_IP_EEPROM + 8))
   \   00000032   E030               LDI     R19, 0
   \   00000034   0F42               ADD     R20, R18
   \   00000036   1F53               ADC     R21, R19
   \   00000038   ........           CALL    __eeput8_16
    576              if (select_n==7) StartGET();
   \   0000003C   3027               CPI     R18, 7
   \   0000003E   F411               BRNE    ??SetupRegister_3
   \   00000040   ........           CALL    StartGET
   \                     ??SetupRegister_3:
   \   00000044   9508               RET
    577              return;
    578            }
    579            select_n-=8;
    580          }
    581          
    582          static void StoreDeviceName(const char *s, UREG adr)
    583          {
    584          }
    585          
    586          enum HTTP_SRV_STATE
    587          {
    588            _HTTP_REQ=0,
    589            _HTTP_LF,
    590            _HTTP_CR,
    591            _HTTP_PROP,
    592            _HTTP_SUBPROP,
    593            _HTTP_URI,
    594            _HTTP_RESP,
    595            _HTTP_CONTENTLEN,
    596            _HTTP_CONTENTLEN_OK,
    597            _HTTP_BODY, //Последний \n заголовка, все что дальше - контент
    598            _HTTP_NAME,
    599            _HTTP_EQU,
    600            _HTTP_VALUE,
    601            _HTTP_BRK,
    602            _HTTP_AMPERSAND,
    603            _HTTP_STRING,
    604            _HTTP_IP,
    605            _HTTP_STRIP,
    606            _HTTP_BIN,
    607            _HTTP_BIN_STAGE2,
    608            _HTTP_WAIT_USART, //Состояние ожидания готовности USART
    609            _HTTP_PREP_SEND,
    610            _HTTP_SEND,
    611          };
    612          

   \                                 In  segment CODE, align 2, keep-with-next
    613          static __z UINT16 a2i(const char *s)
   \                     a2i:
    614          {
    615            UREG c;
    616            UINT16 i=0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   E010               LDI     R17, 0
   \   00000004   E02A               LDI     R18, 10
   \   00000006   C009               RJMP    ??a2i_0
    617            for(;;)
    618            {
    619              c=*s++;
    620              if (c==' ') continue;
    621              c-='0';
    622              if (c>9) return i;
    623              i*=10;
    624              i+=c;
   \                     ??a2i_1:
   \   00000008   9F21               MUL     R18, R17
   \   0000000A   2D30               MOV     R19, R0
   \   0000000C   9F20               MUL     R18, R16
   \   0000000E   0D31               ADD     R19, R1
   \   00000010   2D00               MOV     R16, R0
   \   00000012   2F13               MOV     R17, R19
   \   00000014   E050               LDI     R21, 0
   \   00000016   0F04               ADD     R16, R20
   \   00000018   1F15               ADC     R17, R21
   \                     ??a2i_0:
   \   0000001A   9141               LD      R20, Z+
   \   0000001C   3240               CPI     R20, 32
   \   0000001E   F3E9               BREQ    ??a2i_0
   \   00000020   5340               SUBI    R20, 48
   \   00000022   304A               CPI     R20, 10
   \   00000024   F388               BRCS    ??a2i_1
   \   00000026   9508               RET
    625            }
    626          }
    627          
    628          #pragma optimize=no_code_motion

   \                                 In  segment CODE, align 2, keep-with-next
    629          static __x UREG HTTP_hook_DATA_RX(UREG len, UINT8 *data, HTTP_SOCK *s)
   \                     HTTP_hook_DATA_RX:
    630          {
   \   00000000   928A               ST      -Y, R8
   \   00000002   927A               ST      -Y, R7
   \   00000004   926A               ST      -Y, R6
   \   00000006   925A               ST      -Y, R5
   \   00000008   924A               ST      -Y, R4
   \   0000000A   939A               ST      -Y, R25
   \   0000000C   938A               ST      -Y, R24
   \   0000000E                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R7_is_cg_reg
   \   0000000E                      REQUIRE ?Register_R8_is_cg_reg
   \   0000000E   2E80               MOV     R8, R16
   \   00000010   013D               MOVW    R7:R6, R27:R26
   \   00000012   0129               MOVW    R5:R4, R19:R18
    631            UREG state=s->state;
   \   00000014   01D9               MOVW    R27:R26, R19:R18
   \   00000016   969B               ADIW    R27:R26, 43
   \   00000018   01FD               MOVW    R31:R30, R27:R26
   \   0000001A   8182               LDD     R24, Z+2
    632            UREG val2=s->val2;
   \   0000001C   8995               LDD     R25, Z+21
    633            UREG c;
    634            UREG i;
    635            UREG c2;
    636            const char __flash *p;
    637            if (state==_HTTP_WAIT_USART) return 0; //Ничего не передаем в ожидании
   \   0000001E   3184               CPI     R24, 20
   \   00000020   F411               BRNE    ??HTTP_hook_DATA_RX_0
   \                     ??HTTP_hook_DATA_RX_1:
   \   00000022   E000               LDI     R16, 0
   \   00000024   C2B6               RJMP    ??HTTP_hook_DATA_RX_2
    638            if (state>=_HTTP_PREP_SEND) return 1;
   \                     ??HTTP_hook_DATA_RX_0:
   \   00000026   3185               CPI     R24, 21
   \   00000028   F008               BRCS    $+2+2
   \   0000002A   C2B2               RJMP    ??HTTP_hook_DATA_RX_3
    639            if (!len) return 0;
   \   0000002C   2300               TST     R16
   \   0000002E   F3C9               BREQ    ??HTTP_hook_DATA_RX_1
    640            do // начало мегацикла
    641            {
    642              c=*data;
   \                     ??HTTP_hook_DATA_RX_4:
   \   00000030   01F3               MOVW    R31:R30, R7:R6
   \   00000032   8100               LD      R16, Z
    643              switch(state) // пройдемся по состояниям
   \   00000034   2F18               MOV     R17, R24
   \   00000036   3184               CPI     R24, 20
   \   00000038   F4E0               BRCC    ??HTTP_hook_DATA_RX_5
   \   0000003A   E0F2               LDI     R31, 2
   \   0000003C   9F1F               MUL     R17, R31
   \   0000003E   01F0               MOVW    R31:R30, R1:R0
   \   00000040   ....               SUBI    R30, LOW((-(`?<Jumptable for HTTP_hook_DATA_RX>_0`) & 0xFFFF))
   \   00000042   ....               SBCI    R31, (-(`?<Jumptable for HTTP_hook_DATA_RX>_0`) & 0xFFFF) >> 8
   \   00000044   9005               LPM     R0, Z+
   \   00000046   9014               LPM     R1, Z
   \   00000048   01F0               MOVW    R31:R30, R1:R0
   \   0000004A   9409               IJMP
    644              {
    645              case _HTTP_REQ:
    646                if ((val2>=5)&&(c<=' '))
   \                     ??HTTP_hook_DATA_RX_6:
   \   0000004C   3095               CPI     R25, 5
   \   0000004E   F020               BRCS    ??HTTP_hook_DATA_RX_7
   \   00000050   3201               CPI     R16, 33
   \   00000052   F410               BRCC    ??HTTP_hook_DATA_RX_7
    647                {
    648          	state=_HTTP_LF;
   \                     ??HTTP_hook_DATA_RX_8:
   \   00000054   E081               LDI     R24, 1
    649          	continue;
   \   00000056   C1E8               RJMP    ??HTTP_hook_DATA_RX_9
    650                }
    651                if (c==' ') c=':';
   \                     ??HTTP_hook_DATA_RX_7:
   \   00000058   3200               CPI     R16, 32
   \   0000005A   F409               BRNE    ??HTTP_hook_DATA_RX_10
   \   0000005C   E30A               LDI     R16, 58
    652                s->req[val2++]=c;
   \                     ??HTTP_hook_DATA_RX_10:
   \   0000005E   E030               LDI     R19, 0
   \   00000060   01F2               MOVW    R31:R30, R5:R4
   \   00000062   0FE9               ADD     R30, R25
   \   00000064   1FF3               ADC     R31, R19
   \   00000066   59ED               SUBI    R30, 157
   \   00000068   4FFF               SBCI    R31, 255
   \   0000006A   8300               ST      Z, R16
   \   0000006C   9593               INC     R25
    653                if (val2==(sizeof(s->req)-1))
   \   0000006E   3097               CPI     R25, 7
   \   00000070   F389               BREQ    ??HTTP_hook_DATA_RX_8
    654                {
    655          	state=_HTTP_LF;
    656          	continue;
    657                }
    658                break;
    659              case _HTTP_LF:
    660                if (c==10)
    661                {
    662          	val2=0;
    663          	state=_HTTP_CR;
    664                }
    665                break;
    666              case _HTTP_CR:
    667                if (c==13)
    668                {
    669          	state=_HTTP_BODY;
    670          	break;
    671                }
    672                state=_HTTP_PROP;
    673                continue;
    674              case _HTTP_URI:
    675              case _HTTP_RESP:
    676                if (c=='"')
    677                {
    678          	if (!val2) break;
    679          	goto L_endkey;
    680                }
    681              case _HTTP_SUBPROP:
    682                if (c=='=') goto L_endkey;
    683                if (c==',') goto L_endkey; //Запятой тоже разделяется
    684              case _HTTP_PROP:
    685                if ((c2=c)<=' ')
    686                {
    687                L_endkey:
    688          	c2=0;
    689                }
    690                s->http_hdr_item[val2++]=c2;
    691                if (c2&&val2<sizeof(s->http_hdr_item)) break; //Следующий символ
    692                //Конец ключа
    693                val2=0;
    694                switch(state)
    695                {
    696                case _HTTP_PROP:
    697          	//Обычные ключи в начале строки
    698          	state=_HTTP_LF;
    699          	if (!stricmp_PSOCK(s,"Content-Length:"))
    700          	{
    701          	  state=_HTTP_CONTENTLEN;
    702          	  break;
    703          	}
    704          	if (!stricmp_PSOCK(s,"Authorization:"))
    705          	{
    706          	  state=_HTTP_SUBPROP;
    707          	  break;
    708          	}
    709          	continue;
    710                case _HTTP_SUBPROP:
    711          	if (c<' ')
    712          	{
    713          	  state=_HTTP_LF;
    714          	  continue;
    715          	}
    716          	if (c!='=') break;
    717          	if (!stricmp_PSOCK(s,"response"))
    718          	{
    719          	  state=_HTTP_RESP;
    720          	}
    721          	if (!stricmp_PSOCK(s,"uri"))
    722          	{
    723          	  state=_HTTP_URI;
    724          	}
    725          	break;
    726                case _HTTP_URI:
    727          	AUTH_A2[0]=s->http_hdr_item[1];
    728          	state=_HTTP_SUBPROP;
    729          	break;
    730                case _HTTP_RESP:
    731          	if (IsGoodHTTPreq(s))
    732          	{
    733          	  //Получили response, теперь надо проверить, правильный ли он
    734          	  //Для начала изготавливаем A1
    735          	  //strcpy_P(AUTH_A2,"Rst7:uNikeE:Upor2007");
    736          	  stradd_E(stradd_P(stradd_E(AUTH_A2,HTTP_LOGIN),":uNikeE:"),HTTP_PASS);
    737          	  MD5cheat(AUTH_A1,(UINT8*)AUTH_A2,strlen(AUTH_A2));
    738          	  //Теперь A2
    739          	  strcpy(AUTH_A2,s->req);
    740          	  MD5cheat(AUTH_A2,(UINT8*)AUTH_A2,strlen(AUTH_A2));
    741          	  //И теперь общий результат
    742          	  AUTH_A1[32]=':';
    743          	  AUTH_srv_nonce[32]=':';
    744          	  MD5cheat(AUTH_A1,(UINT8*)MD5_Buffer,98);
    745          	  if (!strncmp(AUTH_A1,s->http_hdr_item,32))
    746          	  {
    747          	    if (s->af.AUTH_MODE<2) s->af.AUTH_MODE++; //1 - есть авторизация, 2 - устарел nonce
    748          	  }
    749          	  else
    750          	  {
    751          	    s->af.AUTH_MODE=0; //Нет авторизации
    752          	  }
    753          	}
    754          	s->af.AUTH_PRESENT=1;
    755          	state=_HTTP_LF;
    756          	continue;
    757                }
    758                break;
    759              case _HTTP_BODY:
    760                //Последний \n заголовка, готовимся к получению тела
    761                s->content_length=s->value+1;
    762                s->value=0;
    763                state=_HTTP_STRIP; //По умолчанию - пропускаем контент
    764          #ifdef NDEBUG
    765                if (!s->af.AUTH_PRESENT) s->af.AUTH_MODE=0;
    766          #else
    767                s->af.AUTH_PRESENT=1;
    768                s->af.AUTH_MODE=1;
    769          #endif
    770                c=IsGoodHTTPreq(s);
    771                if ((s->af.AUTH_MODE==1)||(c==_POST_b))
    772                {
    773          	switch(c)
    774          	{
    775          	case _POST_m:
    776          	  //Чистим битмап для работы с чекбоксами, сейчас не используем
    777          	  //ClearBitmap(RAM_BITMAP);
    778          	case _POST_w:
    779          	case _POST_z:
    780          	  state=_HTTP_NAME; //Будем разбирать текст в запросе POST
    781          	  break;
    782                  case _POST_f: // Следующая станция
    783          //          s->statnum++;
    784                    if(s->statnum++ == 15) s->statnum=0;
    785          /*          
    786                    stationNum++;
    787                    if (stationNum>15) stationNum=0;
    788                    stationNum_EEPROM=stationNum;
    789          */          
    790                    state=_HTTP_NAME; //Будем разбирать текст в запросе POST
    791          	  break;  
    792                  case _POST_p: // Предыдущая станция          
    793                    if(s->statnum--==0) s->statnum=15;          
    794                    state=_HTTP_NAME; //Будем разбирать текст в запросе POST
    795          	  break;                    
    796                  case _POST_s:
    797                    __no_operation();
    798                    state=_HTTP_NAME; //Будем разбирать текст в запросе POST
    799          //        тут надо разбирать параметры POST
    800          	  break;    
    801          	case _POST_e:
    802          	  REFRESH_EEPROM();
    803          	  break;
    804          	}
    805                }
    806                break;
    807              case _HTTP_BIN:
    808              case _HTTP_CONTENTLEN:
    809              case _HTTP_NAME:
    810              case _HTTP_VALUE:
    811                //Принимаем десятичный символ и накапливаем в s->value
    812                c-='0';
    813                if (c>9)
    814                {
    815          	state++;//_HTTP_BRK;//state++;
    816          	continue; //не цифра, следующее состояние с тем-же символом
    817                }
    818                s->value=s->value*10+c; //Накопление
    819                break;
    820              case _HTTP_CONTENTLEN_OK:
    821                //Приняли значение Content-Length
    822                state=_HTTP_LF;
    823                continue;
    824              case _HTTP_EQU:
    825                //Приняли значение NAME, тут должен быть '=', но мы пока положим на проверку
    826                val2=s->value;
    827                state=_HTTP_VALUE;
    828                
    829                if ((val2>=201)&&(val2<=208))// Station Attributes to change
    830                {
    831          	val2=0;
    832          	state=_HTTP_STRING;
    833          	break;
    834                }
    835                if ((val2==241)/*||IsGoodHTTPreq(s)==_POST_w*/)
    836                {
    837          	val2=0;
    838          	state=_HTTP_STRING;
    839          	break;
    840                }
    841                if (val2==242)
    842                {
    843          	val2=16;
    844          	state=_HTTP_STRING;
    845          	break;
    846                }
    847                s->value=0;
    848                break;
    849              case _HTTP_BRK:
    850                if (c=='O'||c=='o')
    851                {
    852          	s->value=1; //Заменяем "On/Off" на 1
    853                }
    854                /*if (val2==2)
    855                {
    856          	EE_ENABLE_MODBUS=0;
    857          	EE_ENABLE_AJAX=0;
    858                }*/
    859                //Устанавливаем данные по маске
    860                SetupRegister(val2,s);
    861                s->value=0;
    862                state=_HTTP_AMPERSAND;
    863                continue; //Стрипаем до &
    864              case _HTTP_AMPERSAND:
    865                if (c=='&') state=_HTTP_NAME; //Когда дошли до &, опять начинаем разбор NAME
    866                break;
    867              case _HTTP_STRING:
    868                //Принимаем строку
    869                if (c=='&')
    870                {       
    871                  if (val2) // если параметр не пустой
    872                  {
    873                    // если пришло поле №201, то сохраним номер станции, которую надо поменять              
    874                    if (s->value==201) s->statnum= a2i(AUTH_A2); 
    875                   // если пришло поле №202, то поменяем название станции в EEPROM      
    876                    else if (s->value==202)
    877                    {
    878                      char __eeprom *ep=&station_list[s->statnum].LCD_ID[0];
    879                      char *rp=AUTH_A2;
    880                      while (*rp)
    881                      {
    882                        UREG sym=*rp++;
    883                        if (sym =='+') sym=' ';
    884                        *ep++=sym;
    885                      }
    886                      *ep=0;
    887                    }
    888                    // поля №203-206 - поменяем IP станции в EEPROM      
    889                    else if ((s->value>=203)&&(s->value<=206))
    890                    {
    891                     ((char __eeprom *)(&station_list[s->statnum].IP))[s->value-203]=(UINT8)a2i(AUTH_A2);
    892                    }
    893                    // если пришло поле №207, то поменяем порт станции в EEPROM      
    894                    else if (s->value==207)
    895                    {
    896                      station_list[s->statnum].port=(UINT16)a2i(AUTH_A2);         
    897                    }
    898                    else if (s->value==208)
    899                    {
    900                      __no_operation();
    901                    }
    902                  }
    903          	s->value=0;
    904                  state=_HTTP_NAME; //Следующий элемент
    905          	break;        
    906                }
    907                if ((val2&15)==15)
    908                {
    909          	state=_HTTP_STRIP; //Великоват login или pass, стрипаем все остальное
    910          	break;
    911                }
    912                {
    913          	char *wp=AUTH_A2+val2;
    914          	*wp++=c;
    915          	*wp=0;
    916          	val2++;
    917                }
    918                break;
    919              case _HTTP_STRIP:
    920                break;
    921              case _HTTP_BIN_STAGE2:
    922                s->value=0;
    923                state=_HTTP_BIN;
    924                break;
    925              }
    926              if (state>_HTTP_BODY)
   \                     ??HTTP_hook_DATA_RX_5:
   \   00000072   308A               CPI     R24, 10
   \   00000074   F408               BRCC    $+2+2
   \   00000076   C1D3               RJMP    ??HTTP_hook_DATA_RX_11
    927              {
    928                UINT16 l=s->content_length;
    929                if (!--l) goto L_reqfinish;
   \                     ??HTTP_hook_DATA_RX_12:
   \   00000078   01F2               MOVW    R31:R30, R5:R4
   \   0000007A   96BB               ADIW    R31:R30, 43
   \   0000007C   8906               LDD     R16, Z+22
   \   0000007E   8917               LDD     R17, Z+23
   \   00000080   5001               SUBI    R16, 1
   \   00000082   4010               SBCI    R17, 0
   \   00000084   2F20               MOV     R18, R16
   \   00000086   2B21               OR      R18, R17
   \   00000088   F009               BREQ    $+2+2
   \   0000008A   C1C5               RJMP    ??HTTP_hook_DATA_RX_13
    930                s->content_length=l;
    931              }
    932              data++;
    933              len--;
    934            }
    935            while(len);
    936            s->state=state;
    937            s->val2=val2;
    938            return 0;
    939            //Закончен разбор запроса
    940          L_reqfinish:
    941            s->state=_HTTP_SEND;
   \   0000008C   E106               LDI     R16, 22
   \   0000008E   8302               STD     Z+2, R16
    942            s->val2=val2;
   \   00000090   8B95               STD     Z+21, R25
    943            if (state==_HTTP_VALUE) //Последний параметр в POST
   \   00000092   308C               CPI     R24, 12
   \   00000094   F009               BREQ    $+2+2
   \   00000096   C1D4               RJMP    ??HTTP_hook_DATA_RX_14
    944            {
    945              SetupRegister(val2,s);
   \   00000098   01F2               MOVW    R31:R30, R5:R4
   \   0000009A   2F09               MOV     R16, R25
   \   0000009C   ....               RCALL   SetupRegister
   \   0000009E   C205               RJMP    ??HTTP_hook_DATA_RX_15
    946            }
   \                     ??HTTP_hook_DATA_RX_16:
   \   000000A0   300A               CPI     R16, 10
   \   000000A2   F739               BRNE    ??HTTP_hook_DATA_RX_5
   \   000000A4   E090               LDI     R25, 0
   \   000000A6   E082               LDI     R24, 2
   \   000000A8   C1BA               RJMP    ??HTTP_hook_DATA_RX_11
   \                     ??HTTP_hook_DATA_RX_17:
   \   000000AA   300D               CPI     R16, 13
   \   000000AC   F411               BRNE    ??HTTP_hook_DATA_RX_18
   \   000000AE   E089               LDI     R24, 9
   \   000000B0   C1B6               RJMP    ??HTTP_hook_DATA_RX_11
   \                     ??HTTP_hook_DATA_RX_18:
   \   000000B2   E083               LDI     R24, 3
   \   000000B4   C1B9               RJMP    ??HTTP_hook_DATA_RX_9
   \                     ??HTTP_hook_DATA_RX_19:
   \   000000B6   3202               CPI     R16, 34
   \   000000B8   F419               BRNE    ??HTTP_hook_DATA_RX_20
   \   000000BA   2399               TST     R25
   \   000000BC   F441               BRNE    ??HTTP_hook_DATA_RX_21
   \   000000BE   CFD9               RJMP    ??HTTP_hook_DATA_RX_5
   \                     ??HTTP_hook_DATA_RX_20:
   \   000000C0   330D               CPI     R16, 61
   \   000000C2   F029               BREQ    ??HTTP_hook_DATA_RX_21
   \   000000C4   320C               CPI     R16, 44
   \   000000C6   F019               BREQ    ??HTTP_hook_DATA_RX_21
   \                     ??HTTP_hook_DATA_RX_22:
   \   000000C8   2F10               MOV     R17, R16
   \   000000CA   3201               CPI     R16, 33
   \   000000CC   F408               BRCC    ??HTTP_hook_DATA_RX_23
   \                     ??HTTP_hook_DATA_RX_21:
   \   000000CE   E010               LDI     R17, 0
   \                     ??HTTP_hook_DATA_RX_23:
   \   000000D0   E030               LDI     R19, 0
   \   000000D2   01F2               MOVW    R31:R30, R5:R4
   \   000000D4   0FE9               ADD     R30, R25
   \   000000D6   1FF3               ADC     R31, R19
   \   000000D8   5BED               SUBI    R30, 189
   \   000000DA   4FFF               SBCI    R31, 255
   \   000000DC   8310               ST      Z, R17
   \   000000DE   9593               INC     R25
   \   000000E0   2311               TST     R17
   \   000000E2   F011               BREQ    ??HTTP_hook_DATA_RX_24
   \   000000E4   3290               CPI     R25, 32
   \   000000E6   F228               BRCS    ??HTTP_hook_DATA_RX_5
   \                     ??HTTP_hook_DATA_RX_24:
   \   000000E8   E090               LDI     R25, 0
   \   000000EA   2F18               MOV     R17, R24
   \   000000EC   5013               SUBI    R17, 3
   \   000000EE   F039               BREQ    ??HTTP_hook_DATA_RX_25
   \   000000F0   951A               DEC     R17
   \   000000F2   F0D9               BREQ    ??HTTP_hook_DATA_RX_26
   \   000000F4   951A               DEC     R17
   \   000000F6   F199               BREQ    ??HTTP_hook_DATA_RX_27
   \   000000F8   951A               DEC     R17
   \   000000FA   F1B9               BREQ    ??HTTP_hook_DATA_RX_28
   \   000000FC   CFBA               RJMP    ??HTTP_hook_DATA_RX_5
   \                     ??HTTP_hook_DATA_RX_25:
   \   000000FE   E081               LDI     R24, 1
   \   00000100   ....               LDI     R30, LOW(`?<Constant "Content-Length:">`)
   \   00000102   ....               LDI     R31, (`?<Constant "Content-Length:">`) >> 8
   \   00000104   01D2               MOVW    R27:R26, R5:R4
   \   00000106   5BAD               SUBI    R26, 189
   \   00000108   4FBF               SBCI    R27, 255
   \   0000010A   ....               RCALL   stricmp_P
   \   0000010C   2300               TST     R16
   \   0000010E   F411               BRNE    ??HTTP_hook_DATA_RX_29
   \   00000110   E087               LDI     R24, 7
   \   00000112   C185               RJMP    ??HTTP_hook_DATA_RX_11
   \                     ??HTTP_hook_DATA_RX_29:
   \   00000114   ....               LDI     R30, LOW((`?<Constant "Content-Length:">` + 16))
   \   00000116   ....               LDI     R31, HIGH((`?<Constant "Content-Length:">` + 16))
   \   00000118   01D2               MOVW    R27:R26, R5:R4
   \   0000011A   5BAD               SUBI    R26, 189
   \   0000011C   4FBF               SBCI    R27, 255
   \   0000011E   ....               RCALL   stricmp_P
   \   00000120   2300               TST     R16
   \   00000122   F009               BREQ    $+2+2
   \   00000124   C181               RJMP    ??HTTP_hook_DATA_RX_9
   \                     ??HTTP_hook_DATA_RX_30:
   \   00000126   E084               LDI     R24, 4
   \   00000128   C17A               RJMP    ??HTTP_hook_DATA_RX_11
   \                     ??HTTP_hook_DATA_RX_26:
   \   0000012A   3200               CPI     R16, 32
   \   0000012C   F408               BRCC    $+2+2
   \   0000012E   CF92               RJMP    ??HTTP_hook_DATA_RX_8
   \   00000130   330D               CPI     R16, 61
   \   00000132   F009               BREQ    $+2+2
   \   00000134   CF9E               RJMP    ??HTTP_hook_DATA_RX_5
   \   00000136   ....               LDI     R30, LOW((`?<Constant "Content-Length:">` + 31))
   \   00000138   ....               LDI     R31, HIGH((`?<Constant "Content-Length:">` + 31))
   \   0000013A   01D2               MOVW    R27:R26, R5:R4
   \   0000013C   5BAD               SUBI    R26, 189
   \   0000013E   4FBF               SBCI    R27, 255
   \   00000140   ....               RCALL   stricmp_P
   \   00000142   2300               TST     R16
   \   00000144   F409               BRNE    ??HTTP_hook_DATA_RX_31
   \   00000146   E086               LDI     R24, 6
   \                     ??HTTP_hook_DATA_RX_31:
   \   00000148   ....               LDI     R30, LOW((`?<Constant "Content-Length:">` + 40))
   \   0000014A   ....               LDI     R31, HIGH((`?<Constant "Content-Length:">` + 40))
   \   0000014C   01D2               MOVW    R27:R26, R5:R4
   \   0000014E   5BAD               SUBI    R26, 189
   \   00000150   4FBF               SBCI    R27, 255
   \   00000152   ....               RCALL   stricmp_P
   \   00000154   2300               TST     R16
   \   00000156   F009               BREQ    $+2+2
   \   00000158   CF8C               RJMP    ??HTTP_hook_DATA_RX_5
   \   0000015A   E085               LDI     R24, 5
   \   0000015C   C160               RJMP    ??HTTP_hook_DATA_RX_11
   \                     ??HTTP_hook_DATA_RX_27:
   \   0000015E   01F2               MOVW    R31:R30, R5:R4
   \   00000160   96BB               ADIW    R31:R30, 43
   \   00000162   8D01               LDD     R16, Z+25
   \   00000164   9300....           STS     (http_sock + 173), R16
   \   00000168   CFDE               RJMP    ??HTTP_hook_DATA_RX_30
   \                     ??HTTP_hook_DATA_RX_28:
   \   0000016A   01F2               MOVW    R31:R30, R5:R4
   \   0000016C   ....               RCALL   IsGoodHTTPreq
   \   0000016E   2300               TST     R16
   \   00000170   F409               BRNE    $+2+2
   \   00000172   C046               RJMP    ??HTTP_hook_DATA_RX_32
   \   00000174   ....               LDI     R18, LOW((MASK_IP_EEPROM + 22))
   \   00000176   ....               LDI     R19, HIGH((MASK_IP_EEPROM + 22))
   \   00000178   ....               LDI     R16, LOW((http_sock + 173))
   \   0000017A   ....               LDI     R17, HIGH((http_sock + 173))
   \   0000017C   ....               RCALL   stradd_E
   \   0000017E   01D8               MOVW    R27:R26, R17:R16
   \   00000180   ....               LDI     R30, LOW((`?<Constant "Content-Length:">` + 44))
   \   00000182   ....               LDI     R31, HIGH((`?<Constant "Content-Length:">` + 44))
   \   00000184   ....               RCALL   stradd_P
   \   00000186   ....               LDI     R18, LOW((MASK_IP_EEPROM + 38))
   \   00000188   ....               LDI     R19, HIGH((MASK_IP_EEPROM + 38))
   \   0000018A   ....               RCALL   stradd_E
   \   0000018C   ....               LDI     R16, LOW((http_sock + 173))
   \   0000018E   ....               LDI     R17, HIGH((http_sock + 173))
   \   00000190   ........           CALL    strlen
   \   00000194   2F40               MOV     R20, R16
   \   00000196   ....               LDI     R18, LOW((http_sock + 173))
   \   00000198   ....               LDI     R19, HIGH((http_sock + 173))
   \   0000019A   ....               LDI     R16, LOW((http_sock + 107))
   \   0000019C   ....               LDI     R17, HIGH((http_sock + 107))
   \   0000019E   ........           CALL    MD5cheat
   \   000001A2   0192               MOVW    R19:R18, R5:R4
   \   000001A4   592D               SUBI    R18, 157
   \   000001A6   4F3F               SBCI    R19, 255
   \   000001A8   ....               LDI     R16, LOW((http_sock + 173))
   \   000001AA   ....               LDI     R17, HIGH((http_sock + 173))
   \   000001AC   ........           CALL    strcpy
   \   000001B0   ....               LDI     R16, LOW((http_sock + 173))
   \   000001B2   ....               LDI     R17, HIGH((http_sock + 173))
   \   000001B4   ........           CALL    strlen
   \   000001B8   2F40               MOV     R20, R16
   \   000001BA   ....               LDI     R18, LOW((http_sock + 173))
   \   000001BC   ....               LDI     R19, HIGH((http_sock + 173))
   \   000001BE   0189               MOVW    R17:R16, R19:R18
   \   000001C0   ........           CALL    MD5cheat
   \   000001C4   E30A               LDI     R16, 58
   \   000001C6   9300....           STS     (http_sock + 139), R16
   \   000001CA   9300....           STS     (http_sock + 172), R16
   \   000001CE   E642               LDI     R20, 98
   \   000001D0   ....               LDI     R18, LOW((http_sock + 107))
   \   000001D2   ....               LDI     R19, HIGH((http_sock + 107))
   \   000001D4   0189               MOVW    R17:R16, R19:R18
   \   000001D6   ........           CALL    MD5cheat
   \   000001DA   E240               LDI     R20, 32
   \   000001DC   E050               LDI     R21, 0
   \   000001DE   0192               MOVW    R19:R18, R5:R4
   \   000001E0   5B2D               SUBI    R18, 189
   \   000001E2   4F3F               SBCI    R19, 255
   \   000001E4   ....               LDI     R16, LOW((http_sock + 107))
   \   000001E6   ....               LDI     R17, HIGH((http_sock + 107))
   \   000001E8   ........           CALL    strncmp
   \   000001EC   2B01               OR      R16, R17
   \   000001EE   01F2               MOVW    R31:R30, R5:R4
   \   000001F0   F431               BRNE    ??HTTP_hook_DATA_RX_33
   \   000001F2   A503               LDD     R16, Z+43
   \   000001F4   3002               CPI     R16, 2
   \   000001F6   F420               BRCC    ??HTTP_hook_DATA_RX_32
   \   000001F8   9503               INC     R16
   \   000001FA   A703               STD     Z+43, R16
   \   000001FC   C001               RJMP    ??HTTP_hook_DATA_RX_32
   \                     ??HTTP_hook_DATA_RX_33:
   \   000001FE   A793               STD     Z+43, R25
   \                     ??HTTP_hook_DATA_RX_32:
   \   00000200   E001               LDI     R16, 1
   \   00000202   01F2               MOVW    R31:R30, R5:R4
   \   00000204   A704               STD     Z+44, R16
   \   00000206   CF26               RJMP    ??HTTP_hook_DATA_RX_8
   \                     ??HTTP_hook_DATA_RX_34:
   \   00000208   01D2               MOVW    R27:R26, R5:R4
   \   0000020A   969B               ADIW    R27:R26, 43
   \   0000020C   01FD               MOVW    R31:R30, R27:R26
   \   0000020E   8903               LDD     R16, Z+19
   \   00000210   8914               LDD     R17, Z+20
   \   00000212   5F0F               SUBI    R16, 255
   \   00000214   4F1F               SBCI    R17, 255
   \   00000216   8B06               STD     Z+22, R16
   \   00000218   8B17               STD     Z+23, R17
   \   0000021A   E000               LDI     R16, 0
   \   0000021C   8B03               STD     Z+19, R16
   \   0000021E   8B04               STD     Z+20, R16
   \   00000220   E181               LDI     R24, 17
   \   00000222   E001               LDI     R16, 1
   \   00000224   8301               STD     Z+1, R16
   \   00000226   8300               ST      Z, R16
   \   00000228   01F2               MOVW    R31:R30, R5:R4
   \   0000022A   ....               RCALL   IsGoodHTTPreq
   \   0000022C   01FD               MOVW    R31:R30, R27:R26
   \   0000022E   8110               LD      R17, Z
   \   00000230   3011               CPI     R17, 1
   \   00000232   F009               BREQ    $+2+2
   \   00000234   CF21               RJMP    ??HTTP_hook_DATA_RX_12
   \   00000236   5004               SUBI    R16, 4
   \   00000238   F069               BREQ    ??HTTP_hook_DATA_RX_35
   \   0000023A   950A               DEC     R16
   \   0000023C   F059               BREQ    ??HTTP_hook_DATA_RX_35
   \   0000023E   5002               SUBI    R16, 2
   \   00000240   F139               BREQ    ??HTTP_hook_DATA_RX_36
   \   00000242   5002               SUBI    R16, 2
   \   00000244   F039               BREQ    ??HTTP_hook_DATA_RX_35
   \   00000246   950A               DEC     R16
   \   00000248   F039               BREQ    ??HTTP_hook_DATA_RX_37
   \   0000024A   950A               DEC     R16
   \   0000024C   F0A1               BREQ    ??HTTP_hook_DATA_RX_38
   \   0000024E   950A               DEC     R16
   \   00000250   F0E9               BREQ    ??HTTP_hook_DATA_RX_39
   \   00000252   CF0F               RJMP    ??HTTP_hook_DATA_RX_5
   \                     ??HTTP_hook_DATA_RX_35:
   \   00000254   E08A               LDI     R24, 10
   \   00000256   CF10               RJMP    ??HTTP_hook_DATA_RX_12
   \                     ??HTTP_hook_DATA_RX_37:
   \   00000258   01F2               MOVW    R31:R30, R5:R4
   \   0000025A   51E3               SUBI    R30, 19
   \   0000025C   4FFF               SBCI    R31, 255
   \   0000025E   8100               LD      R16, Z
   \   00000260   2F10               MOV     R17, R16
   \   00000262   9513               INC     R17
   \   00000264   8310               ST      Z, R17
   \   00000266   300F               CPI     R16, 15
   \   00000268   F7A9               BRNE    ??HTTP_hook_DATA_RX_35
   \   0000026A   E000               LDI     R16, 0
   \                     ??HTTP_hook_DATA_RX_40:
   \   0000026C   01F2               MOVW    R31:R30, R5:R4
   \   0000026E   51E3               SUBI    R30, 19
   \   00000270   4FFF               SBCI    R31, 255
   \   00000272   8300               ST      Z, R16
   \   00000274   CFEF               RJMP    ??HTTP_hook_DATA_RX_35
   \                     ??HTTP_hook_DATA_RX_38:
   \   00000276   01F2               MOVW    R31:R30, R5:R4
   \   00000278   51E3               SUBI    R30, 19
   \   0000027A   4FFF               SBCI    R31, 255
   \   0000027C   8100               LD      R16, Z
   \   0000027E   2F10               MOV     R17, R16
   \   00000280   951A               DEC     R17
   \   00000282   8310               ST      Z, R17
   \   00000284   2300               TST     R16
   \   00000286   F731               BRNE    ??HTTP_hook_DATA_RX_35
   \   00000288   E00F               LDI     R16, 15
   \   0000028A   CFF0               RJMP    ??HTTP_hook_DATA_RX_40
   \                     ??HTTP_hook_DATA_RX_39:
   \   0000028C   0000               NOP
   \   0000028E   CFE2               RJMP    ??HTTP_hook_DATA_RX_35
   \                     ??HTTP_hook_DATA_RX_36:
   \   00000290   ....               RCALL   REFRESH_EEPROM
   \   00000292   CEF2               RJMP    ??HTTP_hook_DATA_RX_12
   \                     ??HTTP_hook_DATA_RX_41:
   \   00000294   5300               SUBI    R16, 48
   \   00000296   300A               CPI     R16, 10
   \   00000298   F010               BRCS    ??HTTP_hook_DATA_RX_42
   \   0000029A   9583               INC     R24
   \   0000029C   C0C5               RJMP    ??HTTP_hook_DATA_RX_9
   \                     ??HTTP_hook_DATA_RX_42:
   \   0000029E   01D2               MOVW    R27:R26, R5:R4
   \   000002A0   969B               ADIW    R27:R26, 43
   \   000002A2   01FD               MOVW    R31:R30, R27:R26
   \   000002A4   8943               LDD     R20, Z+19
   \   000002A6   8954               LDD     R21, Z+20
   \   000002A8   E02A               LDI     R18, 10
   \   000002AA   9F25               MUL     R18, R21
   \   000002AC   2D30               MOV     R19, R0
   \   000002AE   9F24               MUL     R18, R20
   \   000002B0   2D20               MOV     R18, R0
   \   000002B2   0D31               ADD     R19, R1
   \   000002B4   E010               LDI     R17, 0
   \   000002B6   0F20               ADD     R18, R16
   \   000002B8   1F31               ADC     R19, R17
   \   000002BA   8B23               STD     Z+19, R18
   \   000002BC   8B34               STD     Z+20, R19
   \   000002BE   CED9               RJMP    ??HTTP_hook_DATA_RX_5
   \                     ??HTTP_hook_DATA_RX_43:
   \   000002C0   01F2               MOVW    R31:R30, R5:R4
   \   000002C2   96BB               ADIW    R31:R30, 43
   \   000002C4   8993               LDD     R25, Z+19
   \   000002C6   E08C               LDI     R24, 12
   \   000002C8   3C99               CPI     R25, 201
   \   000002CA   F028               BRCS    ??HTTP_hook_DATA_RX_44
   \   000002CC   3D91               CPI     R25, 209
   \   000002CE   F418               BRCC    ??HTTP_hook_DATA_RX_44
   \                     ??HTTP_hook_DATA_RX_45:
   \   000002D0   E090               LDI     R25, 0
   \                     ??HTTP_hook_DATA_RX_46:
   \   000002D2   E08F               LDI     R24, 15
   \   000002D4   CED1               RJMP    ??HTTP_hook_DATA_RX_12
   \                     ??HTTP_hook_DATA_RX_44:
   \   000002D6   3F91               CPI     R25, 241
   \   000002D8   F3D9               BREQ    ??HTTP_hook_DATA_RX_45
   \   000002DA   3F92               CPI     R25, 242
   \   000002DC   F411               BRNE    ??HTTP_hook_DATA_RX_47
   \   000002DE   E190               LDI     R25, 16
   \   000002E0   CFF8               RJMP    ??HTTP_hook_DATA_RX_46
   \                     ??HTTP_hook_DATA_RX_47:
   \   000002E2   E000               LDI     R16, 0
   \   000002E4   01F2               MOVW    R31:R30, R5:R4
   \   000002E6   AF06               STD     Z+62, R16
   \   000002E8   96BB               ADIW    R31:R30, 43
   \   000002EA   8B04               STD     Z+20, R16
   \   000002EC   CEC5               RJMP    ??HTTP_hook_DATA_RX_12
   \                     ??HTTP_hook_DATA_RX_48:
   \   000002EE   340F               CPI     R16, 79
   \   000002F0   F011               BREQ    ??HTTP_hook_DATA_RX_49
   \   000002F2   360F               CPI     R16, 111
   \   000002F4   F429               BRNE    ??HTTP_hook_DATA_RX_50
   \                     ??HTTP_hook_DATA_RX_49:
   \   000002F6   E001               LDI     R16, 1
   \   000002F8   E010               LDI     R17, 0
   \   000002FA   01F2               MOVW    R31:R30, R5:R4
   \   000002FC   AF06               STD     Z+62, R16
   \   000002FE   AF17               STD     Z+63, R17
   \                     ??HTTP_hook_DATA_RX_50:
   \   00000300   01F2               MOVW    R31:R30, R5:R4
   \   00000302   2F09               MOV     R16, R25
   \   00000304   ....               RCALL   SetupRegister
   \   00000306   E000               LDI     R16, 0
   \   00000308   01F2               MOVW    R31:R30, R5:R4
   \   0000030A   AF06               STD     Z+62, R16
   \   0000030C   96BB               ADIW    R31:R30, 43
   \   0000030E   8B04               STD     Z+20, R16
   \   00000310   E08E               LDI     R24, 14
   \   00000312   C08A               RJMP    ??HTTP_hook_DATA_RX_9
   \                     ??HTTP_hook_DATA_RX_51:
   \   00000314   3206               CPI     R16, 38
   \   00000316   F009               BREQ    $+2+2
   \   00000318   CEAC               RJMP    ??HTTP_hook_DATA_RX_5
   \   0000031A   CF9C               RJMP    ??HTTP_hook_DATA_RX_35
   \                     ??HTTP_hook_DATA_RX_52:
   \   0000031C   3206               CPI     R16, 38
   \   0000031E   F009               BREQ    $+2+2
   \   00000320   C064               RJMP    ??HTTP_hook_DATA_RX_53
   \   00000322   2399               TST     R25
   \   00000324   F409               BRNE    $+2+2
   \   00000326   C05B               RJMP    ??HTTP_hook_DATA_RX_54
   \   00000328   01F2               MOVW    R31:R30, R5:R4
   \   0000032A   AD06               LDD     R16, Z+62
   \   0000032C   AD17               LDD     R17, Z+63
   \   0000032E   3C09               CPI     R16, 201
   \   00000330   E020               LDI     R18, 0
   \   00000332   0712               CPC     R17, R18
   \   00000334   F441               BRNE    ??HTTP_hook_DATA_RX_55
   \   00000336   ....               LDI     R30, LOW((http_sock + 173))
   \   00000338   ....               LDI     R31, HIGH((http_sock + 173))
   \   0000033A   ....               RCALL   a2i
   \   0000033C   01F2               MOVW    R31:R30, R5:R4
   \   0000033E   51E3               SUBI    R30, 19
   \   00000340   4FFF               SBCI    R31, 255
   \   00000342   8300               ST      Z, R16
   \   00000344   C04C               RJMP    ??HTTP_hook_DATA_RX_54
   \                     ??HTTP_hook_DATA_RX_55:
   \   00000346   3C0A               CPI     R16, 202
   \   00000348   0712               CPC     R17, R18
   \   0000034A   F4D1               BRNE    ??HTTP_hook_DATA_RX_56
   \   0000034C   ....               LDI     R20, LOW((station_list + 38))
   \   0000034E   ....               LDI     R21, HIGH((station_list + 38))
   \   00000350   51E3               SUBI    R30, 19
   \   00000352   4FFF               SBCI    R31, 255
   \   00000354   8110               LD      R17, Z
   \   00000356   E306               LDI     R16, 54
   \   00000358   9F10               MUL     R17, R16
   \   0000035A   0D40               ADD     R20, R0
   \   0000035C   1D51               ADC     R21, R1
   \   0000035E   ....               LDI     R30, LOW((http_sock + 173))
   \   00000360   ....               LDI     R31, HIGH((http_sock + 173))
   \   00000362   C007               RJMP    ??HTTP_hook_DATA_RX_57
   \                     ??HTTP_hook_DATA_RX_58:
   \   00000364   320B               CPI     R16, 43
   \   00000366   F409               BRNE    ??HTTP_hook_DATA_RX_59
   \   00000368   E200               LDI     R16, 32
   \                     ??HTTP_hook_DATA_RX_59:
   \   0000036A   ........           CALL    __eeput8_16
   \   0000036E   5F4F               SUBI    R20, 255
   \   00000370   4F5F               SBCI    R21, 255
   \                     ??HTTP_hook_DATA_RX_57:
   \   00000372   9101               LD      R16, Z+
   \   00000374   2300               TST     R16
   \   00000376   F7B1               BRNE    ??HTTP_hook_DATA_RX_58
   \   00000378   E000               LDI     R16, 0
   \                     ??HTTP_hook_DATA_RX_60:
   \   0000037A   ........           CALL    __eeput8_16
   \   0000037E   C02F               RJMP    ??HTTP_hook_DATA_RX_54
   \                     ??HTTP_hook_DATA_RX_56:
   \   00000380   3C0B               CPI     R16, 203
   \   00000382   0712               CPC     R17, R18
   \   00000384   F0A8               BRCS    ??HTTP_hook_DATA_RX_61
   \   00000386   3C0F               CPI     R16, 207
   \   00000388   0712               CPC     R17, R18
   \   0000038A   F490               BRCC    ??HTTP_hook_DATA_RX_61
   \   0000038C   ....               LDI     R30, LOW((http_sock + 173))
   \   0000038E   ....               LDI     R31, HIGH((http_sock + 173))
   \   00000390   ....               RCALL   a2i
   \   00000392   ....               LDI     R20, LOW((station_list - 203))
   \   00000394   ....               LDI     R21, HIGH((station_list - 203))
   \   00000396   01F2               MOVW    R31:R30, R5:R4
   \   00000398   AD26               LDD     R18, Z+62
   \   0000039A   AD37               LDD     R19, Z+63
   \   0000039C   0F42               ADD     R20, R18
   \   0000039E   1F53               ADC     R21, R19
   \   000003A0   51E3               SUBI    R30, 19
   \   000003A2   4FFF               SBCI    R31, 255
   \   000003A4   8120               LD      R18, Z
   \   000003A6   E316               LDI     R17, 54
   \   000003A8   9F21               MUL     R18, R17
   \   000003AA   0D40               ADD     R20, R0
   \   000003AC   1D51               ADC     R21, R1
   \   000003AE   CFE5               RJMP    ??HTTP_hook_DATA_RX_60
   \                     ??HTTP_hook_DATA_RX_61:
   \   000003B0   3C0F               CPI     R16, 207
   \   000003B2   0712               CPC     R17, R18
   \   000003B4   F481               BRNE    ??HTTP_hook_DATA_RX_62
   \   000003B6   ....               LDI     R30, LOW((http_sock + 173))
   \   000003B8   ....               LDI     R31, HIGH((http_sock + 173))
   \   000003BA   ....               RCALL   a2i
   \   000003BC   ....               LDI     R20, LOW((station_list + 4))
   \   000003BE   ....               LDI     R21, HIGH((station_list + 4))
   \   000003C0   01F2               MOVW    R31:R30, R5:R4
   \   000003C2   51E3               SUBI    R30, 19
   \   000003C4   4FFF               SBCI    R31, 255
   \   000003C6   8130               LD      R19, Z
   \   000003C8   E326               LDI     R18, 54
   \   000003CA   9F32               MUL     R19, R18
   \   000003CC   0D40               ADD     R20, R0
   \   000003CE   1D51               ADC     R21, R1
   \   000003D0   ........           CALL    __eeput16_16
   \   000003D4   C004               RJMP    ??HTTP_hook_DATA_RX_54
   \                     ??HTTP_hook_DATA_RX_62:
   \   000003D6   3D00               CPI     R16, 208
   \   000003D8   4010               SBCI    R17, 0
   \   000003DA   F409               BRNE    ??HTTP_hook_DATA_RX_54
   \   000003DC   0000               NOP
   \                     ??HTTP_hook_DATA_RX_54:
   \   000003DE   E000               LDI     R16, 0
   \   000003E0   01F2               MOVW    R31:R30, R5:R4
   \   000003E2   AF06               STD     Z+62, R16
   \   000003E4   96BB               ADIW    R31:R30, 43
   \   000003E6   8B04               STD     Z+20, R16
   \   000003E8   CF35               RJMP    ??HTTP_hook_DATA_RX_35
   \                     ??HTTP_hook_DATA_RX_53:
   \   000003EA   2F19               MOV     R17, R25
   \   000003EC   701F               ANDI    R17, 0x0F
   \   000003EE   301F               CPI     R17, 15
   \   000003F0   F411               BRNE    ??HTTP_hook_DATA_RX_63
   \   000003F2   E181               LDI     R24, 17
   \   000003F4   CE41               RJMP    ??HTTP_hook_DATA_RX_12
   \                     ??HTTP_hook_DATA_RX_63:
   \   000003F6   ....               LDI     R30, LOW((http_sock + 173))
   \   000003F8   ....               LDI     R31, HIGH((http_sock + 173))
   \   000003FA   E030               LDI     R19, 0
   \   000003FC   0FE9               ADD     R30, R25
   \   000003FE   1FF3               ADC     R31, R19
   \   00000400   9301               ST      Z+, R16
   \   00000402   8330               ST      Z, R19
   \   00000404   9593               INC     R25
   \   00000406   CE35               RJMP    ??HTTP_hook_DATA_RX_5
   \                     ??HTTP_hook_DATA_RX_64:
   \   00000408   E000               LDI     R16, 0
   \   0000040A   01F2               MOVW    R31:R30, R5:R4
   \   0000040C   AF06               STD     Z+62, R16
   \   0000040E   96BB               ADIW    R31:R30, 43
   \   00000410   8B04               STD     Z+20, R16
   \   00000412   E182               LDI     R24, 18
   \   00000414   CE31               RJMP    ??HTTP_hook_DATA_RX_12
   \                     ??HTTP_hook_DATA_RX_13:
   \   00000416   01F2               MOVW    R31:R30, R5:R4
   \   00000418   96BB               ADIW    R31:R30, 43
   \   0000041A   8B06               STD     Z+22, R16
   \   0000041C   8B17               STD     Z+23, R17
   \                     ??HTTP_hook_DATA_RX_11:
   \   0000041E   E001               LDI     R16, 1
   \   00000420   0E60               ADD     R6, R16
   \   00000422   E000               LDI     R16, 0
   \   00000424   1E70               ADC     R7, R16
   \   00000426   948A               DEC     R8
   \                     ??HTTP_hook_DATA_RX_9:
   \   00000428   2088               TST     R8
   \   0000042A   F009               BREQ    $+2+2
   \   0000042C   CE01               RJMP    ??HTTP_hook_DATA_RX_4
   \   0000042E   E20B               LDI     R16, 43
   \   00000430   0E40               ADD     R4, R16
   \   00000432   E000               LDI     R16, 0
   \   00000434   1E50               ADC     R5, R16
   \   00000436   01D2               MOVW    R27:R26, R5:R4
   \   00000438   01F2               MOVW    R31:R30, R5:R4
   \   0000043A   8382               STD     Z+2, R24
   \   0000043C   8B95               STD     Z+21, R25
   \   0000043E   C0A9               RJMP    ??HTTP_hook_DATA_RX_2
    947            if (state==_HTTP_STRING)
   \                     ??HTTP_hook_DATA_RX_14:
   \   00000440   308F               CPI     R24, 15
   \   00000442   F599               BRNE    ??HTTP_hook_DATA_RX_15
    948            {
    949              if (IsGoodHTTPreq(s)==_POST_s)
   \   00000444   01F2               MOVW    R31:R30, R5:R4
   \   00000446   ....               RCALL   IsGoodHTTPreq
   \   00000448   300C               CPI     R16, 12
   \   0000044A   F4D1               BRNE    ??HTTP_hook_DATA_RX_65
    950              {// Принимали запрос GET, надо записать в eeprom        
    951                  // если пришло поле №208, то поменяем запрос GET в EEPROM      
    952          //        if (s->value==208)
    953                    char __eeprom *ep=&station_list[s->statnum].req[0];
   \   0000044C   ....               LDI     R20, LOW((station_list + 6))
   \   0000044E   ....               LDI     R21, HIGH((station_list + 6))
   \   00000450   01F2               MOVW    R31:R30, R5:R4
   \   00000452   51E3               SUBI    R30, 19
   \   00000454   4FFF               SBCI    R31, 255
   \   00000456   8110               LD      R17, Z
   \   00000458   E306               LDI     R16, 54
   \   0000045A   9F10               MUL     R17, R16
   \   0000045C   0D40               ADD     R20, R0
   \   0000045E   1D51               ADC     R21, R1
    954                     if (val2)
   \   00000460   2399               TST     R25
   \   00000462   F051               BREQ    ??HTTP_hook_DATA_RX_66
    955                      {
    956                      char *rp=AUTH_A2;
   \   00000464   ....               LDI     R30, LOW((http_sock + 173))
   \   00000466   ....               LDI     R31, HIGH((http_sock + 173))
   \   00000468   C004               RJMP    ??HTTP_hook_DATA_RX_67
    957                      while (*rp)
    958                      {
    959                        *ep++=*rp++;
   \                     ??HTTP_hook_DATA_RX_68:
   \   0000046A   ........           CALL    __eeput8_16
   \   0000046E   5F4F               SUBI    R20, 255
   \   00000470   4F5F               SBCI    R21, 255
    960                      }
   \                     ??HTTP_hook_DATA_RX_67:
   \   00000472   9101               LD      R16, Z+
   \   00000474   2300               TST     R16
   \   00000476   F7C9               BRNE    ??HTTP_hook_DATA_RX_68
    961                      *ep=0;
   \                     ??HTTP_hook_DATA_RX_66:
   \   00000478   E000               LDI     R16, 0
   \   0000047A   ........           CALL    __eeput8_16
   \   0000047E   C015               RJMP    ??HTTP_hook_DATA_RX_15
    962                      }
    963                    else
    964                    {
    965                      *ep=0;
    966                    }
    967              }
    968              //Принимали login и pass, надо записать в eeprom        
    969              else if (IsGoodHTTPreq(s)==_POST_w)
   \                     ??HTTP_hook_DATA_RX_65:
   \   00000480   01F2               MOVW    R31:R30, R5:R4
   \   00000482   ....               RCALL   IsGoodHTTPreq
   \   00000484   3004               CPI     R16, 4
   \   00000486   F089               BREQ    ??HTTP_hook_DATA_RX_15
    970              {
    971                //Принимали новое имя устройства
    972                StoreDeviceName(AUTH_A2,s->value);
    973              }
    974              else 
    975              {
    976                //Принимали страничку Z
    977                UINT8 __eeprom *dp=(UINT8 __eeprom *)&HTTP_LOGIN;
   \   00000488   ....               LDI     R20, LOW((MASK_IP_EEPROM + 22))
   \   0000048A   ....               LDI     R21, HIGH((MASK_IP_EEPROM + 22))
    978                UREG i=0;
   \   0000048C   E010               LDI     R17, 0
   \   0000048E   ....               LDI     R30, LOW((http_sock + 173))
   \   00000490   ....               LDI     R31, HIGH((http_sock + 173))
    979                do
    980                {
    981          	*dp++=AUTH_A2[i++];
   \                     ??HTTP_hook_DATA_RX_69:
   \   00000492   9101               LD      R16, Z+
   \   00000494   ........           CALL    __eeput8_16
   \   00000498   9513               INC     R17
   \   0000049A   5F4F               SUBI    R20, 255
   \   0000049C   4F5F               SBCI    R21, 255
    982          	if (i==16)
   \   0000049E   3110               CPI     R17, 16
   \   000004A0   F411               BRNE    ??HTTP_hook_DATA_RX_70
    983          	{
    984          	  dp=(UINT8 __eeprom *)&HTTP_PASS;
   \   000004A2   ....               LDI     R20, LOW((MASK_IP_EEPROM + 38))
   \   000004A4   ....               LDI     R21, HIGH((MASK_IP_EEPROM + 38))
    985          	}
    986                }
    987                while(i<32);
   \                     ??HTTP_hook_DATA_RX_70:
   \   000004A6   3210               CPI     R17, 32
   \   000004A8   F3A0               BRCS    ??HTTP_hook_DATA_RX_69
    988              }
    989            }
    990            p=http_404;
   \                     ??HTTP_hook_DATA_RX_15:
   \   000004AA   ....               LDI     R24, LOW(http_404)
   \   000004AC   ....               LDI     R25, (http_404) >> 8
    991            if ((i=IsGoodHTTPreq(s))!=0)
   \   000004AE   01F2               MOVW    R31:R30, R5:R4
   \   000004B0   ....               RCALL   IsGoodHTTPreq
   \   000004B2   2F10               MOV     R17, R16
   \   000004B4   2300               TST     R16
   \   000004B6   F409               BRNE    $+2+2
   \   000004B8   C05C               RJMP    ??HTTP_hook_DATA_RX_71
    992            {
    993              switch(s->af.AUTH_MODE)
   \   000004BA   01F2               MOVW    R31:R30, R5:R4
   \   000004BC   A503               LDD     R16, Z+43
   \   000004BE   2300               TST     R16
   \   000004C0   F031               BREQ    ??HTTP_hook_DATA_RX_72
   \   000004C2   950A               DEC     R16
   \   000004C4   F039               BREQ    ??HTTP_hook_DATA_RX_73
   \   000004C6   950A               DEC     R16
   \   000004C8   F409               BRNE    $+2+2
   \   000004CA   C048               RJMP    ??HTTP_hook_DATA_RX_74
   \   000004CC   C052               RJMP    ??HTTP_hook_DATA_RX_71
    994              {
    995              case 0:
    996                //Нет авторизации
    997                p=http_401;
   \                     ??HTTP_hook_DATA_RX_72:
   \   000004CE   ....               LDI     R24, LOW(http_401)
   \   000004D0   ....               LDI     R25, (http_401) >> 8
    998                //Готовим новый nonce
    999                MD5cheat(AUTH_srv_nonce,(UINT8*)MD5_Buffer,98); //Из говна пулю ;)
   \   000004D2   C048               RJMP    ??HTTP_hook_DATA_RX_75
   1000                break;
   1001              case 1:
   1002                //Есть неустаревшая авторизация
   1003                switch(i)
   \                     ??HTTP_hook_DATA_RX_73:
   \   000004D4   951A               DEC     R17
   \   000004D6   F099               BREQ    ??HTTP_hook_DATA_RX_76
   \   000004D8   951A               DEC     R17
   \   000004DA   F0F1               BREQ    ??HTTP_hook_DATA_RX_77
   \   000004DC   951A               DEC     R17
   \   000004DE   F1B9               BREQ    ??HTTP_hook_DATA_RX_78
   \   000004E0   951A               DEC     R17
   \   000004E2   F0A1               BREQ    ??HTTP_hook_DATA_RX_79
   \   000004E4   951A               DEC     R17
   \   000004E6   F091               BREQ    ??HTTP_hook_DATA_RX_79
   \   000004E8   5012               SUBI    R17, 2
   \   000004EA   F081               BREQ    ??HTTP_hook_DATA_RX_79
   \   000004EC   951A               DEC     R17
   \   000004EE   F071               BREQ    ??HTTP_hook_DATA_RX_79
   \   000004F0   951A               DEC     R17
   \   000004F2   F049               BREQ    ??HTTP_hook_DATA_RX_80
   \   000004F4   5011               SUBI    R17, 1
   \   000004F6   F178               BRCS    ??HTTP_hook_DATA_RX_81
   \   000004F8   5013               SUBI    R17, 3
   \   000004FA   F058               BRCS    ??HTTP_hook_DATA_RX_82
   \   000004FC   C02C               RJMP    ??HTTP_hook_DATA_RX_81
   1004                {
   1005                case _GET_root:
   1006          	//Готовим динамические данные
   1007          	p=http_root;
   \                     ??HTTP_hook_DATA_RX_76:
   \   000004FE   ....               LDI     R24, LOW(http_root)
   \   00000500   ....               LDI     R25, (http_root) >> 8
   1008          	s->httpcb.select_n=0;
   \   00000502   E000               LDI     R16, 0
   \   00000504   C027               RJMP    ??HTTP_hook_DATA_RX_83
   1009          	break;
   1010                case _POST_z:
   1011          	p=http_302z;
   \                     ??HTTP_hook_DATA_RX_80:
   \   00000506   ....               LDI     R24, LOW(http_302z)
   \   00000508   ....               LDI     R25, (http_302z) >> 8
   \   0000050A   C025               RJMP    ??HTTP_hook_DATA_RX_81
   1012          	break;
   1013                case _POST_w:
   1014                case _POST_m:
   1015          	SYNC_EE_();
   1016          	//PORTC=RAM_BITMAP[0];
   1017          	//DDRC=RAM_BITMAP[1];
   1018                case _POST_r:
   1019                case _POST_e:
   1020          	p=http_302;
   \                     ??HTTP_hook_DATA_RX_79:
   \   0000050C   ....               LDI     R24, LOW(http_302)
   \   0000050E   ....               LDI     R25, (http_302) >> 8
   \   00000510   C022               RJMP    ??HTTP_hook_DATA_RX_81
   1021          	break;
   1022                case _POST_f:        
   1023                case _POST_p:        
   1024                case _POST_s:        
   1025          	p=http_302s;
   \                     ??HTTP_hook_DATA_RX_82:
   \   00000512   ....               LDI     R24, LOW(http_302s)
   \   00000514   ....               LDI     R25, (http_302s) >> 8
   \   00000516   C01F               RJMP    ??HTTP_hook_DATA_RX_81
   1026          	break;    
   1027                case _GET_z:
   1028          	//Готовим динамические данные
   1029          	{
   1030          	  UINT8 __eeprom *dp=(UINT8 __eeprom *)&IP_EEPROM;
   \                     ??HTTP_hook_DATA_RX_77:
   \   00000518   ....               LDI     R24, LOW((MASK_IP_EEPROM + 4))
   \   0000051A   ....               LDI     R25, HIGH((MASK_IP_EEPROM + 4))
   1031          	  UREG i=0;
   \   0000051C   2466               CLR     R6
   \   0000051E   ....               LDI     R26, LOW((http_sock + 173))
   \   00000520   ....               LDI     R27, HIGH((http_sock + 173))
   1032          	  do
   1033          	  {
   1034          	    i2a(AUTH_A2+i*5,*dp++);
   \                     ??HTTP_hook_DATA_RX_84:
   \   00000522   01AC               MOVW    R21:R20, R25:R24
   \   00000524   ........           CALL    __eeget8_16
   \   00000528   E010               LDI     R17, 0
   \   0000052A   01FD               MOVW    R31:R30, R27:R26
   \   0000052C   ....               RCALL   i2a
   \   0000052E   9601               ADIW    R25:R24, 1
   1035          	    i++;
   \   00000530   9463               INC     R6
   1036          	    if (i==4)
   \   00000532   E004               LDI     R16, 4
   \   00000534   1660               CP      R6, R16
   \   00000536   F411               BRNE    ??HTTP_hook_DATA_RX_85
   1037          	    {
   1038          	      dp=(UINT8 __eeprom *)MAC_EEPROM;
   \   00000538   ....               LDI     R24, LOW((MASK_IP_EEPROM + 16))
   \   0000053A   ....               LDI     R25, HIGH((MASK_IP_EEPROM + 16))
   1039          	    }
   1040          	  }
   1041          	  while(i<10);
   \                     ??HTTP_hook_DATA_RX_85:
   \   0000053C   9615               ADIW    R27:R26, 5
   \   0000053E   E00A               LDI     R16, 10
   \   00000540   1660               CP      R6, R16
   \   00000542   F378               BRCS    ??HTTP_hook_DATA_RX_84
   1042          	}
   1043          	p=http_z;
   \   00000544   ....               LDI     R24, LOW(http_z)
   \   00000546   ....               LDI     R25, (http_z) >> 8
   1044          	s->httpcb.select_n=240;
   \   00000548   EF00               LDI     R16, 240
   \   0000054A   01F2               MOVW    R31:R30, R5:R4
   \   0000054C   C003               RJMP    ??HTTP_hook_DATA_RX_83
   1045          	break;
   1046                case _GET_s:  
   1047                  /*
   1048                  //Готовим динамические данные
   1049                  {
   1050                    UINT8 __eeprom *sl=(UINT8 __eeprom *)&station_list;
   1051                    UREG i=0;
   1052                    do
   1053                    {
   1054                       i2a(AUTH_A2+i*5,*sl++);
   1055                       i++;
   1056                    }
   1057                    while(i<10);          
   1058                  }
   1059                  */
   1060                  p=http_s;
   \                     ??HTTP_hook_DATA_RX_78:
   \   0000054E   ....               LDI     R24, LOW(http_s)
   \   00000550   ....               LDI     R25, (http_s) >> 8
   1061                 	s->httpcb.select_n=201;
   \   00000552   EC09               LDI     R16, 201
   \                     ??HTTP_hook_DATA_RX_83:
   \   00000554   AB05               STD     Z+53, R16
   1062                  break;
   1063                }
   1064                s->af.AUTH_MODE=2; //Текущая авторизация устарела
   \                     ??HTTP_hook_DATA_RX_81:
   \   00000556   E002               LDI     R16, 2
   \   00000558   A703               STD     Z+43, R16
   \   0000055A   C00B               RJMP    ??HTTP_hook_DATA_RX_71
   1065                break;      
   1066              case 2:
   1067                p=http_401stale;
   \                     ??HTTP_hook_DATA_RX_74:
   \   0000055C   ....               LDI     R24, LOW(http_401stale)
   \   0000055E   ....               LDI     R25, (http_401stale) >> 8
   1068                s->af.AUTH_MODE=0; //Нафиг текущую авторизацию
   \   00000560   E000               LDI     R16, 0
   \   00000562   A703               STD     Z+43, R16
   1069                //Готовим новый nonce
   1070                MD5cheat(AUTH_srv_nonce,(UINT8*)MD5_Buffer,98); //Из говна пулю ;)
   \                     ??HTTP_hook_DATA_RX_75:
   \   00000564   E642               LDI     R20, 98
   \   00000566   ....               LDI     R18, LOW((http_sock + 107))
   \   00000568   ....               LDI     R19, HIGH((http_sock + 107))
   \   0000056A   ....               LDI     R16, LOW((http_sock + 140))
   \   0000056C   ....               LDI     R17, HIGH((http_sock + 140))
   \   0000056E   ........           CALL    MD5cheat
   1071                break;
   1072              }
   1073            }
   1074            AUTH_srv_nonce[32]=0;
   \                     ??HTTP_hook_DATA_RX_71:
   \   00000572   E000               LDI     R16, 0
   \   00000574   9300....           STS     (http_sock + 172), R16
   1075            //AUTH_A2[32]=0;
   1076            s->httpcb.html=p;
   \   00000578   01F2               MOVW    R31:R30, R5:R4
   \   0000057A   A786               STD     Z+46, R24
   \   0000057C   A797               STD     Z+47, R25
   1077            netw_memcpy(&s->httpcb_ack,&s->httpcb,sizeof(HTTP_CB));
   \   0000057E   E008               LDI     R16, 8
   \   00000580   E010               LDI     R17, 0
   \   00000582   96BE               ADIW    R31:R30, 46
   \   00000584   E326               LDI     R18, 54
   \   00000586   0E42               ADD     R4, R18
   \   00000588   1E51               ADC     R5, R17
   \   0000058A   01D2               MOVW    R27:R26, R5:R4
   \   0000058C   ........           CALL    netw_memcpy
   1078            return 1; //Есть данные для передачи
   \                     ??HTTP_hook_DATA_RX_3:
   \   00000590   E001               LDI     R16, 1
   \                     ??HTTP_hook_DATA_RX_2:
   \   00000592   9189               LD      R24, Y+
   \   00000594   9199               LD      R25, Y+
   \   00000596   9049               LD      R4, Y+
   \   00000598   9059               LD      R5, Y+
   \   0000059A   9069               LD      R6, Y+
   \   0000059C   9079               LD      R7, Y+
   \   0000059E   9089               LD      R8, Y+
   \   000005A0   9508               RET
   1079          }
   1080          

   \                                 In  segment CODE, align 2, keep-with-next
   1081          static __x UREG HTTP_hook_DATA_TX(UREG len, UINT8 *data, HTTP_CB *cb, HTTP_SOCK *s)
   \                     HTTP_hook_DATA_TX:
   1082          {
   \   00000000   927A               ST      -Y, R7
   \   00000002   926A               ST      -Y, R6
   \   00000004   925A               ST      -Y, R5
   \   00000006   924A               ST      -Y, R4
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R5_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R6_is_cg_reg
   \   0000000C                      REQUIRE ?Register_R7_is_cg_reg
   \   0000000C   2E70               MOV     R7, R16
   \   0000000E   012D               MOVW    R5:R4, R27:R26
   \   00000010   01D9               MOVW    R27:R26, R19:R18
   \   00000012   01CA               MOVW    R25:R24, R21:R20
   1083          //  HTTP_CB *cb;
   1084            //Посылка новых данных
   1085            UREG c=s->state;
   \   00000014   01FA               MOVW    R31:R30, R21:R20
   \   00000016   A505               LDD     R16, Z+45
   1086            UREG i=0;
   \   00000018   2466               CLR     R6
   1087          
   1088            if (c==_HTTP_PREP_SEND)
   \   0000001A   3105               CPI     R16, 21
   \   0000001C   F451               BRNE    ??HTTP_hook_DATA_TX_0
   1089            {
   1090              s->state=c=_HTTP_SEND;
   \   0000001E   E106               LDI     R16, 22
   \   00000020   A705               STD     Z+45, R16
   1091              s->sock.async_req=3;
   \   00000022   E003               LDI     R16, 3
   \   00000024   A702               STD     Z+42, R16
   1092            }
   1093            if (c<_HTTP_SEND) return 0; //Ничего не передаем, не тот режим
   1094            if (!cb->html) return 0; //Пока нет данных для передачи
   \                     ??HTTP_hook_DATA_TX_1:
   \   00000026   910D               LD      R16, X+
   \   00000028   911C               LD      R17, X
   \   0000002A   9711               SBIW    R27:R26, 1
   \   0000002C   2B01               OR      R16, R17
   \   0000002E   F481               BRNE    ??HTTP_hook_DATA_TX_2
   \   00000030   C002               RJMP    ??HTTP_hook_DATA_TX_3
   \                     ??HTTP_hook_DATA_TX_0:
   \   00000032   3106               CPI     R16, 22
   \   00000034   F7C0               BRCC    ??HTTP_hook_DATA_TX_1
   \                     ??HTTP_hook_DATA_TX_3:
   \   00000036   E000               LDI     R16, 0
   \   00000038   C04B               RJMP    ??HTTP_hook_DATA_TX_4
   1095          //    _print_num(_sData, (UINT16) data);
   1096           // _print_num(_sLen, (UINT16) len);
   1097          L_REPRINT_SN:
   1098            if ((c=IsGoodHTTPreq(s))!=_GET_z)
   1099            {
   1100              UREG i=cb->select_n;
   1101              i-=1;
   1102              if (i<8)
   1103              {
   1104                i2a(AUTH_A2+3*5,((char __eeprom *)(&OUTG_IP))[i]);
   1105              }
   1106            }
   1107            i2a(s->select_name,cb->select_n);
   1108          L_CHUNK:
   1109            //Генерируем кусочки
   1110            switch(cb->chunk_mode)
   1111            {
   1112            case ASCIIZ_CHUNK:
   1113              {
   1114                const char *chunk=cb->chunk_ram;
   1115                while((c=*chunk)!=0)
   1116                {
   1117          	if (i>=len)
   1118          	{
   1119          	  cb->chunk_ram=chunk;
   1120          	  goto L_EFRAME;
   1121          	}
   1122          	chunk++;
   1123          	if (data) *data++=c;
   1124          	i++;
   1125                }
   1126                if (!c) cb->chunk_mode=0;
   1127                cb->chunk_ram=chunk;
   1128                break;
   1129              }
   1130            case FLASH_ASCIIZ_CHUNK:
   1131              {
   1132                const char __flash *chunk=cb->chunk;
   1133                while((c=*chunk)!=0)
   1134                {
   1135          	if (i>=len)
   1136          	{
   1137          	  cb->chunk=chunk;
   1138          	  goto L_EFRAME;
   1139          	}
   1140          	chunk++;
   1141          	if (data) *data++=c;
   1142          	i++;
   1143                }
   1144                if (!c) cb->chunk_mode=0;
   1145                cb->chunk=chunk;
   1146                break;
   1147              }
   1148            case EEPROM_ASCIIZ_CHUNK:  
   1149              {
   1150                const char __eeprom *chunk=cb->chunk_eeprom;      
   1151                while((c=*chunk)!=0)
   1152                {
   1153          	if (i>=len)
   1154          	{
   1155          	  cb->chunk_eeprom=chunk;
   1156          	  goto L_EFRAME;
   1157          	}
   1158          	chunk++;
   1159          	if (data) *data++=c;
   1160          	i++;
   1161                }
   1162                if (!c) cb->chunk_mode=0;
   1163                cb->chunk_eeprom=chunk;
   1164                break;
   1165              }
   1166            default:
   1167              {
   1168                const char *chunk=cb->chunk_ram;
   1169                while(cb->chunk_mode)
   1170                {
   1171          	if (i>=len)
   1172          	{
   1173          	  cb->chunk_ram=chunk;
   1174          	  goto L_EFRAME;
   1175          	}
   1176          	c=*((char*)chunk++);
   1177          	if (data) *data++=c;
   1178          	i++;
   1179                }
   1180                cb->chunk_ram=chunk;
   1181                break;
   1182              }
   1183            case NO_CHUNK:
   1184              break;
   1185            }
   1186            //Разбираем пакованные данные
   1187            for(;;)
   1188            //while(i<len)
   1189            {
   1190              c=*cb->html;
   1191              if (c>0&&c<128)
   1192              {
   1193                if (i>=len) goto L_EFRAME;
   1194                cb->html++;
   1195                if (data) *data++=c;
   1196                i++;
   1197                continue;
   1198              }
   1199              cb->html++;
   1200          /*    if (c>=_sel0_&&c<=_sel9_)
   1201              {
   1202                //sel0-9
   1203                //chunk=" SELECTED>";
   1204                cb->chunk=__get_SELECTED();
   1205                cb->chunk_mode=FLASH_ASCIIZ_CHUNK;
   1206                {
   1207          	UREG m=255;
   1208          	switch(cb->select_n)
   1209          	{
   1210          	case 1:
   1211          	  m=RAM_SPEED;
   1212          	  break;
   1213          	case 2:
   1214          	  m=RAM_PARITY;
   1215          	  break;
   1216          	}
   1217          	if (m!=(UREG)(c-_sel0_)) cb->chunk=__get_ETAG();
   1218                }
   1219                goto L_CHUNK;;	    
   1220              }*/
   1221              if (c>=_radid0_&&c<=_radid8_)
   1222              {
   1223                
   1224                //radid0-9
   1225               switch (c)
   1226                {        
   1227                  case _radid0_: // выводим список радиостанций из EEPROM
   1228          //          cb->chunk_eeprom=(char const __eeprom *)&station_list[0];      
   1229          //          cb->chunk_mode=EEPROM_LIST_CHUNK;
   1230          //          goto L_CHUNK;        
   1231                    break;        
   1232                case _radid1_: // номер текущей станции
   1233                  {          
   1234                    i2a(AUTH_A2, s->statnum);
   1235                    cb->chunk_ram=AUTH_A2;
   1236                    cb->chunk_mode=ASCIIZ_CHUNK;
   1237                    goto L_CHUNK;
   1238                  }
   1239                case _radid2_: // station ID
   1240                  {          
   1241                    cb->chunk_eeprom=&station_list[s->statnum].LCD_ID[0];
   1242                    cb->chunk_mode=EEPROM_ASCIIZ_CHUNK;
   1243                    goto L_CHUNK;
   1244                  }  
   1245                case _radid3_: // IP1
   1246                  {          
   1247                    i2a(AUTH_A2, (UINT8) (station_list[s->statnum].IP));
   1248                    cb->chunk_ram=AUTH_A2;
   1249                    cb->chunk_mode=ASCIIZ_CHUNK;
   1250                    goto L_CHUNK;
   1251                  }    
   1252                case _radid4_: // IP2
   1253                  {          
   1254                    i2a(AUTH_A2, (UINT8) (station_list[s->statnum].IP>>8));
   1255                    cb->chunk_ram=AUTH_A2;
   1256                    cb->chunk_mode=ASCIIZ_CHUNK;
   1257                    goto L_CHUNK;
   1258                  }
   1259                case _radid5_: // IP3
   1260                  {          
   1261                    i2a(AUTH_A2, (UINT8) (station_list[s->statnum].IP >>16));
   1262                    cb->chunk_ram=AUTH_A2;
   1263                    cb->chunk_mode=ASCIIZ_CHUNK;
   1264                    goto L_CHUNK;
   1265                  }    
   1266                case _radid6_: // IP4
   1267                  {          
   1268                    i2a(AUTH_A2, (UINT8) (station_list[s->statnum].IP >> 24));
   1269                    cb->chunk_ram=AUTH_A2;
   1270                    cb->chunk_mode=ASCIIZ_CHUNK;
   1271                    goto L_CHUNK;
   1272                  }      
   1273                case _radid7_: // station port
   1274                  {          
   1275                    i2a(AUTH_A2, (UINT16) (station_list[s->statnum].port));
   1276                    cb->chunk_ram=AUTH_A2;
   1277                    cb->chunk_mode=ASCIIZ_CHUNK;
   1278                    goto L_CHUNK;
   1279                  }              
   1280                case _radid8_: // get request
   1281                  {
   1282                    cb->chunk_eeprom=&station_list[s->statnum].req[0];
   1283                    cb->chunk_mode=EEPROM_ASCIIZ_CHUNK;
   1284                    goto L_CHUNK;
   1285                  }
   1286                }
   1287                cb->chunk_ram=AUTH_A2+(c-_radid0_)*5;      
   1288                cb->chunk_mode=ASCIIZ_CHUNK;
   1289                goto L_CHUNK;
   1290              }
   1291              
   1292              if (c>=_vlanid0_&&c<=_vlanid9_)
   1293              {
   1294                //vlanid0-9
   1295                cb->chunk_ram=AUTH_A2+(c-_vlanid0_)*5;
   1296                cb->chunk_mode=ASCIIZ_CHUNK;
   1297                goto L_CHUNK;
   1298              }
   1299              switch(c)
   1300              {
   1301              case 0:
   1302                if (cb->stk)
   1303                {
   1304          	cb->html=cb->stk;
   1305          	cb->stk=NULL;
   1306          	continue;
   1307                }
   1308                else
   1309                {
   1310          	cb->html--; //Не убегаем с 0
   1311          	if (!data)
   1312          	{
   1313          	  //Все данные нам подтвердили, выходим
   1314          	  s->state=(UREG)-1;
   1315          	  CloseTCPsocket(&s->sock);
   1316          	  goto L_EFRAME;
   1317          	}
   1318                }
   1319                break;
   1320              default:
   1321                cb->chunk=CHUNKS[c-128];
   1322                cb->chunk_mode=FLASH_ASCIIZ_CHUNK;
   1323                goto L_CHUNK;
   1324          /*    case _binary_out_:
   1325                cb->chunk_ram=(char*)&http_sock._RS485_BUF;;
   1326                cb->chunk_mode=253;
   1327                goto L_CHUNK;*/
   1328              case _svn_revision_:
   1329                cb->chunk=__get_SVN_Revision();
   1330                cb->chunk_mode=FLASH_ASCIIZ_CHUNK;
   1331                goto L_CHUNK;
   1332              case _nonce_:
   1333                cb->chunk_ram=__get_AUTH_srv_nonce();
   1334                cb->chunk_mode=ASCIIZ_CHUNK;
   1335                goto L_CHUNK;
   1336              case _select_name_:
   1337                cb->select_n++;
   \                     ??HTTP_hook_DATA_TX_5:
   \   0000003A   01FD               MOVW    R31:R30, R27:R26
   \   0000003C   8107               LDD     R16, Z+7
   \   0000003E   9503               INC     R16
   \   00000040   8307               STD     Z+7, R16
   1338                cb->chunk_ram=s->select_name;
   \   00000042   018C               MOVW    R17:R16, R25:R24
   \   00000044   5B0D               SUBI    R16, 189
   \   00000046   4F1F               SBCI    R17, 255
   \   00000048   8302               STD     Z+2, R16
   \   0000004A   8313               STD     Z+3, R17
   1339                cb->chunk_mode=ASCIIZ_CHUNK;
   \                     ??HTTP_hook_DATA_TX_6:
   \   0000004C   EF0F               LDI     R16, 255
   \   0000004E   8306               STD     Z+6, R16
   1340                goto L_REPRINT_SN;
   \                     ??HTTP_hook_DATA_TX_2:
   \   00000050   01FC               MOVW    R31:R30, R25:R24
   \   00000052   ....               RCALL   IsGoodHTTPreq
   \   00000054   3002               CPI     R16, 2
   \   00000056   F079               BREQ    ??HTTP_hook_DATA_TX_7
   \   00000058   01FD               MOVW    R31:R30, R27:R26
   \   0000005A   8107               LDD     R16, Z+7
   \   0000005C   950A               DEC     R16
   \   0000005E   3008               CPI     R16, 8
   \   00000060   F450               BRCC    ??HTTP_hook_DATA_TX_7
   \   00000062   ....               LDI     R20, LOW((MASK_IP_EEPROM + 8))
   \   00000064   ....               LDI     R21, HIGH((MASK_IP_EEPROM + 8))
   \   00000066   E010               LDI     R17, 0
   \   00000068   0F40               ADD     R20, R16
   \   0000006A   1F51               ADC     R21, R17
   \   0000006C   ........           CALL    __eeget8_16
   \   00000070   ....               LDI     R30, LOW((http_sock + 188))
   \   00000072   ....               LDI     R31, HIGH((http_sock + 188))
   \   00000074   ....               RCALL   i2a
   \                     ??HTTP_hook_DATA_TX_7:
   \   00000076   01FD               MOVW    R31:R30, R27:R26
   \   00000078   8107               LDD     R16, Z+7
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   01FC               MOVW    R31:R30, R25:R24
   \   0000007E   5BED               SUBI    R30, 189
   \   00000080   4FFF               SBCI    R31, 255
   \   00000082   ....               RCALL   i2a
   \   00000084   01FD               MOVW    R31:R30, R27:R26
   \   00000086   8106               LDD     R16, Z+6
   \   00000088   5F0D               SUBI    R16, 253
   \   0000008A   F409               BRNE    $+2+2
   \   0000008C   C0C5               RJMP    ??HTTP_hook_DATA_TX_8
   \   0000008E   950A               DEC     R16
   \   00000090   F409               BRNE    $+2+2
   \   00000092   C162               RJMP    ??HTTP_hook_DATA_TX_9
   \   00000094   950A               DEC     R16
   \   00000096   F021               BREQ    ??HTTP_hook_DATA_TX_10
   \   00000098   950A               DEC     R16
   \   0000009A   F409               BRNE    $+2+2
   \   0000009C   C074               RJMP    ??HTTP_hook_DATA_TX_11
   \   0000009E   C04F               RJMP    ??HTTP_hook_DATA_TX_12
   \                     ??HTTP_hook_DATA_TX_10:
   \   000000A0   2FFB               MOV     R31, R27
   \   000000A2   8122               LDD     R18, Z+2
   \   000000A4   8133               LDD     R19, Z+3
   \   000000A6   C009               RJMP    ??HTTP_hook_DATA_TX_13
   \                     ??HTTP_hook_DATA_TX_14:
   \   000000A8   5F2F               SUBI    R18, 255
   \   000000AA   4F3F               SBCI    R19, 255
   \   000000AC   2D14               MOV     R17, R4
   \   000000AE   2915               OR      R17, R5
   \   000000B0   F019               BREQ    ??HTTP_hook_DATA_TX_15
   \   000000B2   01F2               MOVW    R31:R30, R5:R4
   \   000000B4   9301               ST      Z+, R16
   \   000000B6   012F               MOVW    R5:R4, R31:R30
   \                     ??HTTP_hook_DATA_TX_15:
   \   000000B8   9463               INC     R6
   \                     ??HTTP_hook_DATA_TX_13:
   \   000000BA   01F9               MOVW    R31:R30, R19:R18
   \   000000BC   8110               LD      R17, Z
   \   000000BE   2F01               MOV     R16, R17
   \   000000C0   2311               TST     R17
   \   000000C2   F069               BREQ    ??HTTP_hook_DATA_TX_16
   \   000000C4   1467               CP      R6, R7
   \   000000C6   F380               BRCS    ??HTTP_hook_DATA_TX_14
   \                     ??HTTP_hook_DATA_TX_17:
   \   000000C8   01FD               MOVW    R31:R30, R27:R26
   \                     ??HTTP_hook_DATA_TX_18:
   \   000000CA   8322               STD     Z+2, R18
   \   000000CC   8333               STD     Z+3, R19
   1341              case _check_eeprom_restored_:
   1342                /*if (!EEPROM_RESTORED) */ continue;
   1343                /* c=_root_level1_+3; */
   1344              case _root_level1_:
   1345              case _root_level2_:
   1346              case _root_level3_:
   1347                cb->stk=cb->html;
   1348                cb->html=HTTP_LEVELS[c-_root_level1_];
   1349                continue;
   1350              case _voltage_:
   1351                cb->chunk_ram=AUTH_A2+0;
   1352                cb->select_n++;
   1353                cb->chunk_mode=ASCIIZ_CHUNK;
   1354                goto L_REPRINT_SN;
   1355              case _logval_:
   1356                cb->chunk_ram=AUTH_A2+5;
   1357                cb->select_n++;
   1358                cb->chunk_mode=ASCIIZ_CHUNK;
   1359                goto L_REPRINT_SN;
   1360              case _dec_select_name_:
   1361                cb->select_n--;
   1362                goto L_REPRINT_SN;
   1363          /*    case _is_checked_:
   1364                cb->chunk=__get_CHECKED();
   1365                cb->chunk_mode=FLASH_ASCIIZ_CHUNK;
   1366                switch(cb->select_n)
   1367                {
   1368                case 4:
   1369          	if (EE_ENABLE_MODBUS) goto L_CHUNK;
   1370          	break;
   1371                case 5:
   1372          	if (EE_ENABLE_AJAX) goto L_CHUNK;
   1373          	break;
   1374                }
   1375                cb->chunk=__get_ETAG();
   1376                goto L_CHUNK;*/
   1377          /*    case _on_off_:
   1378                {
   1379          	UINT16 m;
   1380          	UREG i, mask;
   1381          	i=cb->select_n-1;
   1382          	m=_fastmask(i);
   1383          	mask=m>>8;
   1384          	cb->chunk=OnOff_P(RAM_BITMAP[__multiply_unsigned(m,32)>>8]&mask);
   1385                }
   1386                cb->chunk_mode=FLASH_ASCIIZ_CHUNK;
   1387                goto L_CHUNK;*/
   1388              }
   1389              break;
   1390            }
   1391          L_EFRAME:
   1392          //  _print_num(_si, (UINT16)i); 
   1393          //  _print_rn();
   1394            return i;
   \                     ??HTTP_hook_DATA_TX_19:
   \   000000CE   2D06               MOV     R16, R6
   \                     ??HTTP_hook_DATA_TX_4:
   \   000000D0   9189               LD      R24, Y+
   \   000000D2   9199               LD      R25, Y+
   \   000000D4   9049               LD      R4, Y+
   \   000000D6   9059               LD      R5, Y+
   \   000000D8   9069               LD      R6, Y+
   \   000000DA   9079               LD      R7, Y+
   \   000000DC   9508               RET
   \                     ??HTTP_hook_DATA_TX_16:
   \   000000DE   E000               LDI     R16, 0
   \   000000E0   01FD               MOVW    R31:R30, R27:R26
   \   000000E2   8306               STD     Z+6, R16
   \                     ??HTTP_hook_DATA_TX_20:
   \   000000E4   8322               STD     Z+2, R18
   \   000000E6   8333               STD     Z+3, R19
   \   000000E8   C04E               RJMP    ??HTTP_hook_DATA_TX_11
   \                     ??HTTP_hook_DATA_TX_21:
   \   000000EA   5F2F               SUBI    R18, 255
   \   000000EC   4F3F               SBCI    R19, 255
   \   000000EE   2D14               MOV     R17, R4
   \   000000F0   2915               OR      R17, R5
   \   000000F2   F019               BREQ    ??HTTP_hook_DATA_TX_22
   \   000000F4   01F2               MOVW    R31:R30, R5:R4
   \   000000F6   9301               ST      Z+, R16
   \   000000F8   012F               MOVW    R5:R4, R31:R30
   \                     ??HTTP_hook_DATA_TX_22:
   \   000000FA   9463               INC     R6
   \                     ??HTTP_hook_DATA_TX_23:
   \   000000FC   01F9               MOVW    R31:R30, R19:R18
   \   000000FE   9114               LPM     R17, Z
   \   00000100   2F01               MOV     R16, R17
   \   00000102   2311               TST     R17
   \   00000104   F361               BREQ    ??HTTP_hook_DATA_TX_16
   \   00000106   1467               CP      R6, R7
   \   00000108   F380               BRCS    ??HTTP_hook_DATA_TX_21
   \   0000010A   CFDE               RJMP    ??HTTP_hook_DATA_TX_17
   \                     ??HTTP_hook_DATA_TX_24:
   \   0000010C   5F4F               SUBI    R20, 255
   \   0000010E   4F5F               SBCI    R21, 255
   \   00000110   2D14               MOV     R17, R4
   \   00000112   2915               OR      R17, R5
   \   00000114   F019               BREQ    ??HTTP_hook_DATA_TX_25
   \   00000116   01F2               MOVW    R31:R30, R5:R4
   \   00000118   9301               ST      Z+, R16
   \   0000011A   012F               MOVW    R5:R4, R31:R30
   \                     ??HTTP_hook_DATA_TX_25:
   \   0000011C   9463               INC     R6
   \                     ??HTTP_hook_DATA_TX_26:
   \   0000011E   ........           CALL    __eeget8_16
   \   00000122   2300               TST     R16
   \   00000124   F031               BREQ    ??HTTP_hook_DATA_TX_27
   \   00000126   1467               CP      R6, R7
   \   00000128   F388               BRCS    ??HTTP_hook_DATA_TX_24
   \   0000012A   01FD               MOVW    R31:R30, R27:R26
   \   0000012C   8342               STD     Z+2, R20
   \   0000012E   8353               STD     Z+3, R21
   \   00000130   CFCE               RJMP    ??HTTP_hook_DATA_TX_19
   \                     ??HTTP_hook_DATA_TX_27:
   \   00000132   E000               LDI     R16, 0
   \   00000134   01FD               MOVW    R31:R30, R27:R26
   \   00000136   8306               STD     Z+6, R16
   \   00000138   8342               STD     Z+2, R20
   \   0000013A   8353               STD     Z+3, R21
   \   0000013C   C024               RJMP    ??HTTP_hook_DATA_TX_11
   \                     ??HTTP_hook_DATA_TX_12:
   \   0000013E   8122               LDD     R18, Z+2
   \   00000140   8133               LDD     R19, Z+3
   \   00000142   C00A               RJMP    ??HTTP_hook_DATA_TX_28
   \                     ??HTTP_hook_DATA_TX_29:
   \   00000144   01F9               MOVW    R31:R30, R19:R18
   \   00000146   9101               LD      R16, Z+
   \   00000148   019F               MOVW    R19:R18, R31:R30
   \   0000014A   2D14               MOV     R17, R4
   \   0000014C   2915               OR      R17, R5
   \   0000014E   F019               BREQ    ??HTTP_hook_DATA_TX_30
   \   00000150   01F2               MOVW    R31:R30, R5:R4
   \   00000152   9301               ST      Z+, R16
   \   00000154   012F               MOVW    R5:R4, R31:R30
   \                     ??HTTP_hook_DATA_TX_30:
   \   00000156   9463               INC     R6
   \                     ??HTTP_hook_DATA_TX_28:
   \   00000158   01FD               MOVW    R31:R30, R27:R26
   \   0000015A   8106               LDD     R16, Z+6
   \   0000015C   2300               TST     R16
   \   0000015E   F211               BREQ    ??HTTP_hook_DATA_TX_20
   \   00000160   1467               CP      R6, R7
   \   00000162   F380               BRCS    ??HTTP_hook_DATA_TX_29
   \   00000164   CFB2               RJMP    ??HTTP_hook_DATA_TX_18
   \                     ??HTTP_hook_DATA_TX_31:
   \   00000166   1467               CP      R6, R7
   \   00000168   F008               BRCS    $+2+2
   \   0000016A   CFB1               RJMP    ??HTTP_hook_DATA_TX_19
   \   0000016C   912D               LD      R18, X+
   \   0000016E   913C               LD      R19, X
   \   00000170   5F2F               SUBI    R18, 255
   \   00000172   4F3F               SBCI    R19, 255
   \   00000174   933C               ST      X, R19
   \   00000176   932E               ST      -X, R18
   \   00000178   2D14               MOV     R17, R4
   \   0000017A   2915               OR      R17, R5
   \   0000017C   F019               BREQ    ??HTTP_hook_DATA_TX_32
   \   0000017E   01F2               MOVW    R31:R30, R5:R4
   \   00000180   9301               ST      Z+, R16
   \   00000182   012F               MOVW    R5:R4, R31:R30
   \                     ??HTTP_hook_DATA_TX_32:
   \   00000184   9463               INC     R6
   \                     ??HTTP_hook_DATA_TX_11:
   \   00000186   91ED               LD      R30, X+
   \   00000188   91FC               LD      R31, X
   \   0000018A   9711               SBIW    R27:R26, 1
   \   0000018C   9104               LPM     R16, Z
   \   0000018E   2300               TST     R16
   \   00000190   F011               BREQ    ??HTTP_hook_DATA_TX_33
   \   00000192   3800               CPI     R16, 128
   \   00000194   F340               BRCS    ??HTTP_hook_DATA_TX_31
   \                     ??HTTP_hook_DATA_TX_33:
   \   00000196   912D               LD      R18, X+
   \   00000198   913C               LD      R19, X
   \   0000019A   5F2F               SUBI    R18, 255
   \   0000019C   4F3F               SBCI    R19, 255
   \   0000019E   933C               ST      X, R19
   \   000001A0   932E               ST      -X, R18
   \   000001A2   3D04               CPI     R16, 212
   \   000001A4   F408               BRCC    $+2+2
   \   000001A6   C08D               RJMP    ??HTTP_hook_DATA_TX_34
   \   000001A8   3D0D               CPI     R16, 221
   \   000001AA   F008               BRCS    $+2+2
   \   000001AC   C08A               RJMP    ??HTTP_hook_DATA_TX_34
   \   000001AE   2F10               MOV     R17, R16
   \   000001B0   5D15               SUBI    R17, 213
   \   000001B2   F099               BREQ    ??HTTP_hook_DATA_TX_35
   \   000001B4   951A               DEC     R17
   \   000001B6   F109               BREQ    ??HTTP_hook_DATA_TX_36
   \   000001B8   951A               DEC     R17
   \   000001BA   F191               BREQ    ??HTTP_hook_DATA_TX_37
   \   000001BC   951A               DEC     R17
   \   000001BE   F1E9               BREQ    ??HTTP_hook_DATA_TX_38
   \   000001C0   951A               DEC     R17
   \   000001C2   F409               BRNE    $+2+2
   \   000001C4   C048               RJMP    ??HTTP_hook_DATA_TX_39
   \   000001C6   951A               DEC     R17
   \   000001C8   F409               BRNE    $+2+2
   \   000001CA   C053               RJMP    ??HTTP_hook_DATA_TX_40
   \   000001CC   951A               DEC     R17
   \   000001CE   F409               BRNE    $+2+2
   \   000001D0   C05E               RJMP    ??HTTP_hook_DATA_TX_41
   \   000001D2   951A               DEC     R17
   \   000001D4   F409               BRNE    $+2+2
   \   000001D6   C068               RJMP    ??HTTP_hook_DATA_TX_42
   \   000001D8   C06A               RJMP    ??HTTP_hook_DATA_TX_43
   \                     ??HTTP_hook_DATA_TX_35:
   \   000001DA   01FC               MOVW    R31:R30, R25:R24
   \   000001DC   51E3               SUBI    R30, 19
   \   000001DE   4FFF               SBCI    R31, 255
   \   000001E0   8100               LD      R16, Z
   \                     ??HTTP_hook_DATA_TX_44:
   \   000001E2   E010               LDI     R17, 0
   \                     ??HTTP_hook_DATA_TX_45:
   \   000001E4   ....               LDI     R30, LOW((http_sock + 173))
   \   000001E6   ....               LDI     R31, HIGH((http_sock + 173))
   \   000001E8   ....               RCALL   i2a
   \   000001EA   ....               LDI     R16, LOW((http_sock + 173))
   \   000001EC   ....               LDI     R17, HIGH((http_sock + 173))
   \                     ??HTTP_hook_DATA_TX_46:
   \   000001EE   01FD               MOVW    R31:R30, R27:R26
   \   000001F0   8302               STD     Z+2, R16
   \   000001F2   8313               STD     Z+3, R17
   \                     ??HTTP_hook_DATA_TX_47:
   \   000001F4   EF0F               LDI     R16, 255
   \   000001F6   8306               STD     Z+6, R16
   \   000001F8   CF53               RJMP    ??HTTP_hook_DATA_TX_10
   \                     ??HTTP_hook_DATA_TX_36:
   \   000001FA   ....               LDI     R16, LOW((station_list + 38))
   \   000001FC   ....               LDI     R17, HIGH((station_list + 38))
   \                     ??HTTP_hook_DATA_TX_48:
   \   000001FE   01FC               MOVW    R31:R30, R25:R24
   \   00000200   51E3               SUBI    R30, 19
   \   00000202   4FFF               SBCI    R31, 255
   \   00000204   8130               LD      R19, Z
   \   00000206   E326               LDI     R18, 54
   \   00000208   9F32               MUL     R19, R18
   \   0000020A   0D00               ADD     R16, R0
   \   0000020C   1D11               ADC     R17, R1
   \   0000020E   01FD               MOVW    R31:R30, R27:R26
   \   00000210   8302               STD     Z+2, R16
   \   00000212   8313               STD     Z+3, R17
   \   00000214   EF0D               LDI     R16, 253
   \   00000216   8306               STD     Z+6, R16
   \                     ??HTTP_hook_DATA_TX_8:
   \   00000218   2FFB               MOV     R31, R27
   \   0000021A   8142               LDD     R20, Z+2
   \   0000021C   8153               LDD     R21, Z+3
   \   0000021E   CF7F               RJMP    ??HTTP_hook_DATA_TX_26
   \                     ??HTTP_hook_DATA_TX_37:
   \   00000220   01FC               MOVW    R31:R30, R25:R24
   \   00000222   51E3               SUBI    R30, 19
   \   00000224   4FFF               SBCI    R31, 255
   \   00000226   8110               LD      R17, Z
   \   00000228   E306               LDI     R16, 54
   \   0000022A   9F10               MUL     R17, R16
   \   0000022C   ....               LDI     R20, LOW(station_list)
   \   0000022E   ....               LDI     R21, (station_list) >> 8
   \   00000230   0D40               ADD     R20, R0
   \   00000232   1D51               ADC     R21, R1
   \   00000234   ........           CALL    __eeget32_16
   \   00000238   CFD4               RJMP    ??HTTP_hook_DATA_TX_44
   \                     ??HTTP_hook_DATA_TX_38:
   \   0000023A   01FC               MOVW    R31:R30, R25:R24
   \   0000023C   51E3               SUBI    R30, 19
   \   0000023E   4FFF               SBCI    R31, 255
   \   00000240   8110               LD      R17, Z
   \   00000242   E306               LDI     R16, 54
   \   00000244   9F10               MUL     R17, R16
   \   00000246   ....               LDI     R20, LOW(station_list)
   \   00000248   ....               LDI     R21, (station_list) >> 8
   \   0000024A   0D40               ADD     R20, R0
   \   0000024C   1D51               ADC     R21, R1
   \   0000024E   ........           CALL    __eeget32_16
   \   00000252   2F01               MOV     R16, R17
   \   00000254   CFC6               RJMP    ??HTTP_hook_DATA_TX_44
   \                     ??HTTP_hook_DATA_TX_39:
   \   00000256   01FC               MOVW    R31:R30, R25:R24
   \   00000258   51E3               SUBI    R30, 19
   \   0000025A   4FFF               SBCI    R31, 255
   \   0000025C   8110               LD      R17, Z
   \   0000025E   E306               LDI     R16, 54
   \   00000260   9F10               MUL     R17, R16
   \   00000262   ....               LDI     R20, LOW(station_list)
   \   00000264   ....               LDI     R21, (station_list) >> 8
   \   00000266   0D40               ADD     R20, R0
   \   00000268   1D51               ADC     R21, R1
   \   0000026A   ........           CALL    __eeget32_16
   \   0000026E   2F02               MOV     R16, R18
   \   00000270   CFB8               RJMP    ??HTTP_hook_DATA_TX_44
   \                     ??HTTP_hook_DATA_TX_40:
   \   00000272   01FC               MOVW    R31:R30, R25:R24
   \   00000274   51E3               SUBI    R30, 19
   \   00000276   4FFF               SBCI    R31, 255
   \   00000278   8110               LD      R17, Z
   \   0000027A   E306               LDI     R16, 54
   \   0000027C   9F10               MUL     R17, R16
   \   0000027E   ....               LDI     R20, LOW(station_list)
   \   00000280   ....               LDI     R21, (station_list) >> 8
   \   00000282   0D40               ADD     R20, R0
   \   00000284   1D51               ADC     R21, R1
   \   00000286   ........           CALL    __eeget32_16
   \   0000028A   2F03               MOV     R16, R19
   \   0000028C   CFAA               RJMP    ??HTTP_hook_DATA_TX_44
   \                     ??HTTP_hook_DATA_TX_41:
   \   0000028E   ....               LDI     R20, LOW((station_list + 4))
   \   00000290   ....               LDI     R21, HIGH((station_list + 4))
   \   00000292   01FC               MOVW    R31:R30, R25:R24
   \   00000294   51E3               SUBI    R30, 19
   \   00000296   4FFF               SBCI    R31, 255
   \   00000298   8110               LD      R17, Z
   \   0000029A   E306               LDI     R16, 54
   \   0000029C   9F10               MUL     R17, R16
   \   0000029E   0D40               ADD     R20, R0
   \   000002A0   1D51               ADC     R21, R1
   \   000002A2   ........           CALL    __eeget16_16
   \   000002A6   CF9E               RJMP    ??HTTP_hook_DATA_TX_45
   \                     ??HTTP_hook_DATA_TX_42:
   \   000002A8   ....               LDI     R16, LOW((station_list + 6))
   \   000002AA   ....               LDI     R17, HIGH((station_list + 6))
   \   000002AC   CFA8               RJMP    ??HTTP_hook_DATA_TX_48
   \                     ??HTTP_hook_DATA_TX_43:
   \   000002AE   ....               LDI     R18, LOW((http_sock - 887))
   \   000002B0   ....               LDI     R19, HIGH((http_sock - 887))
   \                     ??HTTP_hook_DATA_TX_49:
   \   000002B2   E015               LDI     R17, 5
   \   000002B4   9F01               MUL     R16, R17
   \   000002B6   0D20               ADD     R18, R0
   \   000002B8   1D31               ADC     R19, R1
   \   000002BA   01FD               MOVW    R31:R30, R27:R26
   \   000002BC   8322               STD     Z+2, R18
   \   000002BE   8333               STD     Z+3, R19
   \   000002C0   CF99               RJMP    ??HTTP_hook_DATA_TX_47
   \                     ??HTTP_hook_DATA_TX_34:
   \   000002C2   3E07               CPI     R16, 231
   \   000002C4   F028               BRCS    ??HTTP_hook_DATA_TX_50
   \   000002C6   3F01               CPI     R16, 241
   \   000002C8   F418               BRCC    ??HTTP_hook_DATA_TX_50
   \   000002CA   ....               LDI     R18, LOW((http_sock - 982))
   \   000002CC   ....               LDI     R19, HIGH((http_sock - 982))
   \   000002CE   CFF1               RJMP    ??HTTP_hook_DATA_TX_49
   \                     ??HTTP_hook_DATA_TX_50:
   \   000002D0   2F10               MOV     R17, R16
   \   000002D2   5F12               SUBI    R17, 242
   \   000002D4   F409               BRNE    $+2+2
   \   000002D6   CEB1               RJMP    ??HTTP_hook_DATA_TX_5
   \   000002D8   951A               DEC     R17
   \   000002DA   F409               BRNE    $+2+2
   \   000002DC   C063               RJMP    ??HTTP_hook_DATA_TX_51
   \   000002DE   5011               SUBI    R17, 1
   \   000002E0   F178               BRCS    ??HTTP_hook_DATA_TX_52
   \   000002E2   5013               SUBI    R17, 3
   \   000002E4   F408               BRCC    $+2+2
   \   000002E6   C041               RJMP    ??HTTP_hook_DATA_TX_53
   \   000002E8   F409               BRNE    $+2+2
   \   000002EA   CF4D               RJMP    ??HTTP_hook_DATA_TX_11
   \   000002EC   951A               DEC     R17
   \   000002EE   F409               BRNE    $+2+2
   \   000002F0   C056               RJMP    ??HTTP_hook_DATA_TX_54
   \   000002F2   951A               DEC     R17
   \   000002F4   F409               BRNE    $+2+2
   \   000002F6   C04A               RJMP    ??HTTP_hook_DATA_TX_55
   \   000002F8   5012               SUBI    R17, 2
   \   000002FA   F1A1               BREQ    ??HTTP_hook_DATA_TX_56
   \   000002FC   951A               DEC     R17
   \   000002FE   F181               BREQ    ??HTTP_hook_DATA_TX_57
   \   00000300   5014               SUBI    R17, 4
   \   00000302   F4F1               BRNE    ??HTTP_hook_DATA_TX_52
   \   00000304   01FD               MOVW    R31:R30, R27:R26
   \   00000306   8104               LDD     R16, Z+4
   \   00000308   8115               LDD     R17, Z+5
   \   0000030A   2B01               OR      R16, R17
   \   0000030C   F049               BREQ    ??HTTP_hook_DATA_TX_58
   \   0000030E   8104               LDD     R16, Z+4
   \   00000310   930D               ST      X+, R16
   \   00000312   931C               ST      X, R17
   \   00000314   9711               SBIW    R27:R26, 1
   \   00000316   E000               LDI     R16, 0
   \   00000318   2FFB               MOV     R31, R27
   \   0000031A   8304               STD     Z+4, R16
   \   0000031C   8305               STD     Z+5, R16
   \   0000031E   CF33               RJMP    ??HTTP_hook_DATA_TX_11
   \                     ??HTTP_hook_DATA_TX_58:
   \   00000320   910D               LD      R16, X+
   \   00000322   911C               LD      R17, X
   \   00000324   5001               SUBI    R16, 1
   \   00000326   4010               SBCI    R17, 0
   \   00000328   931C               ST      X, R17
   \   0000032A   930E               ST      -X, R16
   \   0000032C   2845               OR      R4, R5
   \   0000032E   F009               BREQ    $+2+2
   \   00000330   CECE               RJMP    ??HTTP_hook_DATA_TX_19
   \   00000332   964B               ADIW    R25:R24, 27
   \   00000334   01FC               MOVW    R31:R30, R25:R24
   \   00000336   EF0F               LDI     R16, 255
   \   00000338   8B02               STD     Z+18, R16
   \   0000033A   E005               LDI     R16, 5
   \   0000033C   8300               ST      Z, R16
   \   0000033E   CEC7               RJMP    ??HTTP_hook_DATA_TX_19
   \                     ??HTTP_hook_DATA_TX_52:
   \   00000340   E012               LDI     R17, 2
   \   00000342   9F01               MUL     R16, R17
   \   00000344   01F0               MOVW    R31:R30, R1:R0
   \   00000346   ....               SUBI    R30, LOW((-(CHUNKS - 256) & 0xFFFF))
   \   00000348   ....               SBCI    R31, HIGH((-(CHUNKS - 256) & 0xFFFF))
   \   0000034A   9105               LPM     R16, Z+
   \   0000034C   9114               LPM     R17, Z
   \                     ??HTTP_hook_DATA_TX_59:
   \   0000034E   01FD               MOVW    R31:R30, R27:R26
   \   00000350   8302               STD     Z+2, R16
   \   00000352   8313               STD     Z+3, R17
   \   00000354   EF0E               LDI     R16, 254
   \   00000356   8306               STD     Z+6, R16
   \                     ??HTTP_hook_DATA_TX_9:
   \   00000358   2FFB               MOV     R31, R27
   \   0000035A   8122               LDD     R18, Z+2
   \   0000035C   8133               LDD     R19, Z+3
   \   0000035E   CECE               RJMP    ??HTTP_hook_DATA_TX_23
   \                     ??HTTP_hook_DATA_TX_57:
   \   00000360   ....               RCALL   __get_SVN_Revision
   \   00000362   CFF5               RJMP    ??HTTP_hook_DATA_TX_59
   \                     ??HTTP_hook_DATA_TX_56:
   \   00000364   ....               LDI     R16, LOW((http_sock + 140))
   \   00000366   ....               LDI     R17, HIGH((http_sock + 140))
   \   00000368   CF42               RJMP    ??HTTP_hook_DATA_TX_46
   \                     ??HTTP_hook_DATA_TX_53:
   \   0000036A   912D               LD      R18, X+
   \   0000036C   913C               LD      R19, X
   \   0000036E   9711               SBIW    R27:R26, 1
   \   00000370   01FD               MOVW    R31:R30, R27:R26
   \   00000372   8324               STD     Z+4, R18
   \   00000374   8335               STD     Z+5, R19
   \   00000376   E012               LDI     R17, 2
   \   00000378   9F01               MUL     R16, R17
   \   0000037A   01F0               MOVW    R31:R30, R1:R0
   \   0000037C   ....               SUBI    R30, LOW((-(HTTP_LEVELS - 488) & 0xFFFF))
   \   0000037E   ....               SBCI    R31, HIGH((-(HTTP_LEVELS - 488) & 0xFFFF))
   \   00000380   9105               LPM     R16, Z+
   \   00000382   9114               LPM     R17, Z
   \   00000384   930D               ST      X+, R16
   \   00000386   931C               ST      X, R17
   \   00000388   9711               SBIW    R27:R26, 1
   \   0000038A   CEFD               RJMP    ??HTTP_hook_DATA_TX_11
   \                     ??HTTP_hook_DATA_TX_55:
   \   0000038C   ....               LDI     R16, LOW((http_sock + 173))
   \   0000038E   ....               LDI     R17, HIGH((http_sock + 173))
   \                     ??HTTP_hook_DATA_TX_60:
   \   00000390   01FD               MOVW    R31:R30, R27:R26
   \   00000392   8302               STD     Z+2, R16
   \   00000394   8313               STD     Z+3, R17
   \   00000396   8107               LDD     R16, Z+7
   \   00000398   9503               INC     R16
   \   0000039A   8307               STD     Z+7, R16
   \   0000039C   CE57               RJMP    ??HTTP_hook_DATA_TX_6
   \                     ??HTTP_hook_DATA_TX_54:
   \   0000039E   ....               LDI     R16, LOW((http_sock + 178))
   \   000003A0   ....               LDI     R17, HIGH((http_sock + 178))
   \   000003A2   CFF6               RJMP    ??HTTP_hook_DATA_TX_60
   \                     ??HTTP_hook_DATA_TX_51:
   \   000003A4   01FD               MOVW    R31:R30, R27:R26
   \   000003A6   8107               LDD     R16, Z+7
   \   000003A8   950A               DEC     R16
   \   000003AA   8307               STD     Z+7, R16
   \   000003AC   CE51               RJMP    ??HTTP_hook_DATA_TX_2
   1395          }
   1396          

   \                                 In  segment CODE, align 2, keep-with-next
   1397          __x UREG HTTP_hook(UREG state, UREG len, UINT8 *data, TCP_SOCK *_s)
   \                     HTTP_hook:
   1398          {
   \   00000000   2F40               MOV     R20, R16
   \   00000002   2F61               MOV     R22, R17
   \   00000004   018D               MOVW    R17:R16, R27:R26
   \   00000006   01D9               MOVW    R27:R26, R19:R18
   1399            HTTP_SOCK *s=(HTTP_SOCK *)_s;
   1400            HTTP_CB *cb;
   1401            UREG i;
   1402            UREG j;
   1403            switch(state)
   \   00000008   954A               DEC     R20
   \   0000000A   F0B9               BREQ    ??HTTP_hook_0
   \   0000000C   5042               SUBI    R20, 2
   \   0000000E   F109               BREQ    ??HTTP_hook_1
   \   00000010   954A               DEC     R20
   \   00000012   F099               BREQ    ??HTTP_hook_0
   \   00000014   954A               DEC     R20
   \   00000016   F1C9               BREQ    ??HTTP_hook_2
   \   00000018   954A               DEC     R20
   \   0000001A   F1C9               BREQ    ??HTTP_hook_3
   \   0000001C   954A               DEC     R20
   \   0000001E   F191               BREQ    ??HTTP_hook_4
   \   00000020   954A               DEC     R20
   \   00000022   F1E1               BREQ    ??HTTP_hook_5
   \   00000024   954A               DEC     R20
   \   00000026   F111               BREQ    ??HTTP_hook_6
   \   00000028   954A               DEC     R20
   \   0000002A   F1F9               BREQ    ??HTTP_hook_7
   \   0000002C   954A               DEC     R20
   \   0000002E   F409               BRNE    $+2+2
   \   00000030   C04F               RJMP    ??HTTP_hook_8
   \   00000032   954A               DEC     R20
   \   00000034   F409               BRNE    $+2+2
   \   00000036   C054               RJMP    ??HTTP_hook_9
   \   00000038   C03C               RJMP    ??HTTP_hook_10
   1404            {
   1405            case TCP_EVENT_CONREQ:
   1406              j=http_q_c_pos; //А сколько народу у нас в ожидании?
   \                     ??HTTP_hook_0:
   \   0000003A   9100....           LDS     R16, http_q_c_pos
   1407              goto L1;
   1408            case TCP_EVENT_CLOSE:
   1409              if ((s->state==(UREG)-1)&&(IsGoodHTTPreq(s)==_POST_r)&&(s->af.AUTH_MODE))
   1410              {
   1411                __disable_interrupt();
   1412                for(;;); //Reboot device
   1413              }
   1414            case TCP_EVENT_ABORT:
   1415              j=http_q_c_pos;
   1416            L1:
   1417              {
   1418                char *p=(char*)&s->state;
   \   0000003E   01FD               MOVW    R31:R30, R27:R26
   \   00000040   96BD               ADIW    R31:R30, 45
   1419                i=sizeof(_HTTP_CONTROL)+sizeof(s->state);
   \   00000042   E31E               LDI     R17, 62
   \   00000044   E020               LDI     R18, 0
   1420                do
   1421                {
   1422          	*p++=0;
   \                     ??HTTP_hook_11:
   \   00000046   9321               ST      Z+, R18
   1423                }
   1424                while(--i);
   \   00000048   951A               DEC     R17
   \   0000004A   F7E9               BRNE    ??HTTP_hook_11
   1425                //do *p++=0; while(--i);
   1426                s->af.AUTH_PRESENT=0;
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   A724               STD     Z+44, R18
   1427              }
   1428              return j; //Количество ожидающих клиентов
   \   00000050   9508               RET
   \                     ??HTTP_hook_1:
   \   00000052   01F9               MOVW    R31:R30, R19:R18
   \   00000054   A505               LDD     R16, Z+45
   \   00000056   3F0F               CPI     R16, 255
   \   00000058   F781               BRNE    ??HTTP_hook_0
   \   0000005A   ....               RCALL   IsGoodHTTPreq
   \   0000005C   3008               CPI     R16, 8
   \   0000005E   F769               BRNE    ??HTTP_hook_0
   \   00000060   01FD               MOVW    R31:R30, R27:R26
   \   00000062   A503               LDD     R16, Z+43
   \   00000064   2300               TST     R16
   \   00000066   F349               BREQ    ??HTTP_hook_0
   \   00000068   94F8               CLI
   \                     ??HTTP_hook_12:
   \   0000006A   CFFF               RJMP    ??HTTP_hook_12
   1429              //s->content_length=(UINT16)-1;
   1430              //break;
   1431            case TCP_EVENT_ASYNC_REQ:
   1432              i=s->sock.async_req;
   \                     ??HTTP_hook_6:
   \   0000006C   01F9               MOVW    R31:R30, R19:R18
   \   0000006E   A542               LDD     R20, Z+42
   1433              s->sock.async_req=0;
   \   00000070   E000               LDI     R16, 0
   \   00000072   A702               STD     Z+42, R16
   1434              if (s->state==_HTTP_SEND)
   \   00000074   A505               LDD     R16, Z+45
   \   00000076   3106               CPI     R16, 22
   \   00000078   F4E1               BRNE    ??HTTP_hook_10
   1435              {
   1436                if (i==3)
   \   0000007A   3043               CPI     R20, 3
   \   0000007C   F4D1               BRNE    ??HTTP_hook_10
   1437                {
   1438          	s->sock.txreq=TCP_TXREQ_SEND; //Специально, для досыла после первого пакета
   \   0000007E   E003               LDI     R16, 3
   \   00000080   A701               STD     Z+41, R16
   \   00000082   C017               RJMP    ??HTTP_hook_10
   1439                }
   1440              }
   1441              break;
   1442            case TCP_EVENT_DATA:
   1443              return HTTP_hook_DATA_RX(len,data,s);
   \                     ??HTTP_hook_4:
   \   00000084   01D8               MOVW    R27:R26, R17:R16
   \   00000086   2F06               MOV     R16, R22
   \   00000088   ....               RJMP    HTTP_hook_DATA_RX
   1444            case TCP_EVENT_ACK:
   1445              //Подтверждение данных
   1446              cb=&s->httpcb_ack;
   \                     ??HTTP_hook_2:
   \   0000008A   5C2A               SUBI    R18, 202
   \   0000008C   C009               RJMP    ??HTTP_hook_13
   1447              goto L_SEND;
   1448            case TCP_EVENT_REGENERATE:
   1449              //Откат
   1450              //netw_memcpy(&s->httpcb,&s->httpcb_ack,sizeof(HTTP_CB));
   1451              {
   1452                char *dst=(char*)(&s->httpcb);
   \                     ??HTTP_hook_3:
   \   0000008E   01F9               MOVW    R31:R30, R19:R18
   \   00000090   96BE               ADIW    R31:R30, 46
   1453                //char *src=(char*)(&s->httpcb_ack);
   1454                i=sizeof(HTTP_CB);
   \   00000092   E028               LDI     R18, 8
   1455                do
   1456                {
   1457          	*dst=dst[sizeof(HTTP_CB)];//*src++;
   \                     ??HTTP_hook_14:
   \   00000094   8530               LDD     R19, Z+8
   \   00000096   9331               ST      Z+, R19
   1458          	dst++;
   1459                }
   1460                while(--i);
   \   00000098   952A               DEC     R18
   \   0000009A   F7E1               BRNE    ??HTTP_hook_14
   1461              }
   1462            case TCP_EVENT_SEND:
   1463              cb=&s->httpcb;
   \                     ??HTTP_hook_5:
   \   0000009C   019D               MOVW    R19:R18, R27:R26
   \   0000009E   5D22               SUBI    R18, 210
   \                     ??HTTP_hook_13:
   \   000000A0   4F3F               SBCI    R19, 255
   1464            L_SEND:
   1465              return HTTP_hook_DATA_TX(len,data,cb,s);
   \   000000A2   01AD               MOVW    R21:R20, R27:R26
   \   000000A4   01D8               MOVW    R27:R26, R17:R16
   \   000000A6   2F06               MOV     R16, R22
   \   000000A8   ....               RJMP    HTTP_hook_DATA_TX
   1466            case TCP_EVENT_QUE_ALLOC:
   1467              //Занимаем буфер TCP_QUE_CLIENT, если это возможно
   1468              i=http_q_c_pos;
   \                     ??HTTP_hook_7:
   \   000000AA   9140....           LDS     R20, http_q_c_pos
   1469              if (i==(sizeof(http_q_c)/sizeof(TCP_QUE_CLIENT))) return 0; //Нет места
   \   000000AE   3044               CPI     R20, 4
   \   000000B0   F411               BRNE    ??HTTP_hook_15
   \                     ??HTTP_hook_10:
   \   000000B2   E000               LDI     R16, 0
   \   000000B4   9508               RET
   1470              *((TCP_QUE_CLIENT **)data)=http_q_c+i;
   \                     ??HTTP_hook_15:
   \   000000B6   E122               LDI     R18, 18
   \   000000B8   9F42               MUL     R20, R18
   \   000000BA   ....               LDI     R18, LOW(http_q_c)
   \   000000BC   ....               LDI     R19, (http_q_c) >> 8
   \   000000BE   0D20               ADD     R18, R0
   \   000000C0   1D31               ADC     R19, R1
   \   000000C2   01F8               MOVW    R31:R30, R17:R16
   \   000000C4   8320               ST      Z, R18
   \   000000C6   8331               STD     Z+1, R19
   1471              i++;
   1472              http_q_c_pos=i;
   \   000000C8   9543               INC     R20
   \   000000CA   9340....           STS     http_q_c_pos, R20
   1473              return i; //Сколько всего
   \   000000CE   C005               RJMP    ??HTTP_hook_16
   1474            case TCP_EVENT_QUE_GET:
   1475              //Получаем первый TCP_QUE_CLIENT в очереди
   1476              *((TCP_QUE_CLIENT **)data)=http_q_c;
   \                     ??HTTP_hook_8:
   \   000000D0   ....               LDI     R18, LOW(http_q_c)
   \   000000D2   ....               LDI     R19, (http_q_c) >> 8
   \   000000D4   01F8               MOVW    R31:R30, R17:R16
   \   000000D6   8320               ST      Z, R18
   \   000000D8   8331               STD     Z+1, R19
   1477              return http_q_c_pos; //Сколько в очереди
   \                     ??HTTP_hook_16:
   \   000000DA   9100....           LDS     R16, http_q_c_pos
   \   000000DE   9508               RET
   1478            case TCP_EVENT_QUE_REMOVE:
   1479              //Удаляем клиента из очереди
   1480              {
   1481                j=http_q_c_pos;
   \                     ??HTTP_hook_9:
   \   000000E0   9100....           LDS     R16, http_q_c_pos
   1482                if (j)
   \   000000E4   2300               TST     R16
   \   000000E6   F051               BREQ    ??HTTP_hook_17
   1483                {
   1484          	char *dst=(char*)(http_q_c+0);
   \   000000E8   ....               LDI     R30, LOW(http_q_c)
   \   000000EA   ....               LDI     R31, (http_q_c) >> 8
   1485          	//char *src=(char*)(http_q_c+1);
   1486          	i=sizeof(http_q_c)-sizeof(TCP_QUE_CLIENT);
   \   000000EC   E316               LDI     R17, 54
   1487          	do
   1488          	{
   1489          	  //*dst++=*src++;
   1490          	  *dst=dst[sizeof(TCP_QUE_CLIENT)];
   \                     ??HTTP_hook_18:
   \   000000EE   8922               LDD     R18, Z+18
   \   000000F0   9321               ST      Z+, R18
   1491          	  dst++;
   1492          	}
   1493          	while(--i);
   \   000000F2   951A               DEC     R17
   \   000000F4   F7E1               BRNE    ??HTTP_hook_18
   1494          	j--;
   \   000000F6   950A               DEC     R16
   1495          	http_q_c_pos=j;
   \   000000F8   9300....           STS     http_q_c_pos, R16
   1496                }
   1497                return j; //Сколько осталось
   \                     ??HTTP_hook_17:
   \   000000FC   9508               RET
   1498              }
   1499            }
   1500            return 0;
   1501          }
   1502          

   \                                 In  segment CODE, align 2, keep-with-next
   1503          void InitVars(void)
   \                     InitVars:
   1504          {
   1505            UREG i;
   1506          /*  i=sizeof(EEPROM_BITMAP)-1;
   1507            //Init EE
   1508            do
   1509            {
   1510              RAM_BITMAP[i]=EEPROM_BITMAP[i];
   1511            }
   1512            while((--i)!=(UREG)-1);*/
   1513            //Init MAC
   1514            i=sizeof(MAC_EEPROM);
   \   00000000   E026               LDI     R18, 6
   \   00000002   E070               LDI     R23, 0
   1515            do
   1516            {
   1517              MAC0[i]=MAC_EEPROM[i];
   \                     ??InitVars_0:
   \   00000004   ....               LDI     R20, LOW((MASK_IP_EEPROM + 16))
   \   00000006   ....               LDI     R21, HIGH((MASK_IP_EEPROM + 16))
   \   00000008   0F42               ADD     R20, R18
   \   0000000A   1F57               ADC     R21, R23
   \   0000000C   ........           CALL    __eeget8_16
   \   00000010   2FE2               MOV     R30, R18
   \   00000012   E0F0               LDI     R31, 0
   \   00000014   ....               SUBI    R30, LOW((-(MAC0) & 0xFFFF))
   \   00000016   ....               SBCI    R31, (-(MAC0) & 0xFFFF) >> 8
   \   00000018   8300               ST      Z, R16
   1518          //    MAC_GATE0[i]=MAC_GATE[i];
   1519            }
   1520            while((--i)!=(UREG)-1);
   \   0000001A   952A               DEC     R18
   \   0000001C   3F2F               CPI     R18, 255
   \   0000001E   F791               BRNE    ??InitVars_0
   1521            //Init IP
   1522            IP=IP_EEPROM;
   \   00000020   ....               LDI     R20, ((MASK_IP_EEPROM + 4) & 0xff) & 0xFF
   \   00000022   ....               LDI     R21, (((MASK_IP_EEPROM + 4) >> 8) & 0xff) & 0xFF
   \   00000024   ........           CALL    __eeget32_16
   \   00000028   ....               LDI     R30, LOW(IP)
   \   0000002A   ....               LDI     R31, (IP) >> 8
   \   0000002C   8300               ST      Z, R16
   \   0000002E   8311               STD     Z+1, R17
   \   00000030   8322               STD     Z+2, R18
   \   00000032   8333               STD     Z+3, R19
   1523            MASK_IP=MASK_IP_EEPROM;
   \   00000034   ....               LDI     R20, LOW(MASK_IP_EEPROM)
   \   00000036   ....               LDI     R21, (MASK_IP_EEPROM) >> 8
   \   00000038   ........           CALL    __eeget32_16
   \   0000003C   ....               LDI     R30, LOW(MASK_IP)
   \   0000003E   ....               LDI     R31, (MASK_IP) >> 8
   \   00000040   8300               ST      Z, R16
   \   00000042   8311               STD     Z+1, R17
   \   00000044   8322               STD     Z+2, R18
   \   00000046   8333               STD     Z+3, R19
   1524            stationNum=stationNum_EEPROM;
   \   00000048   ....               LDI     R20, LOW(stationNum_EEPROM)
   \   0000004A   ....               LDI     R21, (stationNum_EEPROM) >> 8
   \   0000004C   ........           CALL    __eeget8_16
   \   00000050   9300....           STS     stationNum, R16
   1525          }
   \   00000054   9508               RET
   1526          

   \                                 In  segment CODE, align 2, keep-with-next
   1527          __monitor void WDT_Prescaler_Change(UREG psr)
   \                     WDT_Prescaler_Change:
   1528          {
   \   00000000   B71F               IN      R17, 0x3F
   \   00000002   94F8               CLI
   1529            __watchdog_reset();
   \   00000004   95A8               WDR
   1530            /* Start timed equence */
   1531            //WDTCSR |= (1<<WDCE) | (1<<WDE);
   1532            /* Set new prescaler(time-out) value = 64K cycles (~0.5 s) */
   1533            //WDTCSR = (1<<WDE) | psr;
   1534          }
   \   00000006   BF1F               OUT     0x3F, R17
   \   00000008   9508               RET
   1535          
   1536          //void ExecuteETH(void);
   1537          
   1538          extern void AddGETsocket(void);
   1539          extern void AddPOSTsocket(void);
   1540          extern void AddHTTPsocket(void);
   1541          extern void StartGET(void);
   1542          extern void StopGET(void);
   1543          extern void StartPOST(void);
   1544          
   1545          //__no_init UCHAR VS_BUFFER32 [32];
   1546          
   1547          // Быстрое считывание cчетчика пакетов
   1548          #pragma inline =forced
   1549          UREG _enc28j60Read_EPKTCNT (void)
   1550          { 	
   1551                  UREG data;
   1552                  // set the bank (if needed)
   1553          	if((EPKTCNT & BANK_MASK) != Enc28j60Bank)
   1554          	{       // set the bank       
   1555                          cbi (ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_CS);
   1556                          // issue write command
   1557                  	SPDR = ENC28J60_BIT_FIELD_CLR | (ECON1 & ADDR_MASK);
   1558          	        while(!(SPSR & (1<<SPIF)));
   1559                    	// write data
   1560                    	SPDR = (ECON1_BSEL1|ECON1_BSEL0);
   1561                  	while(!(SPSR & (1<<SPIF)));
   1562                          sbi (ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_CS);
   1563                          
   1564                          cbi (ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_CS);
   1565                          SPDR = ENC28J60_BIT_FIELD_SET | (ECON1 & ADDR_MASK);
   1566          	        while(!(SPSR & (1<<SPIF)));
   1567                    	// write data
   1568                    	SPDR = ((EPKTCNT & BANK_MASK)>>5);
   1569                  	while(!(SPSR & (1<<SPIF)));
   1570                          sbi (ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_CS);                                
   1571          		Enc28j60Bank = (EPKTCNT & BANK_MASK);
   1572          	}
   1573                  cbi (ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_CS);
   1574                  // issue read command
   1575          	SPDR = ENC28J60_READ_CTRL_REG | (EPKTCNT & ADDR_MASK);
   1576          	while(!(SPSR & (1<<SPIF)));
   1577          	// read data
   1578          	SPDR = 0xFF;
   1579          	while(!(SPSR & (1<<SPIF)));
   1580          	// do dummy read if needed
   1581          	data = SPDR;
   1582                  sbi (ENC28J60_CONTROL_PORT,ENC28J60_CONTROL_CS);
   1583                  return data;
   1584          	// release CS
   1585          }
   1586          
   1587          // состояние плеера

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   1588          volatile UREG PLAYER_STATE=PLAYER_STATE_STOPED;
   \                     PLAYER_STATE:
   \   00000000                      DS8 1
   1589          
   1590          volatile UINT8 BufferPKT=0;
   \                     BufferPKT:
   \   00000001                      DS8 1
   1591          volatile UINT8 FIFO_pkt_TS;
   \                     FIFO_pkt_TS:
   \   00000002                      DS8 1
   1592          
   1593          #pragma inline =forced
   1594          void Try2PlayMP3 (void)
   1595          {
   1596              //Выгребаем мп3 данные только состоянии "проигрывание"
   1597              if (PLAYER_STATE==PLAYER_STATE_PLAYING)
   1598              {    
   1599                  if ((VS_DREQ_PIN&(1<<VS_DREQ)))//VS_DREQ==1
   1600                  {         
   1601                    if (!_MP3fifo_read32()) // если данные в мп3 буфере исчерпаны
   1602                    {
   1603                       PLAYER_STATE=PLAYER_STATE_BUFFERING; 
   1604                       LCD_fprintline(1,"Buffering");
   1605                    }
   1606                  }
   1607                }
   1608                // зашли в состоянии "установлен ZeroWindow"
   1609                if (GET_WINDOW_STATE==GET_WINDOW_STATE_ZERO)
   1610                  {              
   1611                    switch (PLAYER_STATE)
   1612                    {            
   1613                    case PLAYER_STATE_BUFFERING:
   1614                      // если плеер находился в состоянии "буферизация" то переводим в режим "воспроизведение"          
   1615                      PLAYER_STATE=PLAYER_STATE_PLAYING;
   1616                      LCD_fprintline(1,"Playing");
   1617                      get_sock.sock.async_req=1; //Запустим асинхронный старт
   1618          //            sbi (PORTD, PD3);               
   1619                      break;
   1620                    case PLAYER_STATE_PLAYING:
   1621                      // в режиме "воспроизведение" обнулилось окно - надо запустить асинхронный старт            
   1622                      get_sock.sock.async_req=1; //Запустим асинхронный старт
   1623          //            sbi (PORTD, PD3);               
   1624                      break;
   1625                    default:
   1626                      break;
   1627                    }                    
   1628                  }
   1629          }
   1630          

   \                                 In  segment NEAR_F, align 1, keep-with-next
   \                     `?<Constant "Buffering">`:
   \   00000000   754266667265       DC8 "Buffering"
   \              6E690067    
   \   0000000A   6C5079616E69       DC8 "Playing"
   \              0067        
   \   00000012   6F436E6E6365       DC8 "Connecting"
   \              6974676E00  
   \   0000001D   7453706F6970       DC8 "Stopping"
   \              676E00      
   1631          char const __flash _Hello_string[]=\
   \                     _Hello_string:
   \   00000026   0A0D2A2A202A       DC8 0DH, 0AH, 2AH, 2AH, 2AH, 20H, 75H, 45H
   \              4575        
   \   0000002E   687461526964       DC8 74H, 68H, 52H, 61H, 64H, 69H, 6FH, 20H
   \              206F        
   \   00000036   3176302E2C30       DC8 76H, 31H, 2EH, 30H, 30H, 2CH, 28H, 63H
   \              6328        
   \   0000003E   322931300D30       DC8 29H, 32H, 30H, 31H, 30H, 0DH, 0AH, 2AH
   \              2A0A        
   \   00000046   2A2A62202079       DC8 2AH, 2AH, 20H, 62H, 79H, 20H, 41H, 6CH
   \              6C41        
   \   0000004E   78656E616564       DC8 65H, 78H, 61H, 6EH, 64H, 65H, 72H, 20H
   \              2072        
   \   00000056   65596572657A       DC8 59H, 65H, 72H, 65H, 7AH, 65H, 79H, 65H
   \              6579        
   \   0000005E   0D762A0A2A2A       DC8 76H, 0DH, 0AH, 2AH, 2AH, 2AH, 20H, 75H
   \              7520        
   \   00000066   694E656B5420       DC8 4EH, 69H, 6BH, 65H, 20H, 54H, 43H, 50H
   \              5043        
   \   0000006E   492F20507473       DC8 2FH, 49H, 50H, 20H, 73H, 74H, 61H, 63H
   \              6361        
   \   00000076   206B79625220       DC8 6BH, 20H, 62H, 79H, 20H, 52H, 53H, 54H
   \              5453        
   \   0000007E   2F3742434953       DC8 37H, 2FH, 43H, 42H, 53H, 49H, 45H, 0DH
   \              0D45        
   \   00000086   0D0A000A           DC8 0AH, 0DH, 0AH, 0
   1632          "\r\n\
   1633          *** uEthRadio v1.00,(c)2010\r\n\
   1634          *** by Alexander Yerezeyev\r\n\
   1635          *** uNike TCP/IP stack by RST7/CBSIE\r\n\
   1636          \r\n";
   1637          
   1638          #pragma inline=forced
   1639          UINT16 _READ_U16_REV(volatile UINT8 *p)
   1640          {
   1641          #pragma diag_suppress=Pa082
   1642            return p[1]|(p[0]<<8);
   1643          #pragma diag_default=Pa082
   1644          }
   1645          
   1646          

   \                                 In  segment CODE, align 2, keep-with-next
   1647          __task void main(void)
   \                     main:
   1648          {
   1649            UINT16 ii;
   1650            UINT8 *p;
   1651            sbi(DDRD, PD3);  
   \   00000000   9A8B               SBI     0x11, 0x03
   1652            sbi(DDRD, PD5); 
   \   00000002   9A8D               SBI     0x11, 0x05
   1653            sbi (PORTD, PD3);  
   \   00000004   9A93               SBI     0x12, 0x03
   1654            _delay_ms(1000);
   \   00000006   EF0F               LDI     R16, 255
   \   00000008   ED13               LDI     R17, 211
   \   0000000A   E320               LDI     R18, 48
   \   0000000C   5001               SUBI    R16, 1
   \   0000000E   4010               SBCI    R17, 0
   \   00000010   4020               SBCI    R18, 0
   \   00000012   F7E1               BRNE    $-6
   \   00000014   C000               RJMP    $+2
   \   00000016   0000               NOP
   1655            cbi (PORTD, PD3);
   \   00000018   9893               CBI     0x12, 0x03
   1656            VS_INIT(); 
   \   0000001A   ........           CALL    VS_INIT
   1657            VS_VOL();  
   \   0000001E   ........           CALL    VS_VOL
   1658            p=(UINT8*)&http_sock;
   \   00000022   ....               LDI     R30, LOW(http_sock)
   \   00000024   ....               LDI     R31, (http_sock) >> 8
   1659            ii=sizeof(http_sock);
   \   00000026   EE0E               LDI     R16, 238
   \   00000028   E010               LDI     R17, 0
   1660            do
   1661            {
   1662              *p++=0;
   \                     ??main_0:
   \   0000002A   9311               ST      Z+, R17
   1663            }
   1664            while(--ii);
   \   0000002C   950A               DEC     R16
   \   0000002E   F7E9               BRNE    ??main_0
   1665            uart_init();
   \   00000030   ........           CALL    uart_init
   1666           // for (i=0;i<64;i++) {while ( !( UCSRA & (1<<UDRE)) );UDR = 0xAA;}
   1667             _print_fstr(_Hello_string);
   \   00000034   ....               LDI     R16, LOW((`?<Constant "Buffering">` + 38))
   \   00000036   ....               LDI     R17, HIGH((`?<Constant "Buffering">` + 38))
   \   00000038   ........           CALL    _print_fstr
   1668            #ifdef CONSOLE_DEBUG
   1669            _print_fstr(_Hello_string);
   1670            #endif
   1671            TWAR=0x00;
   \   0000003C   E000               LDI     R16, 0
   \   0000003E   B902               OUT     0x02, R16
   1672            InitVars();
   \   00000040   ....               RCALL   InitVars
   1673            __disable_interrupt();
   \   00000042   94F8               CLI
   1674            nic_init();
   \   00000044   ........           CALL    nic_init
   1675            InitEthernetHW();
   \   00000048   ........           CALL    InitEthernetHW
   1676            fifo_init();
   \   0000004C   ........           CALL    fifo_init
   1677            //fifo_test();
   1678            __enable_interrupt();
   \   00000050   9478               SEI
   1679             AddHTTPsocket(); 
   \   00000052   ....               RCALL   AddHTTPsocket
   1680             AddGETsocket();
   \   00000054   ........           CALL    AddGETsocket
   1681            // AddPOSTsocket();
   1682            //_delay_ms(1000);
   1683             //_delay_ms(1000);
   1684             LCD_init_4();     
   \   00000058   ........           CALL    LCD_init_4
   1685             stationNum=stationNum_EEPROM;   
   \   0000005C   ....               LDI     R20, LOW(stationNum_EEPROM)
   \   0000005E   ....               LDI     R21, (stationNum_EEPROM) >> 8
   \   00000060   ........           CALL    __eeget8_16
   \   00000064   9300....           STS     stationNum, R16
   1686             LCD_fprintlineEE(0,&station_list[stationNum].LCD_ID[0]);
   \   00000068   ....               LDI     R30, LOW((station_list + 38))
   \   0000006A   ....               LDI     R31, HIGH((station_list + 38))
   \   0000006C   9110....           LDS     R17, stationNum
   \   00000070   E306               LDI     R16, 54
   \   00000072   9F10               MUL     R17, R16
   \   00000074   0DE0               ADD     R30, R0
   \   00000076   1DF1               ADC     R31, R1
   \   00000078   E000               LDI     R16, 0
   \   0000007A   ........           CALL    LCD_fprintlineEE
   1687             LCD_TCPstate(get_sock.sock.state); 
   \   0000007E   9100....           LDS     R16, (get_sock + 27)
   \   00000082   ........           CALL    LCD_TCPstate
   1688             LCD_PLAYERstate(PLAYER_STATE);
   \   00000086   9100....           LDS     R16, PLAYER_STATE
   \   0000008A   ........           CALL    LCD_PLAYERstate
   1689            //Инициализируем ADC
   1690            //ADMUX=(0<<REFS1)|(0<<REFS0)|(1<<ADLAR)|6; //Выбираем линию 1
   1691            //ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADIF)|7;//Прескаллер 1:128
   1692            // Инициализация таймера 1
   1693            OCR1A=0x0001; 
   \   0000008E   E001               LDI     R16, 1
   \   00000090   E010               LDI     R17, 0
   \   00000092   BD1B               OUT     0x2B, R17
   \   00000094   BD0A               OUT     0x2A, R16
   1694            TCCR1A|=(1<<COM1A1)|(1<<COM1A0)|(1<<WGM11);// 9 bit PWM
   \   00000096   B50F               IN      R16, 0x2F
   \   00000098   6C02               ORI     R16, 0xC2
   \   0000009A   BD0F               OUT     0x2F, R16
   1695            TCCR2|=(1<<CS22)|(1<<CS21)|(1<<CS20); //1024
   \   0000009C   B505               IN      R16, 0x25
   \   0000009E   6007               ORI     R16, 0x07
   \   000000A0   BD05               OUT     0x25, R16
   1696            TCCR1B|=(1<<WGM12)|(1<<CS10);
   \   000000A2   B50E               IN      R16, 0x2E
   \   000000A4   6009               ORI     R16, 0x09
   \   000000A6   BD0E               OUT     0x2E, R16
   1697            TIMSK|=(1<<TOIE2);
   \   000000A8   B709               IN      R16, 0x39
   \   000000AA   6400               ORI     R16, 0x40
   \   000000AC   BF09               OUT     0x39, R16
   \   000000AE   C020               RJMP    ??main_1
   1698            //UINT8 i;
   1699            //for (i=0;i<=9;i++)    {LCD_putc ('*');}
   1700          //  station_list[stationNum].LCD_ID[0]='A';    
   1701            for(;;)
   1702            {  
   1703              BufferPKT=0; // Сбросим флаг того, что пакет пришел из буфера
   1704              if (ETH_TASK_WAKEUP) // если таймер натикал
   1705              {
   1706                  ETH_TASK_WAKEUP=0;         
   1707                  goto L_WAKE_UP; // принудительно вызовем стек
   1708              }
   1709              // иначе вызываем только после того, как что то пришло в буфер
   1710              if((_enc28j60Read_EPKTCNT()!=0)&&(nic_poll() != 0))
   1711              {
   1712          L_WAKE_UP:
   1713                INT_ETH_PROCESS_PKT2();   //Позвать стек (в RAM-буфере лежит пакет)      
   1714                UREG fc=ETHfifo_CNT;
   1715                while(fc--)   // пока есть пакеты в буфере      
   1716                {        
   1717                  cbi (TIMSK, TOIE2);
   1718                  UINT8 TS;
   1719                  INT8 CTS;
   1720                  UINT16 PKT_len;
   1721                  UINT8 irshigh8;
   1722                  PKT_len=ETHfifo_PKT_read((unsigned char *)&ETH_PKT.hdr.dst_mac, &TS);//Считаем пакет, и таймаут    
   1723                  FIFO_pkt_TS=TS; // сохраним таймаут в переменной для последующего использования  
   1724                  irshigh8=(UINT8) (irs_high&0x00FF);
   1725                  CTS = (INT8) TS;
   1726                  CTS-=irshigh8;
   1727                  if (CTS<0) 
   1728                  {
   1729                    #ifdef CONSOLE_DEBUG
   1730                    _print_num("Old PKT:",(UINT16)(irshigh8));
   1731                    _print_rn();
   1732                    #endif
   1733                    continue;  // пакет устарел - пропускаем его                     
   1734                  }         
   1735                  #ifdef CONSOLE_DEBUG        
   1736                  IP_FRAME *ip;
   1737                  ip=(IP_FRAME*)(&ETH_PKT); 
   1738                  _print_num("FFlen:",PKT_len);
   1739                  _print_num("IDFF:",_READ_U16_REV (((UINT8*)(&ip->ip.id))));
   1740                  #endif
   1741                  BufferPKT=1;  // поднимем флаг - "есть пакет из буфера"
   1742                  ETH_PKT_mode=1;
   1743                  ETH_PKT_len=PKT_len;
   1744                  INT_ETH_PROCESS_PKT2(); // позовем стек
   1745                  UREG i;
   1746                  for (i=0;i<=4;i++) Try2PlayMP3();
   1747                }   
   1748              }
   1749            sbi (TIMSK, TOIE2);
   1750            UREG i;
   1751            for (i=0;i<=3;i++) Try2PlayMP3();
   1752          //  Try2PlayMP3();
   1753            OCR1A = (UINT16)(_MP3fifo_len()>>8);
   1754            if (Keyboard_task)
   1755            {
   1756              switch (Keyboard_task)
   1757              {
   1758                case Keyboard_task_startget:
   1759                  LCD_fprintline(1,"Connecting");
   1760                  StartGET();
   1761                  break;
   1762                case Keyboard_task_stopget:
   1763                   PLAYER_STATE= PLAYER_STATE_STOPREQ;
   1764                   LCD_fprintline(1,"Stopping");
   1765                  break;
   1766                case Keyboard_task_stationchange:
   1767                  stationNum++;
   \                     ??main_2:
   \   000000B0   9100....           LDS     R16, stationNum
   \   000000B4   9503               INC     R16
   \   000000B6   9300....           STS     stationNum, R16
   1768                  if (stationNum>15) stationNum=0;
   \   000000BA   9100....           LDS     R16, stationNum
   \   000000BE   3100               CPI     R16, 16
   \   000000C0   F018               BRCS    ??main_3
   \   000000C2   E000               LDI     R16, 0
   \   000000C4   9300....           STS     stationNum, R16
   1769                  stationNum_EEPROM=stationNum;
   \                     ??main_3:
   \   000000C8   9100....           LDS     R16, stationNum
   \   000000CC   ....               LDI     R20, LOW(stationNum_EEPROM)
   \   000000CE   ....               LDI     R21, (stationNum_EEPROM) >> 8
   \   000000D0   ........           CALL    __eeput8_16
   1770                  LCD_fprintlineEE(0,&station_list[stationNum].LCD_ID[0]);
   \   000000D4   ....               LDI     R30, LOW((station_list + 38))
   \   000000D6   ....               LDI     R31, HIGH((station_list + 38))
   \   000000D8   9110....           LDS     R17, stationNum
   \   000000DC   E306               LDI     R16, 54
   \   000000DE   9F10               MUL     R17, R16
   \   000000E0   0DE0               ADD     R30, R0
   \   000000E2   1DF1               ADC     R31, R1
   \   000000E4   E000               LDI     R16, 0
   \   000000E6   ........           CALL    LCD_fprintlineEE
   1771                  break;          
   1772              }
   1773              Keyboard_task=0;
   \                     ??main_4:
   \   000000EA   E000               LDI     R16, 0
   \   000000EC   9300....           STS     Keyboard_task, R16
   \                     ??main_1:
   \   000000F0   E000               LDI     R16, 0
   \   000000F2   9300....           STS     (PLAYER_STATE + 1), R16
   \   000000F6   9B11               SBIS    0x02, 0x01
   \   000000F8   C002               RJMP    ??main_5
   \   000000FA   9811               CBI     0x02, 0x01
   \   000000FC   C02E               RJMP    ??main_6
   \                     ??main_5:
   \   000000FE   9100....           LDS     R16, Enc28j60Bank
   \   00000102   3200               CPI     R16, 32
   \   00000104   F0B9               BREQ    ??main_7
   \   00000106   98C2               CBI     0x18, 0x02
   \   00000108   EB0F               LDI     R16, 191
   \   0000010A   B90F               OUT     0x0F, R16
   \                     ??main_8:
   \   0000010C   9B77               SBIS    0x0E, 0x07
   \   0000010E   CFFE               RJMP    ??main_8
   \   00000110   E003               LDI     R16, 3
   \   00000112   B90F               OUT     0x0F, R16
   \                     ??main_9:
   \   00000114   9B77               SBIS    0x0E, 0x07
   \   00000116   CFFE               RJMP    ??main_9
   \   00000118   9AC2               SBI     0x18, 0x02
   \   0000011A   98C2               CBI     0x18, 0x02
   \   0000011C   E90F               LDI     R16, 159
   \   0000011E   B90F               OUT     0x0F, R16
   \                     ??main_10:
   \   00000120   9B77               SBIS    0x0E, 0x07
   \   00000122   CFFE               RJMP    ??main_10
   \   00000124   E001               LDI     R16, 1
   \   00000126   B90F               OUT     0x0F, R16
   \                     ??main_11:
   \   00000128   9B77               SBIS    0x0E, 0x07
   \   0000012A   CFFE               RJMP    ??main_11
   \   0000012C   9AC2               SBI     0x18, 0x02
   \   0000012E   E200               LDI     R16, 32
   \   00000130   9300....           STS     Enc28j60Bank, R16
   \                     ??main_7:
   \   00000134   98C2               CBI     0x18, 0x02
   \   00000136   E109               LDI     R16, 25
   \   00000138   B90F               OUT     0x0F, R16
   \                     ??main_12:
   \   0000013A   9B77               SBIS    0x0E, 0x07
   \   0000013C   CFFE               RJMP    ??main_12
   \   0000013E   EF0F               LDI     R16, 255
   \   00000140   B90F               OUT     0x0F, R16
   \                     ??main_13:
   \   00000142   9B77               SBIS    0x0E, 0x07
   \   00000144   CFFE               RJMP    ??main_13
   \   00000146   B10F               IN      R16, 0x0F
   \   00000148   9AC2               SBI     0x18, 0x02
   \   0000014A   2300               TST     R16
   \   0000014C   F409               BRNE    $+2+2
   \   0000014E   C31C               RJMP    ??main_14
   \   00000150   ........           CALL    nic_poll
   \   00000154   2B01               OR      R16, R17
   \   00000156   F409               BRNE    $+2+2
   \   00000158   C317               RJMP    ??main_14
   \                     ??main_6:
   \   0000015A   ........           CALL    INT_ETH_PROCESS_PKT2
   \   0000015E   9040....           LDS     R4, ETHfifo_CNT
   \   00000162   2044               TST     R4
   \   00000164   F409               BRNE    $+2+2
   \   00000166   C310               RJMP    ??main_14
   \                     ??main_15:
   \   00000168   2044               TST     R4
   \   0000016A   F409               BRNE    $+2+2
   \   0000016C   C30D               RJMP    ??main_14
   \   0000016E   944A               DEC     R4
   \   00000170   B709               IN      R16, 0x39
   \   00000172   7B0F               ANDI    R16, 0xBF
   \   00000174   BF09               OUT     0x39, R16
   \   00000176   ....               LDI     R30, LOW(ETH_PKT)
   \   00000178   ....               LDI     R31, (ETH_PKT) >> 8
   \   0000017A   E0B0               LDI     R27, 0
   \   0000017C   9140....           LDS     R20, ETHfifo_pRD
   \   00000180   9150....           LDS     R21, (ETHfifo_pRD + 1)
   \   00000184   9160....           LDS     R22, (ETHfifo_pRD + 2)
   \   00000188   9170....           LDS     R23, (ETHfifo_pRD + 3)
   \   0000018C   9894               CBI     0x12, 0x04
   \   0000018E   E003               LDI     R16, 3
   \   00000190   B90F               OUT     0x0F, R16
   \                     ??main_16:
   \   00000192   9B77               SBIS    0x0E, 0x07
   \   00000194   CFFE               RJMP    ??main_16
   \   00000196   B96F               OUT     0x0F, R22
   \                     ??main_17:
   \   00000198   9B77               SBIS    0x0E, 0x07
   \   0000019A   CFFE               RJMP    ??main_17
   \   0000019C   B95F               OUT     0x0F, R21
   \                     ??main_18:
   \   0000019E   9B77               SBIS    0x0E, 0x07
   \   000001A0   CFFE               RJMP    ??main_18
   \   000001A2   B94F               OUT     0x0F, R20
   \                     ??main_19:
   \   000001A4   9B77               SBIS    0x0E, 0x07
   \   000001A6   CFFE               RJMP    ??main_19
   \   000001A8   E001               LDI     R16, 1
   \   000001AA   E010               LDI     R17, 0
   \                     ??main_20:
   \   000001AC   2455               CLR     R5
   \   000001AE   EF2F               LDI     R18, 255
   \   000001B0   B92F               OUT     0x0F, R18
   \   000001B2   5F4F               SUBI    R20, 255
   \   000001B4   4F5F               SBCI    R21, 255
   \   000001B6   4F6F               SBCI    R22, 255
   \   000001B8   4F7F               SBCI    R23, 255
   \   000001BA   3040               CPI     R20, 0
   \   000001BC   0555               CPC     R21, R5
   \   000001BE   E022               LDI     R18, 2
   \   000001C0   0762               CPC     R22, R18
   \   000001C2   0575               CPC     R23, R5
   \   000001C4   F008               BRCS    ??main_21
   \   000001C6   9453               INC     R5
   \                     ??main_21:
   \   000001C8   9B77               SBIS    0x0E, 0x07
   \   000001CA   CFFE               RJMP    ??main_21
   \   000001CC   B00F               IN      R0, 0x0F
   \   000001CE   2F2B               MOV     R18, R27
   \   000001D0   23BB               TST     R27
   \   000001D2   F029               BREQ    ??main_22
   \   000001D4   952A               DEC     R18
   \   000001D6   F049               BREQ    ??main_23
   \   000001D8   952A               DEC     R18
   \   000001DA   F049               BREQ    ??main_24
   \   000001DC   C048               RJMP    ??main_25
   \                     ??main_22:
   \   000001DE   2D90               MOV     R25, R0
   \   000001E0   E080               LDI     R24, 0
   \                     ??main_26:
   \   000001E2   5F0F               SUBI    R16, 255
   \   000001E4   4F1F               SBCI    R17, 255
   \   000001E6   95B3               INC     R27
   \   000001E8   C043               RJMP    ??main_27
   \                     ??main_23:
   \   000001EA   2980               OR      R24, R0
   \   000001EC   CFFA               RJMP    ??main_26
   \                     ??main_24:
   \   000001EE   2DA0               MOV     R26, R0
   \   000001F0   95B3               INC     R27
   \   000001F2   3787               CPI     R24, 119
   \   000001F4   E005               LDI     R16, 5
   \   000001F6   0790               CPC     R25, R16
   \   000001F8   F010               BRCS    ??main_28
   \   000001FA   E786               LDI     R24, 118
   \   000001FC   E095               LDI     R25, 5
   \                     ??main_28:
   \   000001FE   9100....           LDS     R16, ETHfifo_pWR
   \   00000202   9110....           LDS     R17, (ETHfifo_pWR + 1)
   \   00000206   9120....           LDS     R18, (ETHfifo_pWR + 2)
   \   0000020A   9130....           LDS     R19, (ETHfifo_pWR + 3)
   \   0000020E   9000....           LDS     R0, ETHfifo_pRD
   \   00000212   9010....           LDS     R1, (ETHfifo_pRD + 1)
   \   00000216   9020....           LDS     R2, (ETHfifo_pRD + 2)
   \   0000021A   9030....           LDS     R3, (ETHfifo_pRD + 3)
   \   0000021E   1500               CP      R16, R0
   \   00000220   0511               CPC     R17, R1
   \   00000222   0522               CPC     R18, R2
   \   00000224   0533               CPC     R19, R3
   \   00000226   F448               BRCC    ??main_29
   \   00000228   1900               SUB     R16, R0
   \   0000022A   0911               SBC     R17, R1
   \   0000022C   0922               SBC     R18, R2
   \   0000022E   0933               SBC     R19, R3
   \   00000230   5405               SUBI    R16, 69
   \   00000232   4C19               SBCI    R17, 201
   \   00000234   4F2F               SBCI    R18, 255
   \   00000236   4F3F               SBCI    R19, 255
   \   00000238   C00E               RJMP    ??main_30
   \                     ??main_29:
   \   0000023A   1600               CP      R0, R16
   \   0000023C   0611               CPC     R1, R17
   \   0000023E   0622               CPC     R2, R18
   \   00000240   0633               CPC     R3, R19
   \   00000242   F428               BRCC    ??main_31
   \   00000244   1900               SUB     R16, R0
   \   00000246   0911               SBC     R17, R1
   \   00000248   0922               SBC     R18, R2
   \   0000024A   0933               SBC     R19, R3
   \   0000024C   C004               RJMP    ??main_30
   \                     ??main_31:
   \   0000024E   E000               LDI     R16, 0
   \   00000250   E010               LDI     R17, 0
   \   00000252   E020               LDI     R18, 0
   \   00000254   E030               LDI     R19, 0
   \                     ??main_30:
   \   00000256   1708               CP      R16, R24
   \   00000258   0719               CPC     R17, R25
   \   0000025A   4020               SBCI    R18, 0
   \   0000025C   4030               SBCI    R19, 0
   \   0000025E   F418               BRCC    ??main_32
   \   00000260   E020               LDI     R18, 0
   \   00000262   E030               LDI     R19, 0
   \   00000264   C02D               RJMP    ??main_33
   \                     ??main_32:
   \   00000266   018C               MOVW    R17:R16, R25:R24
   \   00000268   5F0F               SUBI    R16, 255
   \   0000026A   4F1F               SBCI    R17, 255
   \   0000026C   C001               RJMP    ??main_27
   \                     ??main_25:
   \   0000026E   9201               ST      Z+, R0
   \                     ??main_27:
   \   00000270   2055               TST     R5
   \   00000272   F099               BREQ    ??main_34
   \   00000274   9A94               SBI     0x12, 0x04
   \   00000276   E445               LDI     R20, 69
   \   00000278   EC59               LDI     R21, 201
   \   0000027A   E061               LDI     R22, 1
   \   0000027C   E070               LDI     R23, 0
   \   0000027E   9894               CBI     0x12, 0x04
   \   00000280   E023               LDI     R18, 3
   \   00000282   B92F               OUT     0x0F, R18
   \                     ??main_35:
   \   00000284   9B77               SBIS    0x0E, 0x07
   \   00000286   CFFE               RJMP    ??main_35
   \   00000288   B96F               OUT     0x0F, R22
   \                     ??main_36:
   \   0000028A   9B77               SBIS    0x0E, 0x07
   \   0000028C   CFFE               RJMP    ??main_36
   \   0000028E   B95F               OUT     0x0F, R21
   \                     ??main_37:
   \   00000290   9B77               SBIS    0x0E, 0x07
   \   00000292   CFFE               RJMP    ??main_37
   \   00000294   B94F               OUT     0x0F, R20
   \                     ??main_38:
   \   00000296   9B77               SBIS    0x0E, 0x07
   \   00000298   CFFE               RJMP    ??main_38
   \                     ??main_34:
   \   0000029A   0198               MOVW    R19:R18, R17:R16
   \   0000029C   5001               SUBI    R16, 1
   \   0000029E   4010               SBCI    R17, 0
   \   000002A0   2B23               OR      R18, R19
   \   000002A2   F009               BREQ    $+2+2
   \   000002A4   CF83               RJMP    ??main_20
   \   000002A6   9A94               SBI     0x12, 0x04
   \   000002A8   ....               LDI     R30, LOW(ETHfifo_pRD)
   \   000002AA   ....               LDI     R31, (ETHfifo_pRD) >> 8
   \   000002AC   8340               ST      Z, R20
   \   000002AE   8351               STD     Z+1, R21
   \   000002B0   8362               STD     Z+2, R22
   \   000002B2   8373               STD     Z+3, R23
   \   000002B4   9100....           LDS     R16, ETHfifo_CNT
   \   000002B8   950A               DEC     R16
   \   000002BA   9300....           STS     ETHfifo_CNT, R16
   \   000002BE   019C               MOVW    R19:R18, R25:R24
   \                     ??main_33:
   \   000002C0   93A0....           STS     (PLAYER_STATE + 2), R26
   \   000002C4   9100....           LDS     R16, (_A_count_200ms_low + 2)
   \   000002C8   9110....           LDS     R17, (_A_count_200ms_low + 3)
   \   000002CC   1BA0               SUB     R26, R16
   \   000002CE   F40A               BRPL    $+2+2
   \   000002D0   CF4B               RJMP    ??main_15
   \   000002D2   E001               LDI     R16, 1
   \   000002D4   9300....           STS     (PLAYER_STATE + 1), R16
   \   000002D8   9300....           STS     ETH_PKT_mode, R16
   \   000002DC   9320....           STS     ETH_PKT_len, R18
   \   000002E0   9330....           STS     (ETH_PKT_len + 1), R19
   \   000002E4   ........           CALL    INT_ETH_PROCESS_PKT2
   \   000002E8   E085               LDI     R24, 5
   \   000002EA   C006               RJMP    ??main_39
   \                     ??main_40:
   \   000002EC   E001               LDI     R16, 1
   \   000002EE   9300....           STS     (get_sock + 42), R16
   \                     ??main_41:
   \   000002F2   958A               DEC     R24
   \   000002F4   F409               BRNE    $+2+2
   \   000002F6   CF38               RJMP    ??main_15
   \                     ??main_39:
   \   000002F8   9100....           LDS     R16, PLAYER_STATE
   \   000002FC   3002               CPI     R16, 2
   \   000002FE   F009               BREQ    $+2+2
   \   00000300   C22D               RJMP    ??main_42
   \   00000302   9B87               SBIS    0x10, 0x07
   \   00000304   C22B               RJMP    ??main_42
   \   00000306   ....               LDI     R16, LOW(VS_BUFFER32)
   \   00000308   ....               LDI     R17, (VS_BUFFER32) >> 8
   \   0000030A   ....               LDI     R30, LOW(MP3fifo_pWR)
   \   0000030C   ....               LDI     R31, (MP3fifo_pWR) >> 8
   \   0000030E   8140               LD      R20, Z
   \   00000310   8151               LDD     R21, Z+1
   \   00000312   8162               LDD     R22, Z+2
   \   00000314   8173               LDD     R23, Z+3
   \   00000316   ....               LDI     R30, LOW(MP3fifo_pRD)
   \   00000318   ....               LDI     R31, (MP3fifo_pRD) >> 8
   \   0000031A   8000               LD      R0, Z
   \   0000031C   8011               LDD     R1, Z+1
   \   0000031E   8022               LDD     R2, Z+2
   \   00000320   8033               LDD     R3, Z+3
   \   00000322   1540               CP      R20, R0
   \   00000324   0551               CPC     R21, R1
   \   00000326   0562               CPC     R22, R2
   \   00000328   0573               CPC     R23, R3
   \   0000032A   F498               BRCC    ??main_43
   \   0000032C   E444               LDI     R20, 68
   \   0000032E   EC59               LDI     R21, 201
   \   00000330   E061               LDI     R22, 1
   \   00000332   E070               LDI     R23, 0
   \   00000334   1940               SUB     R20, R0
   \   00000336   0951               SBC     R21, R1
   \   00000338   0962               SBC     R22, R2
   \   0000033A   0973               SBC     R23, R3
   \   0000033C   ....               LDI     R30, LOW(MP3fifo_pWR)
   \   0000033E   ....               LDI     R31, (MP3fifo_pWR) >> 8
   \   00000340   8000               LD      R0, Z
   \   00000342   8011               LDD     R1, Z+1
   \   00000344   8022               LDD     R2, Z+2
   \   00000346   8033               LDD     R3, Z+3
   \   00000348   0D40               ADD     R20, R0
   \   0000034A   1D51               ADC     R21, R1
   \   0000034C   1D62               ADC     R22, R2
   \   0000034E   1D73               ADC     R23, R3
   \   00000350   C019               RJMP    ??main_44
   \                     ??main_43:
   \   00000352   01A0               MOVW    R21:R20, R1:R0
   \   00000354   01B1               MOVW    R23:R22, R3:R2
   \   00000356   ....               LDI     R30, LOW(MP3fifo_pWR)
   \   00000358   ....               LDI     R31, (MP3fifo_pWR) >> 8
   \   0000035A   8000               LD      R0, Z
   \   0000035C   8011               LDD     R1, Z+1
   \   0000035E   8022               LDD     R2, Z+2
   \   00000360   8033               LDD     R3, Z+3
   \   00000362   1540               CP      R20, R0
   \   00000364   0551               CPC     R21, R1
   \   00000366   0562               CPC     R22, R2
   \   00000368   0573               CPC     R23, R3
   \   0000036A   F488               BRCC    ??main_45
   \   0000036C   01A0               MOVW    R21:R20, R1:R0
   \   0000036E   01B1               MOVW    R23:R22, R3:R2
   \   00000370   ....               LDI     R30, LOW(MP3fifo_pRD)
   \   00000372   ....               LDI     R31, (MP3fifo_pRD) >> 8
   \   00000374   8000               LD      R0, Z
   \   00000376   8011               LDD     R1, Z+1
   \   00000378   8022               LDD     R2, Z+2
   \   0000037A   8033               LDD     R3, Z+3
   \   0000037C   1940               SUB     R20, R0
   \   0000037E   0951               SBC     R21, R1
   \   00000380   0962               SBC     R22, R2
   \   00000382   0973               SBC     R23, R3
   \                     ??main_44:
   \   00000384   3240               CPI     R20, 32
   \   00000386   4050               SBCI    R21, 0
   \   00000388   4060               SBCI    R22, 0
   \   0000038A   4070               SBCI    R23, 0
   \   0000038C   F440               BRCC    ??main_46
   \                     ??main_45:
   \   0000038E   E001               LDI     R16, 1
   \   00000390   9300....           STS     PLAYER_STATE, R16
   \   00000394   ....               LDI     R30, LOW(`?<Constant "Buffering">`)
   \   00000396   ....               LDI     R31, (`?<Constant "Buffering">`) >> 8
   \   00000398   ........           CALL    LCD_fprintline
   \   0000039C   C1DF               RJMP    ??main_42
   \                     ??main_46:
   \   0000039E   ....               LDI     R30, LOW(MP3fifo_pRD)
   \   000003A0   ....               LDI     R31, (MP3fifo_pRD) >> 8
   \   000003A2   8000               LD      R0, Z
   \   000003A4   8011               LDD     R1, Z+1
   \   000003A6   8022               LDD     R2, Z+2
   \   000003A8   8033               LDD     R3, Z+3
   \   000003AA   01A0               MOVW    R21:R20, R1:R0
   \   000003AC   01B1               MOVW    R23:R22, R3:R2
   \   000003AE   5E40               SUBI    R20, 224
   \   000003B0   4F5F               SBCI    R21, 255
   \   000003B2   4F6F               SBCI    R22, 255
   \   000003B4   4F7F               SBCI    R23, 255
   \   000003B6   3444               CPI     R20, 68
   \   000003B8   4C59               SBCI    R21, 201
   \   000003BA   4061               SBCI    R22, 1
   \   000003BC   E020               LDI     R18, 0
   \   000003BE   4070               SBCI    R23, 0
   \   000003C0   F008               BRCS    $+2+2
   \   000003C2   C0DA               RJMP    ??main_47
   \   000003C4   9894               CBI     0x12, 0x04
   \   000003C6   E003               LDI     R16, 3
   \   000003C8   B90F               OUT     0x0F, R16
   \                     ??main_48:
   \   000003CA   9B77               SBIS    0x0E, 0x07
   \   000003CC   CFFE               RJMP    ??main_48
   \   000003CE   B82F               OUT     0x0F, R2
   \                     ??main_49:
   \   000003D0   9B77               SBIS    0x0E, 0x07
   \   000003D2   CFFE               RJMP    ??main_49
   \   000003D4   B81F               OUT     0x0F, R1
   \                     ??main_50:
   \   000003D6   9B77               SBIS    0x0E, 0x07
   \   000003D8   CFFE               RJMP    ??main_50
   \   000003DA   B80F               OUT     0x0F, R0
   \                     ??main_51:
   \   000003DC   9B77               SBIS    0x0E, 0x07
   \   000003DE   CFFE               RJMP    ??main_51
   \   000003E0   EF0F               LDI     R16, 255
   \   000003E2   B90F               OUT     0x0F, R16
   \                     ??main_52:
   \   000003E4   9B77               SBIS    0x0E, 0x07
   \   000003E6   CFFE               RJMP    ??main_52
   \   000003E8   B11F               IN      R17, 0x0F
   \   000003EA   B90F               OUT     0x0F, R16
   \   000003EC   9310....           STS     VS_BUFFER32, R17
   \                     ??main_53:
   \   000003F0   9B77               SBIS    0x0E, 0x07
   \   000003F2   CFFE               RJMP    ??main_53
   \   000003F4   B11F               IN      R17, 0x0F
   \   000003F6   B90F               OUT     0x0F, R16
   \   000003F8   9310....           STS     (VS_BUFFER32 + 1), R17
   \                     ??main_54:
   \   000003FC   9B77               SBIS    0x0E, 0x07
   \   000003FE   CFFE               RJMP    ??main_54
   \   00000400   B11F               IN      R17, 0x0F
   \   00000402   B90F               OUT     0x0F, R16
   \   00000404   9310....           STS     (VS_BUFFER32 + 2), R17
   \                     ??main_55:
   \   00000408   9B77               SBIS    0x0E, 0x07
   \   0000040A   CFFE               RJMP    ??main_55
   \   0000040C   B11F               IN      R17, 0x0F
   \   0000040E   B90F               OUT     0x0F, R16
   \   00000410   9310....           STS     (VS_BUFFER32 + 3), R17
   \                     ??main_56:
   \   00000414   9B77               SBIS    0x0E, 0x07
   \   00000416   CFFE               RJMP    ??main_56
   \   00000418   B11F               IN      R17, 0x0F
   \   0000041A   B90F               OUT     0x0F, R16
   \   0000041C   9310....           STS     (VS_BUFFER32 + 4), R17
   \                     ??main_57:
   \   00000420   9B77               SBIS    0x0E, 0x07
   \   00000422   CFFE               RJMP    ??main_57
   \   00000424   B11F               IN      R17, 0x0F
   \   00000426   B90F               OUT     0x0F, R16
   \   00000428   9310....           STS     (VS_BUFFER32 + 5), R17
   \                     ??main_58:
   \   0000042C   9B77               SBIS    0x0E, 0x07
   \   0000042E   CFFE               RJMP    ??main_58
   \   00000430   B11F               IN      R17, 0x0F
   \   00000432   B90F               OUT     0x0F, R16
   \   00000434   9310....           STS     (VS_BUFFER32 + 6), R17
   \                     ??main_59:
   \   00000438   9B77               SBIS    0x0E, 0x07
   \   0000043A   CFFE               RJMP    ??main_59
   \   0000043C   B11F               IN      R17, 0x0F
   \   0000043E   B90F               OUT     0x0F, R16
   \   00000440   9310....           STS     (VS_BUFFER32 + 7), R17
   \                     ??main_60:
   \   00000444   9B77               SBIS    0x0E, 0x07
   \   00000446   CFFE               RJMP    ??main_60
   \   00000448   B11F               IN      R17, 0x0F
   \   0000044A   B90F               OUT     0x0F, R16
   \   0000044C   9310....           STS     (VS_BUFFER32 + 8), R17
   \                     ??main_61:
   \   00000450   9B77               SBIS    0x0E, 0x07
   \   00000452   CFFE               RJMP    ??main_61
   \   00000454   B11F               IN      R17, 0x0F
   \   00000456   B90F               OUT     0x0F, R16
   \   00000458   9310....           STS     (VS_BUFFER32 + 9), R17
   \                     ??main_62:
   \   0000045C   9B77               SBIS    0x0E, 0x07
   \   0000045E   CFFE               RJMP    ??main_62
   \   00000460   B11F               IN      R17, 0x0F
   \   00000462   B90F               OUT     0x0F, R16
   \   00000464   9310....           STS     (VS_BUFFER32 + 10), R17
   \                     ??main_63:
   \   00000468   9B77               SBIS    0x0E, 0x07
   \   0000046A   CFFE               RJMP    ??main_63
   \   0000046C   B11F               IN      R17, 0x0F
   \   0000046E   B90F               OUT     0x0F, R16
   \   00000470   9310....           STS     (VS_BUFFER32 + 11), R17
   \                     ??main_64:
   \   00000474   9B77               SBIS    0x0E, 0x07
   \   00000476   CFFE               RJMP    ??main_64
   \   00000478   B11F               IN      R17, 0x0F
   \   0000047A   B90F               OUT     0x0F, R16
   \   0000047C   9310....           STS     (VS_BUFFER32 + 12), R17
   \                     ??main_65:
   \   00000480   9B77               SBIS    0x0E, 0x07
   \   00000482   CFFE               RJMP    ??main_65
   \   00000484   B11F               IN      R17, 0x0F
   \   00000486   B90F               OUT     0x0F, R16
   \   00000488   9310....           STS     (VS_BUFFER32 + 13), R17
   \                     ??main_66:
   \   0000048C   9B77               SBIS    0x0E, 0x07
   \   0000048E   CFFE               RJMP    ??main_66
   \   00000490   B11F               IN      R17, 0x0F
   \   00000492   B90F               OUT     0x0F, R16
   \   00000494   9310....           STS     (VS_BUFFER32 + 14), R17
   \                     ??main_67:
   \   00000498   9B77               SBIS    0x0E, 0x07
   \   0000049A   CFFE               RJMP    ??main_67
   \   0000049C   B11F               IN      R17, 0x0F
   \   0000049E   B90F               OUT     0x0F, R16
   \   000004A0   9310....           STS     (VS_BUFFER32 + 15), R17
   \                     ??main_68:
   \   000004A4   9B77               SBIS    0x0E, 0x07
   \   000004A6   CFFE               RJMP    ??main_68
   \   000004A8   B11F               IN      R17, 0x0F
   \   000004AA   B90F               OUT     0x0F, R16
   \   000004AC   9310....           STS     (VS_BUFFER32 + 16), R17
   \                     ??main_69:
   \   000004B0   9B77               SBIS    0x0E, 0x07
   \   000004B2   CFFE               RJMP    ??main_69
   \   000004B4   B11F               IN      R17, 0x0F
   \   000004B6   B90F               OUT     0x0F, R16
   \   000004B8   9310....           STS     (VS_BUFFER32 + 17), R17
   \                     ??main_70:
   \   000004BC   9B77               SBIS    0x0E, 0x07
   \   000004BE   CFFE               RJMP    ??main_70
   \   000004C0   B11F               IN      R17, 0x0F
   \   000004C2   B90F               OUT     0x0F, R16
   \   000004C4   9310....           STS     (VS_BUFFER32 + 18), R17
   \                     ??main_71:
   \   000004C8   9B77               SBIS    0x0E, 0x07
   \   000004CA   CFFE               RJMP    ??main_71
   \   000004CC   B11F               IN      R17, 0x0F
   \   000004CE   B90F               OUT     0x0F, R16
   \   000004D0   9310....           STS     (VS_BUFFER32 + 19), R17
   \                     ??main_72:
   \   000004D4   9B77               SBIS    0x0E, 0x07
   \   000004D6   CFFE               RJMP    ??main_72
   \   000004D8   B11F               IN      R17, 0x0F
   \   000004DA   B90F               OUT     0x0F, R16
   \   000004DC   9310....           STS     (VS_BUFFER32 + 20), R17
   \                     ??main_73:
   \   000004E0   9B77               SBIS    0x0E, 0x07
   \   000004E2   CFFE               RJMP    ??main_73
   \   000004E4   B11F               IN      R17, 0x0F
   \   000004E6   B90F               OUT     0x0F, R16
   \   000004E8   9310....           STS     (VS_BUFFER32 + 21), R17
   \                     ??main_74:
   \   000004EC   9B77               SBIS    0x0E, 0x07
   \   000004EE   CFFE               RJMP    ??main_74
   \   000004F0   B11F               IN      R17, 0x0F
   \   000004F2   B90F               OUT     0x0F, R16
   \   000004F4   9310....           STS     (VS_BUFFER32 + 22), R17
   \                     ??main_75:
   \   000004F8   9B77               SBIS    0x0E, 0x07
   \   000004FA   CFFE               RJMP    ??main_75
   \   000004FC   B11F               IN      R17, 0x0F
   \   000004FE   B90F               OUT     0x0F, R16
   \   00000500   9310....           STS     (VS_BUFFER32 + 23), R17
   \                     ??main_76:
   \   00000504   9B77               SBIS    0x0E, 0x07
   \   00000506   CFFE               RJMP    ??main_76
   \   00000508   B11F               IN      R17, 0x0F
   \   0000050A   B90F               OUT     0x0F, R16
   \   0000050C   9310....           STS     (VS_BUFFER32 + 24), R17
   \                     ??main_77:
   \   00000510   9B77               SBIS    0x0E, 0x07
   \   00000512   CFFE               RJMP    ??main_77
   \   00000514   B11F               IN      R17, 0x0F
   \   00000516   B90F               OUT     0x0F, R16
   \   00000518   9310....           STS     (VS_BUFFER32 + 25), R17
   \                     ??main_78:
   \   0000051C   9B77               SBIS    0x0E, 0x07
   \   0000051E   CFFE               RJMP    ??main_78
   \   00000520   B11F               IN      R17, 0x0F
   \   00000522   B90F               OUT     0x0F, R16
   \   00000524   9310....           STS     (VS_BUFFER32 + 26), R17
   \                     ??main_79:
   \   00000528   9B77               SBIS    0x0E, 0x07
   \   0000052A   CFFE               RJMP    ??main_79
   \   0000052C   B11F               IN      R17, 0x0F
   \   0000052E   B90F               OUT     0x0F, R16
   \   00000530   9310....           STS     (VS_BUFFER32 + 27), R17
   \                     ??main_80:
   \   00000534   9B77               SBIS    0x0E, 0x07
   \   00000536   CFFE               RJMP    ??main_80
   \   00000538   B11F               IN      R17, 0x0F
   \   0000053A   B90F               OUT     0x0F, R16
   \   0000053C   9310....           STS     (VS_BUFFER32 + 28), R17
   \                     ??main_81:
   \   00000540   9B77               SBIS    0x0E, 0x07
   \   00000542   CFFE               RJMP    ??main_81
   \   00000544   B11F               IN      R17, 0x0F
   \   00000546   B90F               OUT     0x0F, R16
   \   00000548   9310....           STS     (VS_BUFFER32 + 29), R17
   \                     ??main_82:
   \   0000054C   9B77               SBIS    0x0E, 0x07
   \   0000054E   CFFE               RJMP    ??main_82
   \   00000550   B11F               IN      R17, 0x0F
   \   00000552   B90F               OUT     0x0F, R16
   \   00000554   9310....           STS     (VS_BUFFER32 + 30), R17
   \                     ??main_83:
   \   00000558   9B77               SBIS    0x0E, 0x07
   \   0000055A   CFFE               RJMP    ??main_83
   \   0000055C   B11F               IN      R17, 0x0F
   \   0000055E   9310....           STS     (VS_BUFFER32 + 31), R17
   \   00000562   9A94               SBI     0x12, 0x04
   \   00000564   E200               LDI     R16, 32
   \   00000566   0E00               ADD     R0, R16
   \   00000568   1E12               ADC     R1, R18
   \   0000056A   1E22               ADC     R2, R18
   \   0000056C   1E32               ADC     R3, R18
   \   0000056E   8340               ST      Z, R20
   \   00000570   8211               STD     Z+1, R1
   \   00000572   8222               STD     Z+2, R2
   \   00000574   8233               STD     Z+3, R3
   \   00000576   C050               RJMP    ??main_84
   \                     ??main_47:
   \   00000578   E4E4               LDI     R30, 68
   \   0000057A   19E0               SUB     R30, R0
   \   0000057C   E220               LDI     R18, 32
   \   0000057E   1B2E               SUB     R18, R30
   \   00000580   23EE               TST     R30
   \   00000582   F121               BREQ    ??main_85
   \   00000584   9894               CBI     0x12, 0x04
   \   00000586   E033               LDI     R19, 3
   \   00000588   B93F               OUT     0x0F, R19
   \                     ??main_86:
   \   0000058A   9B77               SBIS    0x0E, 0x07
   \   0000058C   CFFE               RJMP    ??main_86
   \   0000058E   B82F               OUT     0x0F, R2
   \                     ??main_87:
   \   00000590   9B77               SBIS    0x0E, 0x07
   \   00000592   CFFE               RJMP    ??main_87
   \   00000594   B81F               OUT     0x0F, R1
   \                     ??main_88:
   \   00000596   9B77               SBIS    0x0E, 0x07
   \   00000598   CFFE               RJMP    ??main_88
   \   0000059A   B80F               OUT     0x0F, R0
   \                     ??main_89:
   \   0000059C   9B77               SBIS    0x0E, 0x07
   \   0000059E   CFFE               RJMP    ??main_89
   \   000005A0   2F3E               MOV     R19, R30
   \                     ??main_90:
   \   000005A2   EF4F               LDI     R20, 255
   \   000005A4   B94F               OUT     0x0F, R20
   \                     ??main_91:
   \   000005A6   9B77               SBIS    0x0E, 0x07
   \   000005A8   CFFE               RJMP    ??main_91
   \   000005AA   B14F               IN      R20, 0x0F
   \   000005AC   01F8               MOVW    R31:R30, R17:R16
   \   000005AE   9341               ST      Z+, R20
   \   000005B0   018F               MOVW    R17:R16, R31:R30
   \   000005B2   953A               DEC     R19
   \   000005B4   F7B1               BRNE    ??main_90
   \   000005B6   9A94               SBI     0x12, 0x04
   \   000005B8   2400               CLR     R0
   \   000005BA   2411               CLR     R1
   \   000005BC   2422               CLR     R2
   \   000005BE   2433               CLR     R3
   \   000005C0   ....               LDI     R30, LOW(MP3fifo_pRD)
   \   000005C2   ....               LDI     R31, (MP3fifo_pRD) >> 8
   \   000005C4   8200               ST      Z, R0
   \   000005C6   8201               STD     Z+1, R0
   \   000005C8   8202               STD     Z+2, R0
   \   000005CA   8203               STD     Z+3, R0
   \                     ??main_85:
   \   000005CC   2322               TST     R18
   \   000005CE   F121               BREQ    ??main_84
   \   000005D0   9894               CBI     0x12, 0x04
   \   000005D2   E033               LDI     R19, 3
   \   000005D4   B93F               OUT     0x0F, R19
   \                     ??main_92:
   \   000005D6   9B77               SBIS    0x0E, 0x07
   \   000005D8   CFFE               RJMP    ??main_92
   \   000005DA   B82F               OUT     0x0F, R2
   \                     ??main_93:
   \   000005DC   9B77               SBIS    0x0E, 0x07
   \   000005DE   CFFE               RJMP    ??main_93
   \   000005E0   B81F               OUT     0x0F, R1
   \                     ??main_94:
   \   000005E2   9B77               SBIS    0x0E, 0x07
   \   000005E4   CFFE               RJMP    ??main_94
   \   000005E6   B80F               OUT     0x0F, R0
   \   000005E8   E050               LDI     R21, 0
   \   000005EA   0E02               ADD     R0, R18
   \   000005EC   1E15               ADC     R1, R21
   \   000005EE   1E25               ADC     R2, R21
   \   000005F0   1E35               ADC     R3, R21
   \   000005F2   ....               LDI     R30, LOW(MP3fifo_pRD)
   \   000005F4   8200               ST      Z, R0
   \   000005F6   8211               STD     Z+1, R1
   \   000005F8   8222               STD     Z+2, R2
   \   000005FA   8233               STD     Z+3, R3
   \                     ??main_95:
   \   000005FC   9B77               SBIS    0x0E, 0x07
   \   000005FE   CFFE               RJMP    ??main_95
   \   00000600   2F32               MOV     R19, R18
   \                     ??main_96:
   \   00000602   EF2F               LDI     R18, 255
   \   00000604   B92F               OUT     0x0F, R18
   \                     ??main_97:
   \   00000606   9B77               SBIS    0x0E, 0x07
   \   00000608   CFFE               RJMP    ??main_97
   \   0000060A   B12F               IN      R18, 0x0F
   \   0000060C   01F8               MOVW    R31:R30, R17:R16
   \   0000060E   9321               ST      Z+, R18
   \   00000610   018F               MOVW    R17:R16, R31:R30
   \   00000612   953A               DEC     R19
   \   00000614   F7B1               BRNE    ??main_96
   \   00000616   9A94               SBI     0x12, 0x04
   \                     ??main_84:
   \   00000618   98C3               CBI     0x18, 0x03
   \   0000061A   9100....           LDS     R16, VS_BUFFER32
   \   0000061E   B90F               OUT     0x0F, R16
   \                     ??main_98:
   \   00000620   9B77               SBIS    0x0E, 0x07
   \   00000622   CFFE               RJMP    ??main_98
   \   00000624   9100....           LDS     R16, (VS_BUFFER32 + 1)
   \   00000628   B90F               OUT     0x0F, R16
   \                     ??main_99:
   \   0000062A   9B77               SBIS    0x0E, 0x07
   \   0000062C   CFFE               RJMP    ??main_99
   \   0000062E   9100....           LDS     R16, (VS_BUFFER32 + 2)
   \   00000632   B90F               OUT     0x0F, R16
   \                     ??main_100:
   \   00000634   9B77               SBIS    0x0E, 0x07
   \   00000636   CFFE               RJMP    ??main_100
   \   00000638   9100....           LDS     R16, (VS_BUFFER32 + 3)
   \   0000063C   B90F               OUT     0x0F, R16
   \                     ??main_101:
   \   0000063E   9B77               SBIS    0x0E, 0x07
   \   00000640   CFFE               RJMP    ??main_101
   \   00000642   9100....           LDS     R16, (VS_BUFFER32 + 4)
   \   00000646   B90F               OUT     0x0F, R16
   \                     ??main_102:
   \   00000648   9B77               SBIS    0x0E, 0x07
   \   0000064A   CFFE               RJMP    ??main_102
   \   0000064C   9100....           LDS     R16, (VS_BUFFER32 + 5)
   \   00000650   B90F               OUT     0x0F, R16
   \                     ??main_103:
   \   00000652   9B77               SBIS    0x0E, 0x07
   \   00000654   CFFE               RJMP    ??main_103
   \   00000656   9100....           LDS     R16, (VS_BUFFER32 + 6)
   \   0000065A   B90F               OUT     0x0F, R16
   \                     ??main_104:
   \   0000065C   9B77               SBIS    0x0E, 0x07
   \   0000065E   CFFE               RJMP    ??main_104
   \   00000660   9100....           LDS     R16, (VS_BUFFER32 + 7)
   \   00000664   B90F               OUT     0x0F, R16
   \                     ??main_105:
   \   00000666   9B77               SBIS    0x0E, 0x07
   \   00000668   CFFE               RJMP    ??main_105
   \   0000066A   9100....           LDS     R16, (VS_BUFFER32 + 8)
   \   0000066E   B90F               OUT     0x0F, R16
   \                     ??main_106:
   \   00000670   9B77               SBIS    0x0E, 0x07
   \   00000672   CFFE               RJMP    ??main_106
   \   00000674   9100....           LDS     R16, (VS_BUFFER32 + 9)
   \   00000678   B90F               OUT     0x0F, R16
   \                     ??main_107:
   \   0000067A   9B77               SBIS    0x0E, 0x07
   \   0000067C   CFFE               RJMP    ??main_107
   \   0000067E   9100....           LDS     R16, (VS_BUFFER32 + 10)
   \   00000682   B90F               OUT     0x0F, R16
   \                     ??main_108:
   \   00000684   9B77               SBIS    0x0E, 0x07
   \   00000686   CFFE               RJMP    ??main_108
   \   00000688   9100....           LDS     R16, (VS_BUFFER32 + 11)
   \   0000068C   B90F               OUT     0x0F, R16
   \                     ??main_109:
   \   0000068E   9B77               SBIS    0x0E, 0x07
   \   00000690   CFFE               RJMP    ??main_109
   \   00000692   9100....           LDS     R16, (VS_BUFFER32 + 12)
   \   00000696   B90F               OUT     0x0F, R16
   \                     ??main_110:
   \   00000698   9B77               SBIS    0x0E, 0x07
   \   0000069A   CFFE               RJMP    ??main_110
   \   0000069C   9100....           LDS     R16, (VS_BUFFER32 + 13)
   \   000006A0   B90F               OUT     0x0F, R16
   \                     ??main_111:
   \   000006A2   9B77               SBIS    0x0E, 0x07
   \   000006A4   CFFE               RJMP    ??main_111
   \   000006A6   9100....           LDS     R16, (VS_BUFFER32 + 14)
   \   000006AA   B90F               OUT     0x0F, R16
   \                     ??main_112:
   \   000006AC   9B77               SBIS    0x0E, 0x07
   \   000006AE   CFFE               RJMP    ??main_112
   \   000006B0   9100....           LDS     R16, (VS_BUFFER32 + 15)
   \   000006B4   B90F               OUT     0x0F, R16
   \                     ??main_113:
   \   000006B6   9B77               SBIS    0x0E, 0x07
   \   000006B8   CFFE               RJMP    ??main_113
   \   000006BA   9100....           LDS     R16, (VS_BUFFER32 + 16)
   \   000006BE   B90F               OUT     0x0F, R16
   \                     ??main_114:
   \   000006C0   9B77               SBIS    0x0E, 0x07
   \   000006C2   CFFE               RJMP    ??main_114
   \   000006C4   9100....           LDS     R16, (VS_BUFFER32 + 17)
   \   000006C8   B90F               OUT     0x0F, R16
   \                     ??main_115:
   \   000006CA   9B77               SBIS    0x0E, 0x07
   \   000006CC   CFFE               RJMP    ??main_115
   \   000006CE   9100....           LDS     R16, (VS_BUFFER32 + 18)
   \   000006D2   B90F               OUT     0x0F, R16
   \                     ??main_116:
   \   000006D4   9B77               SBIS    0x0E, 0x07
   \   000006D6   CFFE               RJMP    ??main_116
   \   000006D8   9100....           LDS     R16, (VS_BUFFER32 + 19)
   \   000006DC   B90F               OUT     0x0F, R16
   \                     ??main_117:
   \   000006DE   9B77               SBIS    0x0E, 0x07
   \   000006E0   CFFE               RJMP    ??main_117
   \   000006E2   9100....           LDS     R16, (VS_BUFFER32 + 20)
   \   000006E6   B90F               OUT     0x0F, R16
   \                     ??main_118:
   \   000006E8   9B77               SBIS    0x0E, 0x07
   \   000006EA   CFFE               RJMP    ??main_118
   \   000006EC   9100....           LDS     R16, (VS_BUFFER32 + 21)
   \   000006F0   B90F               OUT     0x0F, R16
   \                     ??main_119:
   \   000006F2   9B77               SBIS    0x0E, 0x07
   \   000006F4   CFFE               RJMP    ??main_119
   \   000006F6   9100....           LDS     R16, (VS_BUFFER32 + 22)
   \   000006FA   B90F               OUT     0x0F, R16
   \                     ??main_120:
   \   000006FC   9B77               SBIS    0x0E, 0x07
   \   000006FE   CFFE               RJMP    ??main_120
   \   00000700   9100....           LDS     R16, (VS_BUFFER32 + 23)
   \   00000704   B90F               OUT     0x0F, R16
   \                     ??main_121:
   \   00000706   9B77               SBIS    0x0E, 0x07
   \   00000708   CFFE               RJMP    ??main_121
   \   0000070A   9100....           LDS     R16, (VS_BUFFER32 + 24)
   \   0000070E   B90F               OUT     0x0F, R16
   \                     ??main_122:
   \   00000710   9B77               SBIS    0x0E, 0x07
   \   00000712   CFFE               RJMP    ??main_122
   \   00000714   9100....           LDS     R16, (VS_BUFFER32 + 25)
   \   00000718   B90F               OUT     0x0F, R16
   \                     ??main_123:
   \   0000071A   9B77               SBIS    0x0E, 0x07
   \   0000071C   CFFE               RJMP    ??main_123
   \   0000071E   9100....           LDS     R16, (VS_BUFFER32 + 26)
   \   00000722   B90F               OUT     0x0F, R16
   \                     ??main_124:
   \   00000724   9B77               SBIS    0x0E, 0x07
   \   00000726   CFFE               RJMP    ??main_124
   \   00000728   9100....           LDS     R16, (VS_BUFFER32 + 27)
   \   0000072C   B90F               OUT     0x0F, R16
   \                     ??main_125:
   \   0000072E   9B77               SBIS    0x0E, 0x07
   \   00000730   CFFE               RJMP    ??main_125
   \   00000732   9100....           LDS     R16, (VS_BUFFER32 + 28)
   \   00000736   B90F               OUT     0x0F, R16
   \                     ??main_126:
   \   00000738   9B77               SBIS    0x0E, 0x07
   \   0000073A   CFFE               RJMP    ??main_126
   \   0000073C   9100....           LDS     R16, (VS_BUFFER32 + 29)
   \   00000740   B90F               OUT     0x0F, R16
   \                     ??main_127:
   \   00000742   9B77               SBIS    0x0E, 0x07
   \   00000744   CFFE               RJMP    ??main_127
   \   00000746   9100....           LDS     R16, (VS_BUFFER32 + 30)
   \   0000074A   B90F               OUT     0x0F, R16
   \                     ??main_128:
   \   0000074C   9B77               SBIS    0x0E, 0x07
   \   0000074E   CFFE               RJMP    ??main_128
   \   00000750   9100....           LDS     R16, (VS_BUFFER32 + 31)
   \   00000754   B90F               OUT     0x0F, R16
   \                     ??main_129:
   \   00000756   9B77               SBIS    0x0E, 0x07
   \   00000758   CFFE               RJMP    ??main_129
   \   0000075A   9AC3               SBI     0x18, 0x03
   \                     ??main_42:
   \   0000075C   9100....           LDS     R16, GET_WINDOW_STATE
   \   00000760   3001               CPI     R16, 1
   \   00000762   F009               BREQ    $+2+2
   \   00000764   CDC6               RJMP    ??main_41
   \   00000766   9100....           LDS     R16, PLAYER_STATE
   \   0000076A   950A               DEC     R16
   \   0000076C   F021               BREQ    ??main_130
   \   0000076E   950A               DEC     R16
   \   00000770   F409               BRNE    $+2+2
   \   00000772   CDBC               RJMP    ??main_40
   \   00000774   CDBE               RJMP    ??main_41
   \                     ??main_130:
   \   00000776   E002               LDI     R16, 2
   \   00000778   9300....           STS     PLAYER_STATE, R16
   \   0000077C   ....               LDI     R30, LOW((`?<Constant "Buffering">` + 10))
   \   0000077E   ....               LDI     R31, HIGH((`?<Constant "Buffering">` + 10))
   \   00000780   E001               LDI     R16, 1
   \   00000782   ........           CALL    LCD_fprintline
   \   00000786   CDB2               RJMP    ??main_40
   \                     ??main_14:
   \   00000788   B709               IN      R16, 0x39
   \   0000078A   6400               ORI     R16, 0x40
   \   0000078C   BF09               OUT     0x39, R16
   \   0000078E   E084               LDI     R24, 4
   \                     ??main_131:
   \   00000790   9100....           LDS     R16, PLAYER_STATE
   \   00000794   3002               CPI     R16, 2
   \   00000796   F009               BREQ    $+2+2
   \   00000798   C228               RJMP    ??main_132
   \   0000079A   9B87               SBIS    0x10, 0x07
   \   0000079C   C226               RJMP    ??main_132
   \   0000079E   ....               LDI     R26, LOW(VS_BUFFER32)
   \   000007A0   ....               LDI     R27, (VS_BUFFER32) >> 8
   \   000007A2   ....               LDI     R30, LOW(MP3fifo_pWR)
   \   000007A4   ....               LDI     R31, (MP3fifo_pWR) >> 8
   \   000007A6   8100               LD      R16, Z
   \   000007A8   8111               LDD     R17, Z+1
   \   000007AA   8122               LDD     R18, Z+2
   \   000007AC   8133               LDD     R19, Z+3
   \   000007AE   ....               LDI     R30, LOW(MP3fifo_pRD)
   \   000007B0   ....               LDI     R31, (MP3fifo_pRD) >> 8
   \   000007B2   8140               LD      R20, Z
   \   000007B4   8151               LDD     R21, Z+1
   \   000007B6   8162               LDD     R22, Z+2
   \   000007B8   8173               LDD     R23, Z+3
   \   000007BA   1704               CP      R16, R20
   \   000007BC   0715               CPC     R17, R21
   \   000007BE   0726               CPC     R18, R22
   \   000007C0   0737               CPC     R19, R23
   \   000007C2   F498               BRCC    ??main_133
   \   000007C4   E404               LDI     R16, 68
   \   000007C6   EC19               LDI     R17, 201
   \   000007C8   E021               LDI     R18, 1
   \   000007CA   E030               LDI     R19, 0
   \   000007CC   1B04               SUB     R16, R20
   \   000007CE   0B15               SBC     R17, R21
   \   000007D0   0B26               SBC     R18, R22
   \   000007D2   0B37               SBC     R19, R23
   \   000007D4   ....               LDI     R30, LOW(MP3fifo_pWR)
   \   000007D6   ....               LDI     R31, (MP3fifo_pWR) >> 8
   \   000007D8   8140               LD      R20, Z
   \   000007DA   8151               LDD     R21, Z+1
   \   000007DC   8162               LDD     R22, Z+2
   \   000007DE   8173               LDD     R23, Z+3
   \   000007E0   0F04               ADD     R16, R20
   \   000007E2   1F15               ADC     R17, R21
   \   000007E4   1F26               ADC     R18, R22
   \   000007E6   1F37               ADC     R19, R23
   \   000007E8   C019               RJMP    ??main_134
   \                     ??main_133:
   \   000007EA   018A               MOVW    R17:R16, R21:R20
   \   000007EC   019B               MOVW    R19:R18, R23:R22
   \   000007EE   ....               LDI     R30, LOW(MP3fifo_pWR)
   \   000007F0   ....               LDI     R31, (MP3fifo_pWR) >> 8
   \   000007F2   8140               LD      R20, Z
   \   000007F4   8151               LDD     R21, Z+1
   \   000007F6   8162               LDD     R22, Z+2
   \   000007F8   8173               LDD     R23, Z+3
   \   000007FA   1704               CP      R16, R20
   \   000007FC   0715               CPC     R17, R21
   \   000007FE   0726               CPC     R18, R22
   \   00000800   0737               CPC     R19, R23
   \   00000802   F488               BRCC    ??main_135
   \   00000804   018A               MOVW    R17:R16, R21:R20
   \   00000806   019B               MOVW    R19:R18, R23:R22
   \   00000808   ....               LDI     R30, LOW(MP3fifo_pRD)
   \   0000080A   ....               LDI     R31, (MP3fifo_pRD) >> 8
   \   0000080C   8140               LD      R20, Z
   \   0000080E   8151               LDD     R21, Z+1
   \   00000810   8162               LDD     R22, Z+2
   \   00000812   8173               LDD     R23, Z+3
   \   00000814   1B04               SUB     R16, R20
   \   00000816   0B15               SBC     R17, R21
   \   00000818   0B26               SBC     R18, R22
   \   0000081A   0B37               SBC     R19, R23
   \                     ??main_134:
   \   0000081C   3200               CPI     R16, 32
   \   0000081E   4010               SBCI    R17, 0
   \   00000820   4020               SBCI    R18, 0
   \   00000822   4030               SBCI    R19, 0
   \   00000824   F440               BRCC    ??main_136
   \                     ??main_135:
   \   00000826   E001               LDI     R16, 1
   \   00000828   9300....           STS     PLAYER_STATE, R16
   \   0000082C   ....               LDI     R30, LOW(`?<Constant "Buffering">`)
   \   0000082E   ....               LDI     R31, (`?<Constant "Buffering">`) >> 8
   \   00000830   ........           CALL    LCD_fprintline
   \   00000834   C1DA               RJMP    ??main_132
   \                     ??main_136:
   \   00000836   ....               LDI     R30, LOW(MP3fifo_pRD)
   \   00000838   ....               LDI     R31, (MP3fifo_pRD) >> 8
   \   0000083A   8140               LD      R20, Z
   \   0000083C   8151               LDD     R21, Z+1
   \   0000083E   8162               LDD     R22, Z+2
   \   00000840   8173               LDD     R23, Z+3
   \   00000842   018A               MOVW    R17:R16, R21:R20
   \   00000844   019B               MOVW    R19:R18, R23:R22
   \   00000846   5E00               SUBI    R16, 224
   \   00000848   4F1F               SBCI    R17, 255
   \   0000084A   4F2F               SBCI    R18, 255
   \   0000084C   4F3F               SBCI    R19, 255
   \   0000084E   3404               CPI     R16, 68
   \   00000850   4C19               SBCI    R17, 201
   \   00000852   E0E1               LDI     R30, 1
   \   00000854   072E               CPC     R18, R30
   \   00000856   E0E0               LDI     R30, 0
   \   00000858   073E               CPC     R19, R30
   \   0000085A   F008               BRCS    $+2+2
   \   0000085C   C0D8               RJMP    ??main_137
   \   0000085E   9894               CBI     0x12, 0x04
   \   00000860   E003               LDI     R16, 3
   \   00000862   B90F               OUT     0x0F, R16
   \                     ??main_138:
   \   00000864   9B77               SBIS    0x0E, 0x07
   \   00000866   CFFE               RJMP    ??main_138
   \   00000868   B96F               OUT     0x0F, R22
   \                     ??main_139:
   \   0000086A   9B77               SBIS    0x0E, 0x07
   \   0000086C   CFFE               RJMP    ??main_139
   \   0000086E   B95F               OUT     0x0F, R21
   \                     ??main_140:
   \   00000870   9B77               SBIS    0x0E, 0x07
   \   00000872   CFFE               RJMP    ??main_140
   \   00000874   B94F               OUT     0x0F, R20
   \                     ??main_141:
   \   00000876   9B77               SBIS    0x0E, 0x07
   \   00000878   CFFE               RJMP    ??main_141
   \   0000087A   EF0F               LDI     R16, 255
   \   0000087C   B90F               OUT     0x0F, R16
   \                     ??main_142:
   \   0000087E   9B77               SBIS    0x0E, 0x07
   \   00000880   CFFE               RJMP    ??main_142
   \   00000882   B11F               IN      R17, 0x0F
   \   00000884   B90F               OUT     0x0F, R16
   \   00000886   9310....           STS     VS_BUFFER32, R17
   \                     ??main_143:
   \   0000088A   9B77               SBIS    0x0E, 0x07
   \   0000088C   CFFE               RJMP    ??main_143
   \   0000088E   B11F               IN      R17, 0x0F
   \   00000890   B90F               OUT     0x0F, R16
   \   00000892   9310....           STS     (VS_BUFFER32 + 1), R17
   \                     ??main_144:
   \   00000896   9B77               SBIS    0x0E, 0x07
   \   00000898   CFFE               RJMP    ??main_144
   \   0000089A   B11F               IN      R17, 0x0F
   \   0000089C   B90F               OUT     0x0F, R16
   \   0000089E   9310....           STS     (VS_BUFFER32 + 2), R17
   \                     ??main_145:
   \   000008A2   9B77               SBIS    0x0E, 0x07
   \   000008A4   CFFE               RJMP    ??main_145
   \   000008A6   B11F               IN      R17, 0x0F
   \   000008A8   B90F               OUT     0x0F, R16
   \   000008AA   9310....           STS     (VS_BUFFER32 + 3), R17
   \                     ??main_146:
   \   000008AE   9B77               SBIS    0x0E, 0x07
   \   000008B0   CFFE               RJMP    ??main_146
   \   000008B2   B11F               IN      R17, 0x0F
   \   000008B4   B90F               OUT     0x0F, R16
   \   000008B6   9310....           STS     (VS_BUFFER32 + 4), R17
   \                     ??main_147:
   \   000008BA   9B77               SBIS    0x0E, 0x07
   \   000008BC   CFFE               RJMP    ??main_147
   \   000008BE   B11F               IN      R17, 0x0F
   \   000008C0   B90F               OUT     0x0F, R16
   \   000008C2   9310....           STS     (VS_BUFFER32 + 5), R17
   \                     ??main_148:
   \   000008C6   9B77               SBIS    0x0E, 0x07
   \   000008C8   CFFE               RJMP    ??main_148
   \   000008CA   B11F               IN      R17, 0x0F
   \   000008CC   B90F               OUT     0x0F, R16
   \   000008CE   9310....           STS     (VS_BUFFER32 + 6), R17
   \                     ??main_149:
   \   000008D2   9B77               SBIS    0x0E, 0x07
   \   000008D4   CFFE               RJMP    ??main_149
   \   000008D6   B11F               IN      R17, 0x0F
   \   000008D8   B90F               OUT     0x0F, R16
   \   000008DA   9310....           STS     (VS_BUFFER32 + 7), R17
   \                     ??main_150:
   \   000008DE   9B77               SBIS    0x0E, 0x07
   \   000008E0   CFFE               RJMP    ??main_150
   \   000008E2   B11F               IN      R17, 0x0F
   \   000008E4   B90F               OUT     0x0F, R16
   \   000008E6   9310....           STS     (VS_BUFFER32 + 8), R17
   \                     ??main_151:
   \   000008EA   9B77               SBIS    0x0E, 0x07
   \   000008EC   CFFE               RJMP    ??main_151
   \   000008EE   B11F               IN      R17, 0x0F
   \   000008F0   B90F               OUT     0x0F, R16
   \   000008F2   9310....           STS     (VS_BUFFER32 + 9), R17
   \                     ??main_152:
   \   000008F6   9B77               SBIS    0x0E, 0x07
   \   000008F8   CFFE               RJMP    ??main_152
   \   000008FA   B11F               IN      R17, 0x0F
   \   000008FC   B90F               OUT     0x0F, R16
   \   000008FE   9310....           STS     (VS_BUFFER32 + 10), R17
   \                     ??main_153:
   \   00000902   9B77               SBIS    0x0E, 0x07
   \   00000904   CFFE               RJMP    ??main_153
   \   00000906   B11F               IN      R17, 0x0F
   \   00000908   B90F               OUT     0x0F, R16
   \   0000090A   9310....           STS     (VS_BUFFER32 + 11), R17
   \                     ??main_154:
   \   0000090E   9B77               SBIS    0x0E, 0x07
   \   00000910   CFFE               RJMP    ??main_154
   \   00000912   B11F               IN      R17, 0x0F
   \   00000914   B90F               OUT     0x0F, R16
   \   00000916   9310....           STS     (VS_BUFFER32 + 12), R17
   \                     ??main_155:
   \   0000091A   9B77               SBIS    0x0E, 0x07
   \   0000091C   CFFE               RJMP    ??main_155
   \   0000091E   B11F               IN      R17, 0x0F
   \   00000920   B90F               OUT     0x0F, R16
   \   00000922   9310....           STS     (VS_BUFFER32 + 13), R17
   \                     ??main_156:
   \   00000926   9B77               SBIS    0x0E, 0x07
   \   00000928   CFFE               RJMP    ??main_156
   \   0000092A   B11F               IN      R17, 0x0F
   \   0000092C   B90F               OUT     0x0F, R16
   \   0000092E   9310....           STS     (VS_BUFFER32 + 14), R17
   \                     ??main_157:
   \   00000932   9B77               SBIS    0x0E, 0x07
   \   00000934   CFFE               RJMP    ??main_157
   \   00000936   B11F               IN      R17, 0x0F
   \   00000938   B90F               OUT     0x0F, R16
   \   0000093A   9310....           STS     (VS_BUFFER32 + 15), R17
   \                     ??main_158:
   \   0000093E   9B77               SBIS    0x0E, 0x07
   \   00000940   CFFE               RJMP    ??main_158
   \   00000942   B11F               IN      R17, 0x0F
   \   00000944   B90F               OUT     0x0F, R16
   \   00000946   9310....           STS     (VS_BUFFER32 + 16), R17
   \                     ??main_159:
   \   0000094A   9B77               SBIS    0x0E, 0x07
   \   0000094C   CFFE               RJMP    ??main_159
   \   0000094E   B11F               IN      R17, 0x0F
   \   00000950   B90F               OUT     0x0F, R16
   \   00000952   9310....           STS     (VS_BUFFER32 + 17), R17
   \                     ??main_160:
   \   00000956   9B77               SBIS    0x0E, 0x07
   \   00000958   CFFE               RJMP    ??main_160
   \   0000095A   B11F               IN      R17, 0x0F
   \   0000095C   B90F               OUT     0x0F, R16
   \   0000095E   9310....           STS     (VS_BUFFER32 + 18), R17
   \                     ??main_161:
   \   00000962   9B77               SBIS    0x0E, 0x07
   \   00000964   CFFE               RJMP    ??main_161
   \   00000966   B11F               IN      R17, 0x0F
   \   00000968   B90F               OUT     0x0F, R16
   \   0000096A   9310....           STS     (VS_BUFFER32 + 19), R17
   \                     ??main_162:
   \   0000096E   9B77               SBIS    0x0E, 0x07
   \   00000970   CFFE               RJMP    ??main_162
   \   00000972   B11F               IN      R17, 0x0F
   \   00000974   B90F               OUT     0x0F, R16
   \   00000976   9310....           STS     (VS_BUFFER32 + 20), R17
   \                     ??main_163:
   \   0000097A   9B77               SBIS    0x0E, 0x07
   \   0000097C   CFFE               RJMP    ??main_163
   \   0000097E   B11F               IN      R17, 0x0F
   \   00000980   B90F               OUT     0x0F, R16
   \   00000982   9310....           STS     (VS_BUFFER32 + 21), R17
   \                     ??main_164:
   \   00000986   9B77               SBIS    0x0E, 0x07
   \   00000988   CFFE               RJMP    ??main_164
   \   0000098A   B11F               IN      R17, 0x0F
   \   0000098C   B90F               OUT     0x0F, R16
   \   0000098E   9310....           STS     (VS_BUFFER32 + 22), R17
   \                     ??main_165:
   \   00000992   9B77               SBIS    0x0E, 0x07
   \   00000994   CFFE               RJMP    ??main_165
   \   00000996   B11F               IN      R17, 0x0F
   \   00000998   B90F               OUT     0x0F, R16
   \   0000099A   9310....           STS     (VS_BUFFER32 + 23), R17
   \                     ??main_166:
   \   0000099E   9B77               SBIS    0x0E, 0x07
   \   000009A0   CFFE               RJMP    ??main_166
   \   000009A2   B11F               IN      R17, 0x0F
   \   000009A4   B90F               OUT     0x0F, R16
   \   000009A6   9310....           STS     (VS_BUFFER32 + 24), R17
   \                     ??main_167:
   \   000009AA   9B77               SBIS    0x0E, 0x07
   \   000009AC   CFFE               RJMP    ??main_167
   \   000009AE   B11F               IN      R17, 0x0F
   \   000009B0   B90F               OUT     0x0F, R16
   \   000009B2   9310....           STS     (VS_BUFFER32 + 25), R17
   \                     ??main_168:
   \   000009B6   9B77               SBIS    0x0E, 0x07
   \   000009B8   CFFE               RJMP    ??main_168
   \   000009BA   B11F               IN      R17, 0x0F
   \   000009BC   B90F               OUT     0x0F, R16
   \   000009BE   9310....           STS     (VS_BUFFER32 + 26), R17
   \                     ??main_169:
   \   000009C2   9B77               SBIS    0x0E, 0x07
   \   000009C4   CFFE               RJMP    ??main_169
   \   000009C6   B11F               IN      R17, 0x0F
   \   000009C8   B90F               OUT     0x0F, R16
   \   000009CA   9310....           STS     (VS_BUFFER32 + 27), R17
   \                     ??main_170:
   \   000009CE   9B77               SBIS    0x0E, 0x07
   \   000009D0   CFFE               RJMP    ??main_170
   \   000009D2   B11F               IN      R17, 0x0F
   \   000009D4   B90F               OUT     0x0F, R16
   \   000009D6   9310....           STS     (VS_BUFFER32 + 28), R17
   \                     ??main_171:
   \   000009DA   9B77               SBIS    0x0E, 0x07
   \   000009DC   CFFE               RJMP    ??main_171
   \   000009DE   B11F               IN      R17, 0x0F
   \   000009E0   B90F               OUT     0x0F, R16
   \   000009E2   9310....           STS     (VS_BUFFER32 + 29), R17
   \                     ??main_172:
   \   000009E6   9B77               SBIS    0x0E, 0x07
   \   000009E8   CFFE               RJMP    ??main_172
   \   000009EA   B11F               IN      R17, 0x0F
   \   000009EC   B90F               OUT     0x0F, R16
   \   000009EE   9310....           STS     (VS_BUFFER32 + 30), R17
   \                     ??main_173:
   \   000009F2   9B77               SBIS    0x0E, 0x07
   \   000009F4   CFFE               RJMP    ??main_173
   \   000009F6   B11F               IN      R17, 0x0F
   \   000009F8   9310....           STS     (VS_BUFFER32 + 31), R17
   \   000009FC   9A94               SBI     0x12, 0x04
   \   000009FE   5E40               SUBI    R20, 224
   \   00000A00   4F5F               SBCI    R21, 255
   \   00000A02   ....               LDI     R30, LOW(MP3fifo_pRD)
   \   00000A04   8340               ST      Z, R20
   \   00000A06   8351               STD     Z+1, R21
   \   00000A08   8322               STD     Z+2, R18
   \   00000A0A   8333               STD     Z+3, R19
   \   00000A0C   C04C               RJMP    ??main_174
   \                     ??main_137:
   \   00000A0E   E4E4               LDI     R30, 68
   \   00000A10   1BE4               SUB     R30, R20
   \   00000A12   E200               LDI     R16, 32
   \   00000A14   2E00               MOV     R0, R16
   \   00000A16   1A0E               SUB     R0, R30
   \   00000A18   23EE               TST     R30
   \   00000A1A   F109               BREQ    ??main_175
   \   00000A1C   9894               CBI     0x12, 0x04
   \   00000A1E   E003               LDI     R16, 3
   \   00000A20   B90F               OUT     0x0F, R16
   \                     ??main_176:
   \   00000A22   9B77               SBIS    0x0E, 0x07
   \   00000A24   CFFE               RJMP    ??main_176
   \   00000A26   B96F               OUT     0x0F, R22
   \                     ??main_177:
   \   00000A28   9B77               SBIS    0x0E, 0x07
   \   00000A2A   CFFE               RJMP    ??main_177
   \   00000A2C   B95F               OUT     0x0F, R21
   \                     ??main_178:
   \   00000A2E   9B77               SBIS    0x0E, 0x07
   \   00000A30   CFFE               RJMP    ??main_178
   \   00000A32   B94F               OUT     0x0F, R20
   \                     ??main_179:
   \   00000A34   9B77               SBIS    0x0E, 0x07
   \   00000A36   CFFE               RJMP    ??main_179
   \   00000A38   2F0E               MOV     R16, R30
   \                     ??main_180:
   \   00000A3A   EF1F               LDI     R17, 255
   \   00000A3C   B91F               OUT     0x0F, R17
   \                     ??main_181:
   \   00000A3E   9B77               SBIS    0x0E, 0x07
   \   00000A40   CFFE               RJMP    ??main_181
   \   00000A42   B11F               IN      R17, 0x0F
   \   00000A44   931D               ST      X+, R17
   \   00000A46   950A               DEC     R16
   \   00000A48   F7C1               BRNE    ??main_180
   \   00000A4A   9A94               SBI     0x12, 0x04
   \   00000A4C   E040               LDI     R20, 0
   \   00000A4E   E050               LDI     R21, 0
   \   00000A50   E060               LDI     R22, 0
   \   00000A52   E070               LDI     R23, 0
   \   00000A54   ....               LDI     R30, LOW(MP3fifo_pRD)
   \   00000A56   8340               ST      Z, R20
   \   00000A58   8341               STD     Z+1, R20
   \   00000A5A   8342               STD     Z+2, R20
   \   00000A5C   8343               STD     Z+3, R20
   \                     ??main_175:
   \   00000A5E   2000               TST     R0
   \   00000A60   F111               BREQ    ??main_174
   \   00000A62   9894               CBI     0x12, 0x04
   \   00000A64   E003               LDI     R16, 3
   \   00000A66   B90F               OUT     0x0F, R16
   \                     ??main_182:
   \   00000A68   9B77               SBIS    0x0E, 0x07
   \   00000A6A   CFFE               RJMP    ??main_182
   \   00000A6C   B96F               OUT     0x0F, R22
   \                     ??main_183:
   \   00000A6E   9B77               SBIS    0x0E, 0x07
   \   00000A70   CFFE               RJMP    ??main_183
   \   00000A72   B95F               OUT     0x0F, R21
   \                     ??main_184:
   \   00000A74   9B77               SBIS    0x0E, 0x07
   \   00000A76   CFFE               RJMP    ??main_184
   \   00000A78   B94F               OUT     0x0F, R20
   \   00000A7A   2411               CLR     R1
   \   00000A7C   0D40               ADD     R20, R0
   \   00000A7E   1D51               ADC     R21, R1
   \   00000A80   1D61               ADC     R22, R1
   \   00000A82   1D71               ADC     R23, R1
   \   00000A84   ....               LDI     R30, LOW(MP3fifo_pRD)
   \   00000A86   8340               ST      Z, R20
   \   00000A88   8351               STD     Z+1, R21
   \   00000A8A   8362               STD     Z+2, R22
   \   00000A8C   8373               STD     Z+3, R23
   \                     ??main_185:
   \   00000A8E   9B77               SBIS    0x0E, 0x07
   \   00000A90   CFFE               RJMP    ??main_185
   \   00000A92   2D00               MOV     R16, R0
   \                     ??main_186:
   \   00000A94   EF1F               LDI     R17, 255
   \   00000A96   B91F               OUT     0x0F, R17
   \                     ??main_187:
   \   00000A98   9B77               SBIS    0x0E, 0x07
   \   00000A9A   CFFE               RJMP    ??main_187
   \   00000A9C   B11F               IN      R17, 0x0F
   \   00000A9E   931D               ST      X+, R17
   \   00000AA0   950A               DEC     R16
   \   00000AA2   F7C1               BRNE    ??main_186
   \   00000AA4   9A94               SBI     0x12, 0x04
   \                     ??main_174:
   \   00000AA6   98C3               CBI     0x18, 0x03
   \   00000AA8   9100....           LDS     R16, VS_BUFFER32
   \   00000AAC   B90F               OUT     0x0F, R16
   \                     ??main_188:
   \   00000AAE   9B77               SBIS    0x0E, 0x07
   \   00000AB0   CFFE               RJMP    ??main_188
   \   00000AB2   9100....           LDS     R16, (VS_BUFFER32 + 1)
   \   00000AB6   B90F               OUT     0x0F, R16
   \                     ??main_189:
   \   00000AB8   9B77               SBIS    0x0E, 0x07
   \   00000ABA   CFFE               RJMP    ??main_189
   \   00000ABC   9100....           LDS     R16, (VS_BUFFER32 + 2)
   \   00000AC0   B90F               OUT     0x0F, R16
   \                     ??main_190:
   \   00000AC2   9B77               SBIS    0x0E, 0x07
   \   00000AC4   CFFE               RJMP    ??main_190
   \   00000AC6   9100....           LDS     R16, (VS_BUFFER32 + 3)
   \   00000ACA   B90F               OUT     0x0F, R16
   \                     ??main_191:
   \   00000ACC   9B77               SBIS    0x0E, 0x07
   \   00000ACE   CFFE               RJMP    ??main_191
   \   00000AD0   9100....           LDS     R16, (VS_BUFFER32 + 4)
   \   00000AD4   B90F               OUT     0x0F, R16
   \                     ??main_192:
   \   00000AD6   9B77               SBIS    0x0E, 0x07
   \   00000AD8   CFFE               RJMP    ??main_192
   \   00000ADA   9100....           LDS     R16, (VS_BUFFER32 + 5)
   \   00000ADE   B90F               OUT     0x0F, R16
   \                     ??main_193:
   \   00000AE0   9B77               SBIS    0x0E, 0x07
   \   00000AE2   CFFE               RJMP    ??main_193
   \   00000AE4   9100....           LDS     R16, (VS_BUFFER32 + 6)
   \   00000AE8   B90F               OUT     0x0F, R16
   \                     ??main_194:
   \   00000AEA   9B77               SBIS    0x0E, 0x07
   \   00000AEC   CFFE               RJMP    ??main_194
   \   00000AEE   9100....           LDS     R16, (VS_BUFFER32 + 7)
   \   00000AF2   B90F               OUT     0x0F, R16
   \                     ??main_195:
   \   00000AF4   9B77               SBIS    0x0E, 0x07
   \   00000AF6   CFFE               RJMP    ??main_195
   \   00000AF8   9100....           LDS     R16, (VS_BUFFER32 + 8)
   \   00000AFC   B90F               OUT     0x0F, R16
   \                     ??main_196:
   \   00000AFE   9B77               SBIS    0x0E, 0x07
   \   00000B00   CFFE               RJMP    ??main_196
   \   00000B02   9100....           LDS     R16, (VS_BUFFER32 + 9)
   \   00000B06   B90F               OUT     0x0F, R16
   \                     ??main_197:
   \   00000B08   9B77               SBIS    0x0E, 0x07
   \   00000B0A   CFFE               RJMP    ??main_197
   \   00000B0C   9100....           LDS     R16, (VS_BUFFER32 + 10)
   \   00000B10   B90F               OUT     0x0F, R16
   \                     ??main_198:
   \   00000B12   9B77               SBIS    0x0E, 0x07
   \   00000B14   CFFE               RJMP    ??main_198
   \   00000B16   9100....           LDS     R16, (VS_BUFFER32 + 11)
   \   00000B1A   B90F               OUT     0x0F, R16
   \                     ??main_199:
   \   00000B1C   9B77               SBIS    0x0E, 0x07
   \   00000B1E   CFFE               RJMP    ??main_199
   \   00000B20   9100....           LDS     R16, (VS_BUFFER32 + 12)
   \   00000B24   B90F               OUT     0x0F, R16
   \                     ??main_200:
   \   00000B26   9B77               SBIS    0x0E, 0x07
   \   00000B28   CFFE               RJMP    ??main_200
   \   00000B2A   9100....           LDS     R16, (VS_BUFFER32 + 13)
   \   00000B2E   B90F               OUT     0x0F, R16
   \                     ??main_201:
   \   00000B30   9B77               SBIS    0x0E, 0x07
   \   00000B32   CFFE               RJMP    ??main_201
   \   00000B34   9100....           LDS     R16, (VS_BUFFER32 + 14)
   \   00000B38   B90F               OUT     0x0F, R16
   \                     ??main_202:
   \   00000B3A   9B77               SBIS    0x0E, 0x07
   \   00000B3C   CFFE               RJMP    ??main_202
   \   00000B3E   9100....           LDS     R16, (VS_BUFFER32 + 15)
   \   00000B42   B90F               OUT     0x0F, R16
   \                     ??main_203:
   \   00000B44   9B77               SBIS    0x0E, 0x07
   \   00000B46   CFFE               RJMP    ??main_203
   \   00000B48   9100....           LDS     R16, (VS_BUFFER32 + 16)
   \   00000B4C   B90F               OUT     0x0F, R16
   \                     ??main_204:
   \   00000B4E   9B77               SBIS    0x0E, 0x07
   \   00000B50   CFFE               RJMP    ??main_204
   \   00000B52   9100....           LDS     R16, (VS_BUFFER32 + 17)
   \   00000B56   B90F               OUT     0x0F, R16
   \                     ??main_205:
   \   00000B58   9B77               SBIS    0x0E, 0x07
   \   00000B5A   CFFE               RJMP    ??main_205
   \   00000B5C   9100....           LDS     R16, (VS_BUFFER32 + 18)
   \   00000B60   B90F               OUT     0x0F, R16
   \                     ??main_206:
   \   00000B62   9B77               SBIS    0x0E, 0x07
   \   00000B64   CFFE               RJMP    ??main_206
   \   00000B66   9100....           LDS     R16, (VS_BUFFER32 + 19)
   \   00000B6A   B90F               OUT     0x0F, R16
   \                     ??main_207:
   \   00000B6C   9B77               SBIS    0x0E, 0x07
   \   00000B6E   CFFE               RJMP    ??main_207
   \   00000B70   9100....           LDS     R16, (VS_BUFFER32 + 20)
   \   00000B74   B90F               OUT     0x0F, R16
   \                     ??main_208:
   \   00000B76   9B77               SBIS    0x0E, 0x07
   \   00000B78   CFFE               RJMP    ??main_208
   \   00000B7A   9100....           LDS     R16, (VS_BUFFER32 + 21)
   \   00000B7E   B90F               OUT     0x0F, R16
   \                     ??main_209:
   \   00000B80   9B77               SBIS    0x0E, 0x07
   \   00000B82   CFFE               RJMP    ??main_209
   \   00000B84   9100....           LDS     R16, (VS_BUFFER32 + 22)
   \   00000B88   B90F               OUT     0x0F, R16
   \                     ??main_210:
   \   00000B8A   9B77               SBIS    0x0E, 0x07
   \   00000B8C   CFFE               RJMP    ??main_210
   \   00000B8E   9100....           LDS     R16, (VS_BUFFER32 + 23)
   \   00000B92   B90F               OUT     0x0F, R16
   \                     ??main_211:
   \   00000B94   9B77               SBIS    0x0E, 0x07
   \   00000B96   CFFE               RJMP    ??main_211
   \   00000B98   9100....           LDS     R16, (VS_BUFFER32 + 24)
   \   00000B9C   B90F               OUT     0x0F, R16
   \                     ??main_212:
   \   00000B9E   9B77               SBIS    0x0E, 0x07
   \   00000BA0   CFFE               RJMP    ??main_212
   \   00000BA2   9100....           LDS     R16, (VS_BUFFER32 + 25)
   \   00000BA6   B90F               OUT     0x0F, R16
   \                     ??main_213:
   \   00000BA8   9B77               SBIS    0x0E, 0x07
   \   00000BAA   CFFE               RJMP    ??main_213
   \   00000BAC   9100....           LDS     R16, (VS_BUFFER32 + 26)
   \   00000BB0   B90F               OUT     0x0F, R16
   \                     ??main_214:
   \   00000BB2   9B77               SBIS    0x0E, 0x07
   \   00000BB4   CFFE               RJMP    ??main_214
   \   00000BB6   9100....           LDS     R16, (VS_BUFFER32 + 27)
   \   00000BBA   B90F               OUT     0x0F, R16
   \                     ??main_215:
   \   00000BBC   9B77               SBIS    0x0E, 0x07
   \   00000BBE   CFFE               RJMP    ??main_215
   \   00000BC0   9100....           LDS     R16, (VS_BUFFER32 + 28)
   \   00000BC4   B90F               OUT     0x0F, R16
   \                     ??main_216:
   \   00000BC6   9B77               SBIS    0x0E, 0x07
   \   00000BC8   CFFE               RJMP    ??main_216
   \   00000BCA   9100....           LDS     R16, (VS_BUFFER32 + 29)
   \   00000BCE   B90F               OUT     0x0F, R16
   \                     ??main_217:
   \   00000BD0   9B77               SBIS    0x0E, 0x07
   \   00000BD2   CFFE               RJMP    ??main_217
   \   00000BD4   9100....           LDS     R16, (VS_BUFFER32 + 30)
   \   00000BD8   B90F               OUT     0x0F, R16
   \                     ??main_218:
   \   00000BDA   9B77               SBIS    0x0E, 0x07
   \   00000BDC   CFFE               RJMP    ??main_218
   \   00000BDE   9100....           LDS     R16, (VS_BUFFER32 + 31)
   \   00000BE2   B90F               OUT     0x0F, R16
   \                     ??main_219:
   \   00000BE4   9B77               SBIS    0x0E, 0x07
   \   00000BE6   CFFE               RJMP    ??main_219
   \   00000BE8   9AC3               SBI     0x18, 0x03
   \                     ??main_132:
   \   00000BEA   9100....           LDS     R16, GET_WINDOW_STATE
   \   00000BEE   3001               CPI     R16, 1
   \   00000BF0   F491               BRNE    ??main_220
   \   00000BF2   9100....           LDS     R16, PLAYER_STATE
   \   00000BF6   950A               DEC     R16
   \   00000BF8   F019               BREQ    ??main_221
   \   00000BFA   950A               DEC     R16
   \   00000BFC   F049               BREQ    ??main_222
   \   00000BFE   C00B               RJMP    ??main_220
   \                     ??main_221:
   \   00000C00   E002               LDI     R16, 2
   \   00000C02   9300....           STS     PLAYER_STATE, R16
   \   00000C06   ....               LDI     R30, LOW((`?<Constant "Buffering">` + 10))
   \   00000C08   ....               LDI     R31, HIGH((`?<Constant "Buffering">` + 10))
   \   00000C0A   E001               LDI     R16, 1
   \   00000C0C   ........           CALL    LCD_fprintline
   \                     ??main_222:
   \   00000C10   E001               LDI     R16, 1
   \   00000C12   9300....           STS     (get_sock + 42), R16
   \                     ??main_220:
   \   00000C16   958A               DEC     R24
   \   00000C18   F009               BREQ    $+2+2
   \   00000C1A   CDBA               RJMP    ??main_131
   \   00000C1C   ....               LDI     R30, LOW(MP3fifo_pWR)
   \   00000C1E   ....               LDI     R31, (MP3fifo_pWR) >> 8
   \   00000C20   8100               LD      R16, Z
   \   00000C22   8111               LDD     R17, Z+1
   \   00000C24   8122               LDD     R18, Z+2
   \   00000C26   8133               LDD     R19, Z+3
   \   00000C28   ....               LDI     R30, LOW(MP3fifo_pRD)
   \   00000C2A   ....               LDI     R31, (MP3fifo_pRD) >> 8
   \   00000C2C   8140               LD      R20, Z
   \   00000C2E   8151               LDD     R21, Z+1
   \   00000C30   8162               LDD     R22, Z+2
   \   00000C32   8173               LDD     R23, Z+3
   \   00000C34   1704               CP      R16, R20
   \   00000C36   0715               CPC     R17, R21
   \   00000C38   0726               CPC     R18, R22
   \   00000C3A   0737               CPC     R19, R23
   \   00000C3C   F478               BRCC    ??main_223
   \   00000C3E   E404               LDI     R16, 68
   \   00000C40   EC19               LDI     R17, 201
   \   00000C42   E021               LDI     R18, 1
   \   00000C44   1B04               SUB     R16, R20
   \   00000C46   0B15               SBC     R17, R21
   \   00000C48   0B26               SBC     R18, R22
   \   00000C4A   ....               LDI     R30, LOW(MP3fifo_pWR)
   \   00000C4C   ....               LDI     R31, (MP3fifo_pWR) >> 8
   \   00000C4E   8140               LD      R20, Z
   \   00000C50   8151               LDD     R21, Z+1
   \   00000C52   8162               LDD     R22, Z+2
   \   00000C54   0F04               ADD     R16, R20
   \   00000C56   1F15               ADC     R17, R21
   \   00000C58   1F26               ADC     R18, R22
   \   00000C5A   C01A               RJMP    ??main_224
   \                     ??main_223:
   \   00000C5C   018A               MOVW    R17:R16, R21:R20
   \   00000C5E   019B               MOVW    R19:R18, R23:R22
   \   00000C60   ....               LDI     R30, LOW(MP3fifo_pWR)
   \   00000C62   ....               LDI     R31, (MP3fifo_pWR) >> 8
   \   00000C64   8140               LD      R20, Z
   \   00000C66   8151               LDD     R21, Z+1
   \   00000C68   8162               LDD     R22, Z+2
   \   00000C6A   8173               LDD     R23, Z+3
   \   00000C6C   1704               CP      R16, R20
   \   00000C6E   0715               CPC     R17, R21
   \   00000C70   0726               CPC     R18, R22
   \   00000C72   0737               CPC     R19, R23
   \   00000C74   F458               BRCC    ??main_225
   \   00000C76   018A               MOVW    R17:R16, R21:R20
   \   00000C78   2F26               MOV     R18, R22
   \   00000C7A   ....               LDI     R30, LOW(MP3fifo_pRD)
   \   00000C7C   ....               LDI     R31, (MP3fifo_pRD) >> 8
   \   00000C7E   8140               LD      R20, Z
   \   00000C80   8151               LDD     R21, Z+1
   \   00000C82   8162               LDD     R22, Z+2
   \   00000C84   1B04               SUB     R16, R20
   \   00000C86   0B15               SBC     R17, R21
   \   00000C88   0B26               SBC     R18, R22
   \   00000C8A   C002               RJMP    ??main_224
   \                     ??main_225:
   \   00000C8C   E010               LDI     R17, 0
   \   00000C8E   E020               LDI     R18, 0
   \                     ??main_224:
   \   00000C90   BD2B               OUT     0x2B, R18
   \   00000C92   BD1A               OUT     0x2A, R17
   \   00000C94   9100....           LDS     R16, Keyboard_task
   \   00000C98   2300               TST     R16
   \   00000C9A   F409               BRNE    $+2+2
   \   00000C9C   CA29               RJMP    ??main_1
   \   00000C9E   9100....           LDS     R16, Keyboard_task
   \   00000CA2   950A               DEC     R16
   \   00000CA4   F031               BREQ    ??main_226
   \   00000CA6   950A               DEC     R16
   \   00000CA8   F061               BREQ    ??main_227
   \   00000CAA   950A               DEC     R16
   \   00000CAC   F409               BRNE    $+2+2
   \   00000CAE   CA00               RJMP    ??main_2
   \   00000CB0   CA1C               RJMP    ??main_4
   \                     ??main_226:
   \   00000CB2   ....               LDI     R30, LOW((`?<Constant "Buffering">` + 18))
   \   00000CB4   ....               LDI     R31, HIGH((`?<Constant "Buffering">` + 18))
   \   00000CB6   E001               LDI     R16, 1
   \   00000CB8   ........           CALL    LCD_fprintline
   \   00000CBC   ........           CALL    StartGET
   \   00000CC0   CA14               RJMP    ??main_4
   \                     ??main_227:
   \   00000CC2   E003               LDI     R16, 3
   \   00000CC4   9300....           STS     PLAYER_STATE, R16
   \   00000CC8   ....               LDI     R30, LOW((`?<Constant "Buffering">` + 29))
   \   00000CCA   ....               LDI     R31, HIGH((`?<Constant "Buffering">` + 29))
   \   00000CCC   E001               LDI     R16, 1
   \   00000CCE   ........           CALL    LCD_fprintline
   \   00000CD2   CA0B               RJMP    ??main_4
   \   00000CD4                      REQUIRE _A_TWAR
   \   00000CD4                      REQUIRE _A_DDRD
   \   00000CD4                      REQUIRE _A_PORTD
   \   00000CD4                      REQUIRE _A_TCCR2
   \   00000CD4                      REQUIRE _A_OCR1A
   \   00000CD4                      REQUIRE _A_TCCR1B
   \   00000CD4                      REQUIRE _A_TCCR1A
   \   00000CD4                      REQUIRE _A_TIMSK
   \   00000CD4                      REQUIRE _A_PIND
   \   00000CD4                      REQUIRE _A_SPSR
   \   00000CD4                      REQUIRE _A_SPDR
   \   00000CD4                      REQUIRE _A_PORTB
   1774            }
   1775          }
   1776          };

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for HTTP_hook_DATA_RX>_0`:
   \   00000000   ....               DW      (??HTTP_hook_DATA_RX_6) /2
   \   00000002   ....               DW      (??HTTP_hook_DATA_RX_16) /2
   \   00000004   ....               DW      (??HTTP_hook_DATA_RX_17) /2
   \   00000006   ....               DW      (??HTTP_hook_DATA_RX_22) /2
   \   00000008   ....               DW      (??HTTP_hook_DATA_RX_20) /2
   \   0000000A   ....               DW      (??HTTP_hook_DATA_RX_19) /2
   \   0000000C   ....               DW      (??HTTP_hook_DATA_RX_19) /2
   \   0000000E   ....               DW      (??HTTP_hook_DATA_RX_41) /2
   \   00000010   ....               DW      (??HTTP_hook_DATA_RX_8) /2
   \   00000012   ....               DW      (??HTTP_hook_DATA_RX_34) /2
   \   00000014   ....               DW      (??HTTP_hook_DATA_RX_41) /2
   \   00000016   ....               DW      (??HTTP_hook_DATA_RX_43) /2
   \   00000018   ....               DW      (??HTTP_hook_DATA_RX_41) /2
   \   0000001A   ....               DW      (??HTTP_hook_DATA_RX_48) /2
   \   0000001C   ....               DW      (??HTTP_hook_DATA_RX_51) /2
   \   0000001E   ....               DW      (??HTTP_hook_DATA_RX_52) /2
   \   00000020   ....               DW      (??HTTP_hook_DATA_RX_5) /2
   \   00000022   ....               DW      (??HTTP_hook_DATA_RX_5) /2
   \   00000024   ....               DW      (??HTTP_hook_DATA_RX_41) /2
   \   00000026   ....               DW      (??HTTP_hook_DATA_RX_64) /2

   \                                 In  segment NEAR_F, align 1, keep-with-next
   \                     `?<Constant "2">`:
   \   00000000   0032               DC8 "2"

   \                                 In  segment NEAR_F, align 1, keep-with-next
   \                     `?<Constant "Content-Length:">`:
   \   00000000   6F43746E6E65       DC8 "Content-Length:"
   \              2D74654C676E
   \              6874003A    
   \   00000010   75416874726F       DC8 "Authorization:"
   \              7A6974616F69
   \              3A6E00      
   \   0000001F   657270736E6F       DC8 "response"
   \              657300      
   \   00000028   72750069           DC8 "uri"
   \   0000002C   753A694E656B       DC8 ":uNikeE:"
   \              3A4500      

   Maximum stack usage in bytes:

     Function                  CSTACK RSTACK
     --------                  ------ ------
     AddHTTPsocket                 0      2
       -> AddTCPsocket             0      2
     HTTP_hook                     0      2
       -> IsGoodHTTPreq            0      2
       -> HTTP_hook_DATA_RX        0      2
       -> HTTP_hook_DATA_TX        0      2
     HTTP_hook_DATA_RX             7      4
       -> SetupRegister            7      2
       -> stricmp_P                7      2
       -> stricmp_P                7      2
       -> stricmp_P                7      2
       -> stricmp_P                7      2
       -> IsGoodHTTPreq            7      2
       -> stradd_E                 7      2
       -> stradd_P                 7      2
       -> stradd_E                 7      2
       -> strlen                   7      2
       -> MD5cheat                 7      2
       -> strcpy                   7      2
       -> strlen                   7      2
       -> MD5cheat                 7      2
       -> MD5cheat                 7      2
       -> strncmp                  7      2
       -> IsGoodHTTPreq            7      2
       -> REFRESH_EEPROM           7      2
       -> SetupRegister            7      2
       -> a2i                      7      2
       -> a2i                      7      2
       -> a2i                      7      2
       -> IsGoodHTTPreq            7      2
       -> IsGoodHTTPreq            7      2
       -> IsGoodHTTPreq            7      2
       -> MD5cheat                 7      2
       -> i2a                      7      2
       -> MD5cheat                 7      2
       -> netw_memcpy              7      2
     HTTP_hook_DATA_TX             6      4
       -> IsGoodHTTPreq            6      2
       -> i2a                      6      2
       -> i2a                      6      2
       -> i2a                      6      2
       -> i2a                      6      2
       -> i2a                      6      2
       -> i2a                      6      2
       -> i2a                      6      2
       -> i2a                      6      2
       -> __get_SVN_Revision       6      2
     InitVars                      0      4
     IsGoodHTTPreq                 0      2
     REFRESH_EEPROM                0      4
     SYNC_EE_                      0      2
     SetupRegister                 0      4
       -> StartGET                 0      2
     WDT_Prescaler_Change          0      2
     __get_SVN_Revision            0      2
     a2i                           0      2
     i2a                           0      2
       -> _i2a                     0      2
     main                          0      4
       -> VS_INIT                  0      2
       -> VS_VOL                   0      2
       -> uart_init                0      2
       -> _print_fstr              0      2
       -> InitVars                 0      2
       -> nic_init                 0      2
       -> InitEthernetHW           0      2
       -> fifo_init                0      2
       -> AddHTTPsocket            0      2
       -> AddGETsocket             0      2
       -> LCD_init_4               0      2
       -> LCD_fprintlineEE         0      2
       -> LCD_TCPstate             0      2
       -> LCD_PLAYERstate          0      2
       -> LCD_fprintlineEE         0      2
       -> nic_poll                 0      2
       -> INT_ETH_PROCESS_PKT2     0      2
       -> INT_ETH_PROCESS_PKT2     0      2
       -> LCD_fprintline           0      2
       -> LCD_fprintline           0      2
       -> LCD_fprintline           0      2
       -> LCD_fprintline           0      2
       -> LCD_fprintline           0      2
       -> StartGET                 0      2
       -> LCD_fprintline           0      2
     stradd_E                      0      4
     stradd_P                      0      2
     stricmp_P                     0      2


   Segment part sizes:

     Function/Label                       Bytes
     --------------                       -----
     _A_TWAR                                 1
     _A_SPSR                                 1
     _A_SPDR                                 1
     _A_PIND                                 1
     _A_DDRD                                 1
     _A_PORTD                                1
     _A_PORTB                                1
     _A_TCCR2                                1
     _A_OCR1A                                2
     _A_TCCR1B                               1
     _A_TCCR1A                               1
     _A_TIMSK                                1
     MP3indic                                2
     http_q_c_pos                            1
     http_q_c                               72
     DUMMY_EEPROM                            1
     EEPROM_RESTORED                         1
     MASK_IP_EEPROM                         54
     IP_EEPROM
     OUTG_IP
     MAC_EEPROM
     HTTP_LOGIN
     HTTP_PASS
     VS_BUFFER32                            32
     stradd_E                               32
     stradd_P                               14
     http_sock                             238
     AddHTTPsocket                          38
     stricmp_P                              40
     i2a                                     4
     HTTP_LEVELS                             8
     __get_SVN_Revision                      6
     IsGoodHTTPreq                         110
     REFRESH_EEPROM                         66
     SYNC_EE_                                2
     SetupRegister                          70
     a2i                                    40
     HTTP_hook_DATA_RX                    1442
     HTTP_hook_DATA_TX                     942
     HTTP_hook                             254
     InitVars                               86
     WDT_Prescaler_Change                   10
     PLAYER_STATE                            3
     BufferPKT
     FIFO_pkt_TS
     _Hello_string                         138
     main                                 3284
     ?<Jumptable for HTTP_hook_DATA_RX>_0   40
     ?<Constant "2">                         2
     ?<Constant "Content-Length:">          53
      Others                                 6

 
    13 bytes in segment ABSOLUTE
 6 440 bytes in segment CODE
     1 byte  in segment EEPROM_AN
    54 bytes in segment EEPROM_I
     6 bytes in segment INITTAB
   201 bytes in segment NEAR_F
    34 bytes in segment NEAR_N
   315 bytes in segment NEAR_Z
    40 bytes in segment SWITCH
 
 6 681 bytes of CODE  memory (+  6 bytes shared)
   349 bytes of DATA  memory (+ 13 bytes shared)
    54 bytes of XDATA memory (+  1 byte  shared)

Errors: none
Warnings: none
