###############################################################################
#                                                                             #
#                                                       17/Feb/2010  18:31:04 #
# IAR C/C++ Compiler V5.30.0.20166/W32, Evaluation Version  for Atmel AVR     #
# Copyright 1996-2009 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  G:\AVR\EthRadio_buf_inline\io.c                          #
#    Command line =  --string_literals_in_flash G:\AVR\EthRadio_buf_inline\io #
#                    .c --cpu=m32 -ms -o G:\AVR\EthRadio_buf_inline\Debug\Obj #
#                    \ -lC G:\AVR\EthRadio_buf_inline\Debug\List\ -lB         #
#                    G:\AVR\EthRadio_buf_inline\Debug\List\                   #
#                    --initializers_in_flash -s9 --no_code_motion --debug     #
#                    -DENABLE_BIT_DEFINITIONS -e -I "C:\Program Files\IAR     #
#                    Systems\Embedded Workbench Evaluation 5.3\avr\INC\" -I   #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    Evaluation 5.3\avr\INC\CLIB\" --eeprom_size 1024         #
#                    --lock_regs=1                                            #
#    List file    =  G:\AVR\EthRadio_buf_inline\Debug\List\io.lst             #
#    Object file  =  G:\AVR\EthRadio_buf_inline\Debug\Obj\io.r90              #
#                                                                             #
#                                                                             #
###############################################################################

G:\AVR\EthRadio_buf_inline\io.c
      1          #include "stdafx.h"

   \                                 In  segment ABSOLUTE, at 0x29
   \   <__C20> volatile __io _A_UBRRL
   \                     _A_UBRRL:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   <__C22> volatile __io _A_UCSRB
   \                     _A_UCSRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   <__C24> volatile __io _A_UCSRA
   \                     _A_UCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   <__C26> volatile __io _A_UDR
   \                     _A_UDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x40
   \   <__C67> volatile __io _A_UBRRH
   \                     _A_UBRRH:
   \   00000000                      DS8 1
      2          #include "compiler.h"
      3          
      4          
      5          #define UART_TX(var) \
      6          {\
      7             while ( !( UCSRA & (1<<UDRE)));\
      8             UDR = var;\
      9          };
     10          
     11          
     12          static const char __flash _sData[] = "&Data:";
                                           ^
Warning[Pe177]: variable "_sData" was declared but never referenced
     13          static const char __flash _sLen[] = "Len:";
                                           ^
Warning[Pe177]: variable "_sLen" was declared but never referenced
     14          static const char __flash _si[] = "i:";
                                           ^
Warning[Pe177]: variable "_si" was declared but never referenced
     15          
     16          __z void _i2a(char *s, UINT16 v);
     17          extern __z void i2a(char *s, UINT16 v);
     18          

   \                                 In  segment CODE, align 2, keep-with-next
     19          void uart_init(void)
   \                     uart_init:
     20          {
     21          /* UART0 initialisation */
     22          /* desired baud rate: 115200 */
     23          /* actual baud rate: 115200 (0.0%) */
     24          /* char size: 8 bit */
     25          /* parity: Disabled */
     26          UCSRB = 0x00; /* disable while setting baud rate */
   \   00000000   E000               LDI     R16, 0
   \   00000002   B90A               OUT     0x0A, R16
     27          UCSRA = 0x00;
   \   00000004   B90B               OUT     0x0B, R16
     28          UCSRC = 0x86; // 8 bit data
   \   00000006   E806               LDI     R16, 134
   \   00000008   BD00               OUT     0x20, R16
     29          UBRRL = 8; // set baud rate lo (115200 @ 16 MHz)
   \   0000000A   E008               LDI     R16, 8
   \   0000000C   B909               OUT     0x09, R16
     30          UBRRH = 0x00; /* set baud rate hi */
   \   0000000E   E000               LDI     R16, 0
   \   00000010   BD00               OUT     0x20, R16
     31          UCSRB = 0x08; //TX are enabled
   \   00000012   E008               LDI     R16, 8
   \   00000014   B90A               OUT     0x0A, R16
     32          }
   \   00000016   9508               RET
   \   00000018                      REQUIRE _A_UBRRL
   \   00000018                      REQUIRE _A_UCSRB
   \   00000018                      REQUIRE _A_UCSRA
   \   00000018                      REQUIRE _A_UBRRH
     33          
     34          
     35          //Print 0x0A,0x0B

   \                                 In  segment CODE, align 2, keep-with-next
     36          void _print_rn (void)
   \                     _print_rn:
   \                     ??_print_rn_0:
     37          { 
     38            UART_TX(0x0A);
   \   00000000   9B5D               SBIS    0x0B, 0x05
   \   00000002   CFFE               RJMP    ??_print_rn_0
   \   00000004   E00A               LDI     R16, 10
   \   00000006   B90C               OUT     0x0C, R16
     39            UART_TX(0x0D);
   \                     ??_print_rn_1:
   \   00000008   9B5D               SBIS    0x0B, 0x05
   \   0000000A   CFFE               RJMP    ??_print_rn_1
   \   0000000C   E00D               LDI     R16, 13
   \   0000000E   B90C               OUT     0x0C, R16
     40          }
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_UCSRA
   \   00000012                      REQUIRE _A_UDR
     41          
     42          //extern char i2a_buf[5];
     43          

   \                                 In  segment CODE, align 2, keep-with-next
     44          void _print_num ( const char __flash * s, UINT16 Num)
   \                     _print_num:
     45          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   939A               ST      -Y, R25
   \   00000006   938A               ST      -Y, R24
   \   00000008   9726               SBIW    R29:R28, 6
   \   0000000A   01C8               MOVW    R25:R24, R17:R16
   \   0000000C   0189               MOVW    R17:R16, R19:R18
     46            char* pi2a;
     47            __no_init char i2a_locbuf[6];
     48            pi2a=&i2a_locbuf[0];
   \   0000000E   01DE               MOVW    R27:R26, R29:R28
     49            i2a(pi2a, Num);
   \   00000010   01FE               MOVW    R31:R30, R29:R28
   \   00000012   ........           CALL    i2a
   \   00000016   C005               RJMP    ??_print_num_0
     50            while (*s) UART_TX (*s++);
   \                     ??_print_num_1:
   \   00000018   9B5D               SBIS    0x0B, 0x05
   \   0000001A   CFFE               RJMP    ??_print_num_1
   \   0000001C   9105               LPM     R16, Z+
   \   0000001E   01CF               MOVW    R25:R24, R31:R30
   \   00000020   B90C               OUT     0x0C, R16
   \                     ??_print_num_0:
   \   00000022   01FC               MOVW    R31:R30, R25:R24
   \   00000024   9104               LPM     R16, Z
   \   00000026   2300               TST     R16
   \   00000028   F7B9               BRNE    ??_print_num_1
     51          //  UART_TX(':'); 
     52            while (*pi2a) UART_TX(*pi2a++);  
   \                     ??_print_num_2:
   \   0000002A   910D               LD      R16, X+
   \   0000002C   2300               TST     R16
   \   0000002E   F021               BREQ    ??_print_num_3
   \                     ??_print_num_4:
   \   00000030   9B5D               SBIS    0x0B, 0x05
   \   00000032   CFFE               RJMP    ??_print_num_4
   \   00000034   B90C               OUT     0x0C, R16
   \   00000036   CFF9               RJMP    ??_print_num_2
     53            UART_TX(',');
   \                     ??_print_num_3:
   \   00000038   9B5D               SBIS    0x0B, 0x05
   \   0000003A   CFFE               RJMP    ??_print_num_3
   \   0000003C   E20C               LDI     R16, 44
   \   0000003E   B90C               OUT     0x0C, R16
     54            UART_TX(' '); 
   \                     ??_print_num_5:
   \   00000040   9B5D               SBIS    0x0B, 0x05
   \   00000042   CFFE               RJMP    ??_print_num_5
   \   00000044   E200               LDI     R16, 32
   \   00000046   B90C               OUT     0x0C, R16
     55          }
   \   00000048   9626               ADIW    R29:R28, 6
   \   0000004A   9189               LD      R24, Y+
   \   0000004C   9199               LD      R25, Y+
   \   0000004E   91A9               LD      R26, Y+
   \   00000050   91B9               LD      R27, Y+
   \   00000052   9508               RET
   \   00000054                      REQUIRE _A_UCSRA
   \   00000054                      REQUIRE _A_UDR
     56          

   \                                 In  segment CODE, align 2, keep-with-next
     57          void _print_fstr (const char __flash * s)
   \                     _print_fstr:
     58          {
   \   00000000   C005               RJMP    ??_print_fstr_0
     59            while (*s) UART_TX (*s++);
   \                     ??_print_fstr_1:
   \   00000002   9B5D               SBIS    0x0B, 0x05
   \   00000004   CFFE               RJMP    ??_print_fstr_1
   \   00000006   9125               LPM     R18, Z+
   \   00000008   018F               MOVW    R17:R16, R31:R30
   \   0000000A   B92C               OUT     0x0C, R18
   \                     ??_print_fstr_0:
   \   0000000C   01F8               MOVW    R31:R30, R17:R16
   \   0000000E   9124               LPM     R18, Z
   \   00000010   2322               TST     R18
   \   00000012   F7B9               BRNE    ??_print_fstr_1
     60          }
   \   00000014   9508               RET
   \   00000016                      REQUIRE _A_UCSRA
   \   00000016                      REQUIRE _A_UDR
     61          
     62          
     63          /*
     64          static void put_message(char *s)
     65          {
     66            while (*s)
     67              putchar(*s++);
     68          }
     69          */
     70          
     71          
     72          /*
     73          void print_dump(unsigned char* p, unsigned int len)
     74          {
     75           // unsigned char i=0;
     76              printf_P(_HexWordData, p);
     77            printf_P(_HexWordNum, len);
     78          //  while (i<len)
     79          //  {      
     80               //printf_P(_HexByteNum, *p);
     81               //i++;
     82               //p++;
     83          //     putchar (0x3B);
     84          //  }  
     85          //  printf_P(_Razer);
     86          //  printf_P(_Razer);
     87          }
     88          
     89          void print_i (unsigned char i)
     90          {
     91            printf_P(_DecByteNum, i);
     92              printf_P(_Razer);
     93          }
     94          void print_lenRX(unsigned char* p, unsigned int len)
     95          {
     96            if (!len) return;
     97            unsigned char i=0;
     98          
     99            printf_P(_HexWordNumRX, len);
    100            while (i<len)
    101            {      
    102               printf_P(_HexByteNum, *p);
    103               i++;
    104               p++;
    105               putchar (0x3B);
    106            }  
    107            printf_P(_Razer);
    108          //  printf_P(_Razer);
    109          }
    110          */

   Maximum stack usage in bytes:

     Function    CSTACK RSTACK
     --------    ------ ------
     _print_fstr     0      2
     _print_num     10      2
       -> i2a       10      2
     _print_rn       0      2
     uart_init       0      2


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     _A_UBRRL          1
     _A_UCSRB          1
     _A_UCSRA          1
     _A_UDR            1
     _A_UBRRH          1
     uart_init        24
     _print_rn        18
     _print_num       84
     _print_fstr      22

 
   5 bytes in segment ABSOLUTE
 148 bytes in segment CODE
 
 148 bytes of CODE memory
   0 bytes of DATA memory (+ 5 bytes shared)

Errors: none
Warnings: 3
