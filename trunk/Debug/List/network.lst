###############################################################################
#                                                                             #
#                                                       17/Feb/2010  18:41:43 #
# IAR C/C++ Compiler V5.30.0.20166/W32, Evaluation Version  for Atmel AVR     #
# Copyright 1996-2009 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  G:\AVR\EthRadio_buf_inline\network.c                     #
#    Command line =  --string_literals_in_flash G:\AVR\EthRadio_buf_inline\ne #
#                    twork.c --cpu=m32 -ms -o G:\AVR\EthRadio_buf_inline\Debu #
#                    g\Obj\ -lC G:\AVR\EthRadio_buf_inline\Debug\List\ -lB    #
#                    G:\AVR\EthRadio_buf_inline\Debug\List\                   #
#                    --initializers_in_flash -s9 --no_code_motion --debug     #
#                    -DENABLE_BIT_DEFINITIONS -e -I "C:\Program Files\IAR     #
#                    Systems\Embedded Workbench Evaluation 5.3\avr\INC\" -I   #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    Evaluation 5.3\avr\INC\CLIB\" --eeprom_size 1024         #
#                    --lock_regs=1                                            #
#    List file    =  G:\AVR\EthRadio_buf_inline\Debug\List\network.lst        #
#    Object file  =  G:\AVR\EthRadio_buf_inline\Debug\Obj\network.r90         #
#                                                                             #
#                                                                             #
###############################################################################

G:\AVR\EthRadio_buf_inline\network.c
      1          /* Name: network.c
      2           * Project: uNikeE - Software Ethernet MAC and upper layers stack
      3           * Author: Dmitry Oparin aka Rst7/CBSIE
      4           * Creation Date: 25-Jan-2009
      5           * Copyright: (C)2008,2009 by Rst7/CBSIE
      6           * License: GNU GPL v3 (see http://www.gnu.org/licenses/gpl-3.0.txt)
      7           */
      8          
      9          #include "nike_e.h"

   \                                 In  segment ABSOLUTE, at 0x22
   \   <__C6> volatile __io _A_TWAR
   \                     _A_TWAR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e
   \   <__C30> volatile __io _A_SPSR
   \                     _A_SPSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2f
   \   <__C32> volatile __io _A_SPDR
   \                     _A_SPDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   <__C38> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f
   \   <__C130> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1
     10          #include "enc28j60.h"
     11          #include "io.h"
     12          #include "FIFO.h"
     13          #include "compiler.h"
     14          
     15          #pragma inline=forced
     16          UINT16 _READ_U16(volatile UINT8 *p)
     17          {
     18          #pragma diag_suppress=Pa082
     19            return p[0]|(p[1]<<8);
     20          #pragma diag_default=Pa082
     21          }
     22          #define READ_U16(VAR) (_READ_U16((volatile UINT8 *)(&VAR)))
     23          //#define READ_U16(VAR) (VAR)
     24          
     25          #pragma inline=forced
     26          UINT16 _READ_U16_REV(volatile UINT8 *p)
     27          {
     28          #pragma diag_suppress=Pa082
     29            return p[1]|(p[0]<<8);
     30          #pragma diag_default=Pa082
     31          }
     32          
     33          //Определяет, использовать ли номер IP-пакета
     34          #define USE_IPSEQ
     35          //#define IPSEQ_DEBUG
     36          
     37          #include "arp.h"
     38          #include "ip.h"
     39          #include "icmp.h"
     40          #include "tcp.h"
     41          #include "network_addr.h"
     42          #include "network.h"
     43          
     44          #define TOTAL_INLINE
     45          
     46          //__no_init ETH_FRAME ETH_PKT @ ETH_PKT_BASE;
     47          
     48          /*volatile */UINT16 ETH_PKT_len;
     49          /*volatile */UINT8 ETH_PKT_mode; //0 - свободен, 1 - занят приемником, 2-16 - счетчик передач
     50          
     51          volatile union
     52          {
     53            struct
     54            {
     55              UINT8 count_200ms_low;
     56              UINT8 count_200ms_high;
     57              UINT16 irs_high;
     58            };
     59            struct
     60            {
     61              UINT16 IRS_L;
     62              UINT16 IRS_H;
     63            };
     64          };
     65          
     66          //static UINT8 MAC_BROADCAST[6]={0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};
     67          
     68          #ifdef CPU8BIT
     69          #include "network_routines_avr.c"
   \   __nearfunc __version_3 __x_z void netw_memcpy(void *, void *, unsigned int)
   \                     netw_memcpy:
   \   00000000                      REQUIRE _netw_memcpy
   \   00000000                      ;               // Fall through to label _netw_memcpy

   \                                 In  segment CODE, align 2, keep-with-next
   \   static __nearfunc __version_3 __x_z void _netw_memcpy(char *, char *, UREG, UREG)
   \                     _netw_memcpy:
   \   00000000   2300               TST     R16
   \   00000002   F009               BREQ    ??_netw_memcpy_0
   \   00000004   9513               INC     R17
   \                     ??_netw_memcpy_0:
   \   00000006   9121               LD      R18, Z+
   \   00000008   932D               ST      X+, R18
   \   0000000A   950A               DEC     R16
   \   0000000C   F7E1               BRNE    ??_netw_memcpy_0
   \   0000000E   951A               DEC     R17
   \   00000010   F7D1               BRNE    ??_netw_memcpy_0
   \   00000012   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   static __nearfunc __version_3 __x_z int cmp_A_S(TCP_PKT *, TCP_SOCK *)
   \                     cmp_A_S:
   \   00000000   9677               ADIW    R31:R30, 23
   \   00000002   961C               ADIW    R27:R26, 12
   \   00000004   ....               RJMP    _cmp32

   \                                 In  segment CODE, align 2, keep-with-next
   \   static __nearfunc __version_3 __x_z int cmp_S_A(TCP_PKT *, TCP_SOCK *)
   \                     cmp_S_A:
   \   00000000   967B               ADIW    R31:R30, 27
   \   00000002   9618               ADIW    R27:R26, 8
   \   00000004                      REQUIRE _cmp32
   \   00000004                      ;               // Fall through to label _cmp32

   \                                 In  segment CODE, align 2, keep-with-next
   \   static __nearfunc __version_3 __x_z int _cmp32(unsigned long *, unsigned long *)
   \                     _cmp32:
   \   00000000   910E               LD     R16,-X
   \   00000002   9152               LD     R21,-Z
   \   00000004   1B05               SUB    R16,R21
   \   00000006   911E               LD     R17,-X
   \   00000008   9152               LD     R21,-Z
   \   0000000A   0B15               SBC    R17,R21
   \   0000000C   912E               LD     R18,-X
   \   0000000E   9152               LD     R21,-Z
   \   00000010   0B25               SBC    R18,R21
   \   00000012   913E               LD     R19,-X
   \   00000014   9152               LD     R21,-Z
   \   00000016   0B35               SBC    R19,R21
   \   00000018   2B23               OR     R18,R19
   \   0000001A   F409               BRNE   cmp32i_1
   \   0000001C   9508               RET
   \                     cmp32i_1:
   \   0000001E   EF0F               LDI     R16, 255
   \   00000020   EF1F               LDI     R17, 255
   \   00000022   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   static __nearfunc __version_3 __z void inc32(unsigned long *, UREG)
   \                     inc32:
   \   00000000   E010               LDI     R17, 0
   \   00000002                      REQUIRE inc32i
   \   00000002                      ;               // Fall through to label inc32i

   \                                 In  segment CODE, align 2, keep-with-next
   \   static __nearfunc __version_3 __z void inc32i(unsigned long *, unsigned int)
   \                     inc32i:
   \   00000000   8170               LD      R23, Z
   \   00000002   8161               LDD     R22, Z+1
   \   00000004   8152               LDD     R21, Z+2
   \   00000006   8143               LDD     R20, Z+3
   \   00000008   E020               LDI     R18, 0
   \   0000000A   0F40               ADD     R20, R16
   \   0000000C   1F51               ADC     R21, R17
   \   0000000E   1F62               ADC     R22, R18
   \   00000010   1F72               ADC     R23, R18
   \   00000012   8370               ST      Z, R23
   \   00000014   8361               STD     Z+1, R22
   \   00000016   8352               STD     Z+2, R21
   \   00000018   8343               STD     Z+3, R20
   \   0000001A   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   static __nearfunc __version_3 __x UINT16 IPChecksum(UINT16 *, unsigned int)
   \                     IPChecksum:
   \   00000000   01AC               MOVW    R21:R20, R25:R24
   \   00000002   01C8               MOVW    R25:R24, R17:R16
   \   00000004   E000               LDI     R16, 0
   \   00000006   E010               LDI     R17, 0
   \   00000008   3082               CPI     R24, 2
   \   0000000A   0790               CPC     R25, R16
   \   0000000C   F060               BRCS    ??IPChecksum_0
   \                     ??IPChecksum_1:
   \   0000000E   912D               LD      R18, X+
   \   00000010   913D               LD      R19, X+
   \   00000012   0F02               ADD     R16, R18
   \   00000014   1F13               ADC     R17, R19
   \   00000016   F410               BRBC    0, ??IPChecksum_2
   \   00000018   5F0F               SUBI    R16, 255
   \   0000001A   4F1F               SBCI    R17, 255
   \                     ??IPChecksum_2:
   \   0000001C   9702               SBIW    R25:R24, 2
   \   0000001E   3082               CPI     R24, 2
   \   00000020   E020               LDI     R18, 0
   \   00000022   0792               CPC     R25, R18
   \   00000024   F7A0               BRCC    ??IPChecksum_1
   \                     ??IPChecksum_0:
   \   00000026   3081               CPI     R24, 1
   \   00000028   4090               SBCI    R25, 0
   \   0000002A   F439               BRNE    ??IPChecksum_3
   \   0000002C   912C               LD      R18, X
   \   0000002E   E030               LDI     R19, 0
   \   00000030   0F02               ADD     R16, R18
   \   00000032   1F13               ADC     R17, R19
   \   00000034   F410               BRBC    0, ??IPChecksum_3
   \   00000036   5F0F               SUBI    R16, 255
   \   00000038   4F1F               SBCI    R17, 255
   \                     ??IPChecksum_3:
   \   0000003A   9500               COM     R16
   \   0000003C   9510               COM     R17
   \   0000003E   01CA               MOVW    R25:R24, R21:R20
   \   00000040   9508               RET
   \   00000042                      REQUIRE _A_SREG

   \                                 In  segment CODE, align 2, keep-with-next
   \   static __nearfunc __version_3 __x_z void MACcpy(UINT8 *, UINT8 *)
   \                     MACcpy:
   \   00000000   9102               LD      R16, -Z
   \   00000002   930E               ST      -X, R16
   \   00000004   9102               LD      R16, -Z
   \   00000006   930E               ST      -X, R16
   \   00000008   9102               LD      R16, -Z
   \   0000000A   930E               ST      -X, R16
   \   0000000C   9102               LD      R16, -Z
   \   0000000E   930E               ST      -X, R16
   \   00000010   9102               LD      R16, -Z
   \   00000012   930E               ST      -X, R16
   \   00000014   9102               LD      R16, -Z
   \   00000016   930E               ST      -X, R16
   \   00000018   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   static __nearfunc __version_3 __x_z UREG MACcmp(UINT8 *, UINT8 *)
   \                     MACcmp:
   \   00000000   018D               MOVW    R17:R16, R27:R26
   \   00000002   01DF               MOVW    R27:R26, R31:R30
   \   00000004   01F8               MOVW    R31:R30, R17:R16
   \   00000006   8120               LD      R18, Z
   \   00000008   8131               LDD     R19, Z+1
   \   0000000A   914D               LD      R20, X+
   \   0000000C   915C               LD      R21, X
   \   0000000E   9711               SBIW    R27:R26, 1
   \   00000010   1724               CP      R18, R20
   \   00000012   0735               CPC     R19, R21
   \   00000014   F471               BRNE    ??MACcmp_0
   \   00000016   8102               LDD     R16, Z+2
   \   00000018   8113               LDD     R17, Z+3
   \   0000001A   8124               LDD     R18, Z+4
   \   0000001C   8135               LDD     R19, Z+5
   \   0000001E   01FD               MOVW    R31:R30, R27:R26
   \   00000020   8142               LDD     R20, Z+2
   \   00000022   8153               LDD     R21, Z+3
   \   00000024   8164               LDD     R22, Z+4
   \   00000026   8175               LDD     R23, Z+5
   \   00000028   1704               CP      R16, R20
   \   0000002A   0715               CPC     R17, R21
   \   0000002C   0726               CPC     R18, R22
   \   0000002E   0737               CPC     R19, R23
   \   00000030   F011               BREQ    ??MACcmp_1
   \                     ??MACcmp_0:
   \   00000032   E001               LDI     R16, 1
   \   00000034   9508               RET
   \                     ??MACcmp_1:
   \   00000036   E000               LDI     R16, 0
   \   00000038   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   static __nearfunc __version_3 __x_z void _swapmem(char *, char *, UREG)
   \                     _swapmem:
   \                     ??_swapmem_0:
   \   00000000   911C               LD      R17, X
   \   00000002   8120               LD      R18, Z
   \   00000004   932D               ST      X+, R18
   \   00000006   9311               ST      Z+, R17
   \   00000008   950A               DEC     R16
   \   0000000A   F7D1               BRNE    ??_swapmem_0
   \   0000000C   9508               RET

   \                                 In  segment CODE, align 2, keep-with-next
   \   __nearfunc __version_3 __z int netw_memset(void *, UREG, UREG)
   \                     netw_memset:
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F4A               MOV     R20, R26
   \   00000004   2F21               MOV     R18, R17
   \   00000006   01DF               MOVW    R27:R26, R31:R30
   \                     ??netw_memset_0:
   \   00000008   930D               ST      X+, R16
   \   0000000A   952A               DEC     R18
   \   0000000C   F7E9               BRNE    ??netw_memset_0
   \   0000000E   2FA4               MOV     R26, R20
   \   00000010   2FB3               MOV     R27, R19
   \   00000012   9508               RET
     70          #else
     71          #include "network_routines_arm.c"
     72          #endif
     73          
     74          extern __eeprom UINT32 OUTG_IP[2];
     75          //extern char MAC_GATE0[ETH_HWA_LEN];
     76          
     77          TCP_SOCK *QUE_sock;
     78          

   \                                 In  segment CODE, align 2, keep-with-next
     79          __z void AddTCPsocket(TCP_SOCK *s)
   \                     AddTCPsocket:
     80          {
     81            TCP_SOCK *p;
     82           // UREG save_lock=ETH_TASK_LOCK_PORT;
     83           // ETH_TASK_LOCK=1;
     84            s->timer_init=0;
   \   00000000   E000               LDI     R16, 0
   \   00000002   A700               STD     Z+40, R16
     85            p=QUE_sock;
     86            s->next=p;
   \   00000004   9100....           LDS     R16, (IP + 10)
   \   00000008   9110....           LDS     R17, (IP + 11)
   \   0000000C   8300               ST      Z, R16
   \   0000000E   8311               STD     Z+1, R17
     87            QUE_sock=s;
   \   00000010   93E0....           STS     (IP + 10), R30
   \   00000014   93F0....           STS     (IP + 11), R31
     88           // if (!(save_lock&ETH_TASK_LOCK_MASK)) ETH_TASK_LOCK=0;
     89          }
   \   00000018   9508               RET
     90          

   \                                 In  segment CODE, align 2, keep-with-next
     91          __x UREG RemoveTCPsocket(TCP_SOCK *s)
   \                     RemoveTCPsocket:
     92          {
     93            TCP_SOCK *p=(TCP_SOCK *)(&QUE_sock);
   \   00000000   ....               LDI     R30, LOW((IP + 10))
   \   00000002   ....               LDI     R31, HIGH((IP + 10))
     94            TCP_SOCK *n;
     95            UREG f=0;
   \   00000004   E000               LDI     R16, 0
   \   00000006   C001               RJMP    ??RemoveTCPsocket_0
     96           // UREG save_lock=ETH_TASK_LOCK_PORT;
     97           // ETH_TASK_LOCK=1;
     98            while((n=p->next))
     99            {
    100              if (n==s)
    101              {
    102                p->next=s->next;
    103                f=1;
    104                break;
    105              }
    106              p=n;
   \                     ??RemoveTCPsocket_1:
   \   00000008   01F9               MOVW    R31:R30, R19:R18
   \                     ??RemoveTCPsocket_0:
   \   0000000A   8120               LD      R18, Z
   \   0000000C   8131               LDD     R19, Z+1
   \   0000000E   2F12               MOV     R17, R18
   \   00000010   2B13               OR      R17, R19
   \   00000012   F049               BREQ    ??RemoveTCPsocket_2
   \   00000014   172A               CP      R18, R26
   \   00000016   073B               CPC     R19, R27
   \   00000018   F7B9               BRNE    ??RemoveTCPsocket_1
   \   0000001A   910D               LD      R16, X+
   \   0000001C   911C               LD      R17, X
   \   0000001E   9711               SBIW    R27:R26, 1
   \   00000020   8300               ST      Z, R16
   \   00000022   8311               STD     Z+1, R17
   \   00000024   E001               LDI     R16, 1
    107            }
    108            //if (!(save_lock&ETH_TASK_LOCK_MASK)) ETH_TASK_LOCK=0;
    109            return f;
   \                     ??RemoveTCPsocket_2:
   \   00000026   9508               RET
    110          }
    111          
    112          

   \                                 In  segment CODE, align 2, keep-with-next
    113          static __z void prepare_sock(TCP_SOCK *s, UREG state, UREG tmr)
   \                     prepare_sock:
    114          {
   \   00000000   019D               MOVW    R19:R18, R27:R26
    115            s->state=state;
   \   00000002   8F03               STD     Z+27, R16
    116            s->flags=state==TCP_STATE_CONNECTING?TCP_FLAG_SYN:TCP_FLAG_SYN | TCP_FLAG_ACK;
   \   00000004   3003               CPI     R16, 3
   \   00000006   F411               BRNE    ??prepare_sock_0
   \   00000008   E002               LDI     R16, 2
   \   0000000A   C001               RJMP    ??prepare_sock_1
   \                     ??prepare_sock_0:
   \   0000000C   E102               LDI     R16, 18
   \                     ??prepare_sock_1:
   \   0000000E   8F04               STD     Z+28, R16
    117            s->timer=tmr;
   \   00000010   A317               STD     Z+39, R17
    118            
    119            UINT16 irs_l;
    120            UINT16 irs_h;
    121            irs_l=IRS_L;
   \   00000012   ....               LDI     R26, LOW((IP + 4))
   \   00000014   ....               LDI     R27, HIGH((IP + 4))
   \   00000016   910D               LD      R16, X+
   \   00000018   911D               LD      R17, X+
    122            irs_h=IRS_H;
   \   0000001A   916D               LD      R22, X+
   \   0000001C   917C               LD      R23, X
   \   0000001E   9711               SBIW    R27:R26, 1
    123            irs_h^=irs_l;
    124            irs_h+=irs_l;
   \   00000020   2760               EOR     R22, R16
   \   00000022   2771               EOR     R23, R17
   \   00000024   0F60               ADD     R22, R16
   \   00000026   1F71               ADC     R23, R17
    125            IRS_H=irs_h;
   \   00000028   936D               ST      X+, R22
   \   0000002A   937C               ST      X, R23
    126            s->SEQNO=((UINT32)irs_h<<16)|irs_l;
   \   0000002C   8B03               STD     Z+19, R16
   \   0000002E   8B14               STD     Z+20, R17
   \   00000030   8B65               STD     Z+21, R22
   \   00000032   8B76               STD     Z+22, R23
    127            
    128            s->timer_init=TCP_TIMER_INITV;
   \   00000034   E004               LDI     R16, 4
   \   00000036   A700               STD     Z+40, R16
    129            s->sended_len=0;
   \   00000038   E000               LDI     R16, 0
   \   0000003A   A303               STD     Z+35, R16
   \   0000003C   A304               STD     Z+36, R16
    130            s->send_disp=0;
   \   0000003E   A305               STD     Z+37, R16
   \   00000040   A306               STD     Z+38, R16
    131          }
   \   00000042   01D9               MOVW    R27:R26, R19:R18
   \   00000044   9508               RET
    132          

   \                                 In  segment CODE, align 2, keep-with-next
    133          __x void TCPconnect(TCP_SOCK *s, UINT32 ip, UINT16 port)
   \                     TCPconnect:
    134          {
   \   00000000   938A               ST      -Y, R24
    135            TCP_SOCK *ss;
    136          //  UREG save_lock=ETH_TASK_LOCK_PORT;
    137          //  ETH_TASK_LOCK=1;
    138            s->rport=htons(port);
   \   00000002   01FD               MOVW    R31:R30, R27:R26
   \   00000004   8B51               STD     Z+17, R21
   \   00000006   8B42               STD     Z+18, R20
    139            s->lport=0;
   \   00000008   E040               LDI     R20, 0
   \   0000000A   8747               STD     Z+15, R20
   \   0000000C   8B40               STD     Z+16, R20
    140            port=IRS_L;
   \   0000000E   ....               LDI     R30, LOW(IP)
   \   00000010   ....               LDI     R31, (IP) >> 8
   \   00000012   8144               LDD     R20, Z+4
   \   00000014   8155               LDD     R21, Z+5
    141            port^=IRS_H;
   \   00000016   8166               LDD     R22, Z+6
   \   00000018   8177               LDD     R23, Z+7
   \   0000001A   2746               EOR     R20, R22
   \   0000001C   2757               EOR     R21, R23
    142            port=(port&0x3FF)+1024;
   \   0000001E   7053               ANDI    R21, 0x03
   \   00000020   5F5C               SUBI    R21, 252
   \   00000022   C00B               RJMP    ??TCPconnect_0
    143          L1:
    144            ss=QUE_sock;
    145            while(ss)
    146            {
    147              if ((ss->state>TCP_STATE_LISTENING)&&port==ntohs(ss->lport))
   \                     ??TCPconnect_1:
   \   00000024   01FB               MOVW    R31:R30, R23:R22
   \   00000026   8D83               LDD     R24, Z+27
   \   00000028   3082               CPI     R24, 2
   \   0000002A   F060               BRCS    ??TCPconnect_2
   \   0000002C   8437               LDD     R3, Z+15
   \   0000002E   8820               LDD     R2, Z+16
   \   00000030   1542               CP      R20, R2
   \   00000032   0553               CPC     R21, R3
   \   00000034   F439               BRNE    ??TCPconnect_2
    148              {
    149                port++;
   \   00000036   5F4F               SUBI    R20, 255
   \   00000038   4F5F               SBCI    R21, 255
    150                goto L1;
    151              }
   \                     ??TCPconnect_0:
   \   0000003A   9160....           LDS     R22, (IP + 10)
   \   0000003E   9170....           LDS     R23, (IP + 11)
   \   00000042   C002               RJMP    ??TCPconnect_3
    152              ss=ss->next;
   \                     ??TCPconnect_2:
   \   00000044   8160               LD      R22, Z
   \   00000046   8171               LDD     R23, Z+1
    153            }
   \                     ??TCPconnect_3:
   \   00000048   2E06               MOV     R0, R22
   \   0000004A   2A07               OR      R0, R23
   \   0000004C   F759               BRNE    ??TCPconnect_1
    154            s->lport=htons(port);
   \   0000004E   01FD               MOVW    R31:R30, R27:R26
   \   00000050   8757               STD     Z+15, R21
   \   00000052   8B40               STD     Z+16, R20
    155            s->rip=ip;
   \   00000054   8703               STD     Z+11, R16
   \   00000056   8714               STD     Z+12, R17
   \   00000058   8725               STD     Z+13, R18
   \   0000005A   8736               STD     Z+14, R19
    156            //s->ACKNO=0; //Начинаем с 0
    157            prepare_sock(s,TCP_STATE_CONNECTING,0);
   \   0000005C   E010               LDI     R17, 0
   \   0000005E   E003               LDI     R16, 3
   \   00000060   ....               RCALL   prepare_sock
    158            ETH_TASK_WAKEUP=1;
   \   00000062   9A11               SBI     0x02, 0x01
    159           // if (!(save_lock&ETH_TASK_LOCK_MASK)) ETH_TASK_LOCK=0;
    160          }
   \   00000064   9189               LD      R24, Y+
   \   00000066   9508               RET
   \   00000068                      REQUIRE _A_TWAR
    161          
    162          static __x UREG CallTCPhook_null(UREG code, TCP_SOCK *s);
    163          

   \                                 In  segment CODE, align 2, keep-with-next
    164          static __x UREG ClosingTCP(UREG ev, TCP_SOCK *s)
   \                     ClosingTCP:
    165          {
    166            s->timer_init=0;
   \   00000000   E010               LDI     R17, 0
   \   00000002   9698               ADIW    R27:R26, 40
   \   00000004   931D               ST      X+, R17
    167            s->txreq=TCP_TXREQ_NONE;
   \   00000006   931C               ST      X, R17
   \   00000008   9797               SBIW    R27:R26, 39
    168            if (s->type&TCP_TYPE_SERVER)
   \   0000000A   911C               LD      R17, X
   \   0000000C   9712               SBIW    R27:R26, 2
   \   0000000E   FF10               SBRS    R17, 0
   \   00000010   C002               RJMP    ??ClosingTCP_0
    169            {
    170              s->state=TCP_STATE_LISTENING;
   \   00000012   E011               LDI     R17, 1
   \   00000014   C001               RJMP    ??ClosingTCP_1
    171            }
    172            else
    173              s->state=TCP_STATE_CLOSED;
   \                     ??ClosingTCP_0:
   \   00000016   E010               LDI     R17, 0
   \                     ??ClosingTCP_1:
   \   00000018   965B               ADIW    R27:R26, 27
   \   0000001A   931C               ST      X, R17
   \   0000001C   975B               SBIW    R27:R26, 27
    174            return CallTCPhook_null(ev,s);
   \   0000001E                      REQUIRE CallTCPhook_null
   \   0000001E                      ;               // Fall through to label CallTCPhook_null
    175          }
    176          
    177          static __x_z UREG CallTCPhook(UREG code, UREG len, void *p, TCP_SOCK *s);
    178          
    179          #pragma optimize=no_inline

   \                                 In  segment CODE, align 2, keep-with-next
    180          static __x UREG CallTCPhook_null(UREG code, TCP_SOCK *s)
   \                     CallTCPhook_null:
    181          {
    182            return CallTCPhook(code,0,NULL,s);
   \   00000000   01FD               MOVW    R31:R30, R27:R26
   \   00000002   E0A0               LDI     R26, 0
   \   00000004   E0B0               LDI     R27, 0
   \   00000006   E010               LDI     R17, 0
   \   00000008                      REQUIRE CallTCPhook
   \   00000008                      ;               // Fall through to label CallTCPhook
    183          }
    184          
    185          #pragma optimize=no_inline

   \                                 In  segment CODE, align 2, keep-with-next
    186          static __x_z UREG CallTCPhook(UREG code, UREG len, void *p, TCP_SOCK *s)
   \                     CallTCPhook:
    187          {
    188            return s->hook(code,len,p,s);
   \   00000000   019F               MOVW    R19:R18, R31:R30
   \   00000002   8143               LDD     R20, Z+3
   \   00000004   81F4               LDD     R31, Z+4
   \   00000006   2FE4               MOV     R30, R20
   \   00000008   9409               IJMP
    189          }

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   UINT32 __near IP
   \                     IP:
   \   00000000                      DS8 4
   \                     _A_count_200ms_low:
   \   00000004                      DS8 4
   \                     ETH_PKT_len:
   \   00000008                      DS8 2
   \                     QUE_sock:
   \   0000000A                      DS8 2
    190          
    191          #define __get_eth_root(VAR) ((ETH_FRAME *)(&ETH_PKT))
    192          
    193          extern __monitor void ETH_STOP_BACK_PRESSURE(void);
    194          extern __monitor __x UREG ETH_TRANSMIT_PACKET(ETH_FRAME *ep, unsigned int l);
    195          
    196          #ifdef USE_IPSEQ
    197          int IPSEQ;
   \                     IPSEQ:
   \   0000000C                      DS8 2
   \                     ETH_PKT_mode:
   \   0000000E                      DS8 1
   \   UINT8 __near MAC0[6]
   \                     MAC0:
   \   0000000F                      DS8 6

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \   UINT32 __near MASK_IP
   \                     MASK_IP:
   \   00000000                      DS8 4
    198          #endif
    199          
    200          #pragma optimize=no_inline

   \                                 In  segment CODE, align 2, keep-with-next
    201          static __z unsigned int ExtractMSS(TCP_PKT *tcp)
   \                     ExtractMSS:
    202          {
    203            unsigned int mss=TCP_MAX_DATA_LEN>536?536:TCP_MAX_DATA_LEN;
   \   00000000   E108               LDI     R16, 24
   \   00000002   E012               LDI     R17, 2
    204            if (tcp->tcp.hlen<(TCP_HEADER_LEN+4)) return mss;
   \   00000004   8524               LDD     R18, Z+12
   \   00000006   3128               CPI     R18, 24
   \   00000008   F408               BRCC    ??ExtractMSS_0
   \   0000000A   9508               RET
    205            if (tcp->data[0]==2&&tcp->data[1]==4)
   \                     ??ExtractMSS_0:
   \   0000000C   8924               LDD     R18, Z+20
   \   0000000E   3022               CPI     R18, 2
   \   00000010   F459               BRNE    ??ExtractMSS_1
   \   00000012   8925               LDD     R18, Z+21
   \   00000014   3024               CPI     R18, 4
   \   00000016   F441               BRNE    ??ExtractMSS_1
    206            {
    207              unsigned int rmss=ntohs(*((UINT16*)(tcp->data+2)));
   \   00000018   8936               LDD     R19, Z+22
   \   0000001A   8927               LDD     R18, Z+23
    208              mss=TCP_MAX_DATA_LEN;
   \   0000001C   E400               LDI     R16, 64
   \   0000001E   E015               LDI     R17, 5
    209              if (rmss<mss) mss=rmss;
   \   00000020   3420               CPI     R18, 64
   \   00000022   0731               CPC     R19, R17
   \   00000024   F408               BRCC    ??ExtractMSS_1
   \   00000026   0189               MOVW    R17:R16, R19:R18
    210            }
    211            return mss;
   \                     ??ExtractMSS_1:
   \   00000028   9508               RET
    212          }
    213          

   \                                 In  segment CODE, align 2, keep-with-next
    214          __x static void set_state_SYN_RECEIVED(TCP_SOCK *s, UINT32 *ackno, unsigned int mss)
   \                     set_state_SYN_RECEIVED:
    215          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   01C8               MOVW    R25:R24, R17:R16
    216            s->rmss=mss;
   \   00000006   01FD               MOVW    R31:R30, R27:R26
   \   00000008   A321               STD     Z+33, R18
   \   0000000A   A332               STD     Z+34, R19
    217            prepare_sock(s,TCP_STATE_SYN_RECEIVED,TCP_TIMER_INITV);
   \   0000000C   E014               LDI     R17, 4
   \   0000000E   E002               LDI     R16, 2
   \   00000010   ....               RCALL   prepare_sock
    218            inc32cpy(&s->ACKNO,ackno);
   \   00000012   9657               ADIW    R27:R26, 23
   \   00000014   01FD               MOVW    R31:R30, R27:R26
   \   00000016   01DC               MOVW    R27:R26, R25:R24
   \   00000018   910D               LD      R16, X+
   \   0000001A   911D               LD      R17, X+
   \   0000001C   912D               LD      R18, X+
   \   0000001E   913C               LD      R19, X
   \   00000020   9713               SBIW    R27:R26, 3
   \   00000022   8300               ST      Z, R16
   \   00000024   8311               STD     Z+1, R17
   \   00000026   8322               STD     Z+2, R18
   \   00000028   8333               STD     Z+3, R19
   \   0000002A   E001               LDI     R16, 1
   \   0000002C   ....               RCALL   inc32
    219          }
   \   0000002E   9189               LD      R24, Y+
   \   00000030   9199               LD      R25, Y+
   \   00000032   9508               RET
    220          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
    221          void *debug_addr;
   \                     debug_addr:
   \   00000000                      DS8 2
    222          
    223          //char const __flash _DecByteNum[]="%04X";
    224          //char const __flash _Razer2[]="\r\n";
    225          extern volatile UINT8 BufferPKT;
    226          extern volatile UINT8 FIFO_pkt_TS;
    227          extern char const __flash _EthWRlen[];
    228          extern char const __flash _EthTS[]; 
    229          extern char const __flash _EthCNT[];
    230          extern char const __flash _EthpWRH[];
    231          extern char const __flash _EthpWRL[];
    232          
    233          extern char const __flash _EthRDlen[];
    234          extern char const __flash _EthpRDH[];
    235          extern char const __flash _EthpRDL[];
    236          
    237          #pragma inline = forced
    238          void ETHfifo_write(UINT8 *data, UINT16 len, UINT8 TS)
    239          {
    240          	UINT32 pWR; //локальный указатель на запись
    241                  UINT16 len1;        
    242          	UINT8 c;
    243          	if(len == 0)  return;
    244                  if (ETHfifo_free() < ETH_MAX_PACKET_SIZE+3) return; // если пакет+длина+таймаут не влезут - не пишем
    245          	UINT8 header_cnt=0;
    246                 	pWR = ETHfifo_pWR;
    247                  len+=3; //  к длине Ethernet пакета добавим 2 байта его длины и 1 байт метки времени
    248                  #ifdef CONSOLE_DEBUG
    249                     _print_num (_EthWRlen,len); _print_num (_EthTS,(UINT16)TS);
    250                     _print_num (_EthpWRH,(UINT16)(pWR>>16)); _print_num (_EthpWRL,(UINT16)pWR);
    251                  #endif
    252                  len1=len;
    253                  {
    254                    UREG addr;
    255                    FM_CS_ENABLE();
    256                    SPDR=FM_WREN;        
    257                    while (!(SPSR & (1<<SPIF)));        
    258                    FM_CS_DISABLE();        
    259                    FM_CS_ENABLE();
    260                    SPDR=FM_WRITE;       
    261                    addr= (UREG) (pWR>>16);        
    262                    while (!(SPSR & (1<<SPIF)));  
    263                    SPDR= addr;
    264                    addr= (UREG)(pWR>>8);
    265                    while (!(SPSR & (1<<SPIF)));  
    266                    SPDR=addr;  
    267                    addr= (UREG)(pWR);
    268                    while (!(SPSR & (1<<SPIF)));          
    269                    SPDR=addr;        
    270                    while (!(SPSR & (1<<SPIF)));          
    271                  }  
    272                  // Открыли сессию записи в FIFO                                       
    273                  do
    274                  {
    275                    switch (header_cnt)
    276                    {
    277                     case 0:
    278                      c=(UINT8) ((len-3) >>8);
    279                      header_cnt++;
    280                      break;
    281                     case 1:
    282                      c=(UINT8) (len-3);
    283                      header_cnt++;
    284                      break;
    285                    case 2:  
    286                      c= TS;
    287                      header_cnt++;
    288                      break;
    289                    default:
    290                      c = *data++;
    291                      break;
    292                    }             		
    293                    SPDR = c;                     // записали байт в FRAM
    294                    UREG f=0;
    295                    if (++pWR>ETHfifo_pEND) f=1;// при записи след. ячейки упремся в потолок
    296                    while (!(SPSR & (1<<SPIF))); // wait SPI comm. finished                 
    297                    if (f) // при записи след. ячейки упремся в потолок... начнем с начала
    298                    {
    299                      UREG addr;
    300                 	    FM_CS_DISABLE(); // закроем старую сессию    
    301                      pWR=ETHfifo_pSTART;
    302                      FM_CS_ENABLE();  // откроем новую сессию записи с начального адреса
    303                      SPDR=FM_WREN;        
    304                      while (!(SPSR & (1<<SPIF)));              
    305          	    FM_CS_DISABLE();
    306            	    FM_CS_ENABLE();
    307                      SPDR=FM_WRITE;        
    308                      addr=(UREG)(pWR>>16);
    309                      while (!(SPSR & (1<<SPIF)));  
    310                      SPDR=addr;        
    311                      addr=(UREG)(pWR>>8);        
    312                      while (!(SPSR & (1<<SPIF)));  
    313                      SPDR=addr;
    314                      addr=(UREG)(pWR);
    315                      while (!(SPSR & (1<<SPIF)));          
    316                      SPDR=addr;        
    317                      while (!(SPSR & (1<<SPIF)));    // Открыли сессию записи в FIFO                                   
    318                    }
    319                  }
    320                  while (len1--);
    321                  FM_CS_DISABLE();
    322               	ETHfifo_pWR = pWR;
    323                  ETHfifo_CNT++;// увеличиваем счетчик пакетов в FIFO
    324                  #ifdef CONSOLE_DEBUG
    325                      _print_num (_EthCNT,(UINT16)ETHfifo_CNT);
    326                  #endif       
    327          }
    328          
    329          
    330          #pragma diag_suppress=Ta006

   \                                 In  segment CODE, align 2, keep-with-next
    331          void INT_ETH_PROCESS_PKT2(void)
   \                     INT_ETH_PROCESS_PKT2:
    332          {
   \   00000000   92BA               ST      -Y, R11
   \   00000002   92AA               ST      -Y, R10
   \   00000004   929A               ST      -Y, R9
   \   00000006   928A               ST      -Y, R8
   \   00000008   927A               ST      -Y, R7
   \   0000000A   926A               ST      -Y, R6
   \   0000000C   925A               ST      -Y, R5
   \   0000000E   924A               ST      -Y, R4
   \   00000010   93BA               ST      -Y, R27
   \   00000012   93AA               ST      -Y, R26
   \   00000014   939A               ST      -Y, R25
   \   00000016   938A               ST      -Y, R24
   \   00000018                      REQUIRE ?Register_R4_is_cg_reg
   \   00000018                      REQUIRE ?Register_R5_is_cg_reg
   \   00000018                      REQUIRE ?Register_R6_is_cg_reg
   \   00000018                      REQUIRE ?Register_R7_is_cg_reg
   \   00000018                      REQUIRE ?Register_R8_is_cg_reg
   \   00000018                      REQUIRE ?Register_R9_is_cg_reg
   \   00000018                      REQUIRE ?Register_R10_is_cg_reg
   \   00000018                      REQUIRE ?Register_R11_is_cg_reg
   \   00000018   C28E               RJMP    ??INT_ETH_PROCESS_PKT2_0
    333            unsigned int len;
    334            TCP_SOCK *s;
    335            ETH_FRAME *ep;
    336            ARP_FRAME *ap;
    337            ARP_FRAME *apo;
    338            IP_FRAME *ip;
    339            ICMP_PKT *icmp;
    340            TCP_PKT *tcp;
    341            TCP_HEADER *ptcp;
    342            TCP_FRAME *tcpf;
    343            void *ipdata;
    344            
    345            for(;;)
    346            {
    347            L_CHECK_INCOMING:
    348              if (ETH_PKT_mode>=2)
    349              {
    350                //if (ETH_TRANSMIT_PACKET(&ETH_PKT,READ_U16(ETH_PKT_len))) continue;
    351               // print_dump((unsigned char *)&ETH_PKT,READ_U16(ETH_PKT_len));
    352                if ((enc28j60PacketSend((unsigned char *)&ETH_PKT,READ_U16(ETH_PKT_len)))==0) ETH_PKT_mode=0;
    353                else ETH_PKT_mode=16;
   \                     ??INT_ETH_PROCESS_PKT2_1:
   \   0000001A   E100               LDI     R16, 16
   \                     ??INT_ETH_PROCESS_PKT2_2:
   \   0000001C   9300....           STS     (IP + 14), R16
   \   00000020   C002               RJMP    ??INT_ETH_PROCESS_PKT2_3
    354              }
    355              if (ETH_PKT_mode!=1) break;
   \                     ??INT_ETH_PROCESS_PKT2_4:
   \   00000022   3001               CPI     R16, 1
   \   00000024   F031               BREQ    ??INT_ETH_PROCESS_PKT2_5
    356              ep=&ETH_PKT;
    357              len=READ_U16(ETH_PKT_len);
    358              ap=(ARP_FRAME*)ep;
    359              ip=(IP_FRAME*)ep;
    360              switch(ep->hdr.type)
    361              {
    362              case ETH_PROTOCOL_ARP:
    363                if (ap->arp.proto!=ARP_ETHCODE) break;
    364                if (ap->arp.hw_type!=ARP_HARDWARE) break;
    365                switch(ap->arp.opcode)
    366                {
    367                case ARP_REQUEST:
    368          	if (IPcmp(&ap->arp.dst_ip,&IP)) break;
    369          	if ((ep->hdr.dst_mac[0]&ep->hdr.dst_mac[1]&ep->hdr.dst_mac[2]&ep->hdr.dst_mac[3]&ep->hdr.dst_mac[4]&ep->hdr.dst_mac[5])!=0xFF) break;
    370          	//if (CRC32_M4((UINT8*)ep,READ_U16(ETH_PKT_len))) break;
    371          	apo=(ARP_FRAME*)ep;
    372          	IPcpy(&apo->arp.dst_ip,&ap->arp.src_ip);
    373          	MACcpy(apo->arp.dst_mac+ETH_HWA_LEN,ap->arp.src_mac+ETH_HWA_LEN);
    374          	MACcpy(apo->arp.src_mac+ETH_HWA_LEN,MAC0+ETH_HWA_LEN);
    375          	MACcpy(apo->eth.dst_mac+ETH_HWA_LEN,apo->eth.src_mac+ETH_HWA_LEN);
    376          	MACcpy(apo->eth.src_mac+ETH_HWA_LEN,MAC0+ETH_HWA_LEN);
    377          	apo->arp.opcode=ARP_RESPONSE;
    378          	IPcpyIP(&apo->arp.src_ip);
    379          	len=ARP_FRAME_LEN;
    380          	ep=(ETH_FRAME*)apo;
    381          	goto L_SENDETH;
    382                case ARP_RESPONSE:
    383          	if (IPcmp(&ap->arp.dst_ip,&IP)) break;
    384          	if (MACcmp(ep->hdr.dst_mac,MAC0)) break;
    385          	//if (CRC32_M4((UINT8*)ep,READ_U16(ETH_PKT_len))) break;
    386          	MACcpy(ap->eth.src_mac+ETH_HWA_LEN,ap->arp.src_mac+ETH_HWA_LEN); //Именно тот MAC, который внутри пакета
    387          	{
    388          	  //Ищем клиента, который находится в состоянии CONNECTING
    389          	  s=QUE_sock;
    390          	  while(s)
    391          	  {
    392          	      if ((s->state==TCP_STATE_CONNECTING)&&(!IPcmp(&ap->arp.src_ip,&s->ACKNO)))
    393                      //if ((s->state==TCP_STATE_CONNECTING))
    394          	    {
    395          	      //Наш клиент ;)
    396          	      s->state=TCP_STATE_SYN_SENT;
    397                        s->ACKNO=0;
    398          	      ip=(IP_FRAME*)ep;
    399          	      tcpf=(TCP_FRAME*)ip;
    400          	      IPcpy(&tcpf->ip.dest_ip,&s->rip);
    401          	      MACcpy(s->dst_mac+ETH_HWA_LEN,ip->eth.src_mac+ETH_HWA_LEN); //Сохраним нужный MAC-адрес
    402          	      ptcp=(TCP_HEADER*)&s->lport;
    403          	      len=0;
    404          	      goto L_SENDTCPWITHDATA;
    405          	    }
    406          	    s=s->next;
    407          	  }
    408          	}
    409          	break;
    410                }
    411                break;
    412              case ETH_PROTOCOL_IP:      
    413                if (IPcmp(&ip->ip.dest_ip,&IP)) break;
    414                if (MACcmp(ep->hdr.dst_mac,MAC0)) break;
    415                {
    416                  //print_lenRX((unsigned char *)&ETH_PKT, len);	
    417          	unsigned int i=len;  
    418          	UREG ip_hlen;
    419          	len=ntohs(ip->ip.tlen);
    420          	//i-=((ETH_HEADER_LEN)+4); //Без заголовка и CRC32
    421                  i-=((ETH_HEADER_LEN)); //enc28j60 port
    422          	if ((ip->ip.vihl&0xF0)!=0x40) break;
    423          	ip_hlen=((ip->ip.vihl&0x0F)<<2);
    424          	if (ip_hlen>IP_MAX_OPTLEN) break;
    425          	if (ip_hlen>=i) break;
    426          	if (len>i) break;
    427          	if (len<ip_hlen) break;
    428          	len-=ip_hlen;
    429          	ipdata=(void*)((UINT8*)(&ip->ip)+ip_hlen);
    430                  if (!BufferPKT)
    431                  {
    432          	  if (ip->ip.frags&htons(IP_MOREFRAGS | IP_FRAGOFF)) break;// тут вылетело
    433                  }
    434          	//if (CRC32_M4((UINT8*)ep,READ_U16(ETH_PKT_len))) break;
    435                  if (!BufferPKT)
    436                  {
    437                    if (IPChecksum((UINT16 *)&ip->ip, IP_HEADER_LEN)!=IP_GOOD_CS) break;
    438                  }	
    439                }
    440                switch(ip->ip.proto)
    441                {
    442                case IP_ICMP:
    443          	icmp=ipdata;
    444          	if (len<ICMP_HEADER_LEN) break;
    445          	if (IPChecksum((UINT16*)icmp,len)!=IP_GOOD_CS) break;
    446          	if (icmp->icmp.code) break;
    447          	if (icmp->icmp.type!=ICMP_ECHO_REQUEST) break;
    448          	ep=__get_eth_root(ip);
    449          	IPcpy(&((IP_FRAME*)ep)->ip.dest_ip,&ip->ip.src_ip);
    450          	ip=(IP_FRAME*)ep;
    451          	if (len) netw_memcpy(ip->data,icmp,len);
    452          	icmp=(ICMP_PKT*)ip->data;
    453          	//netw_memcpy(icmp->data+2*sizeof(TCP_SOCK),debug_addr,16); //DEBUG - можно пингом подсмотреть RAM, например ;)
    454          	//netw_memcpy(icmp->data+0*sizeof(TCP_SOCK),QUE_sock,sizeof(TCP_SOCK));
    455          	//netw_memcpy(icmp->data+1*sizeof(TCP_SOCK),QUE_sock->next,sizeof(TCP_SOCK));
    456          	icmp->icmp.type=ICMP_ECHO_RESPONSE;
    457          	icmp->icmp.checksum=0;
    458          	icmp->icmp.checksum=IPChecksum((UINT16*)icmp,len);
    459          	goto L_CREATEIP;
    460                case IP_TCP:
    461          	{
    462          	  UREG tcp_hlen;
    463          	  tcp=ipdata;
    464          	  if (len<TCP_HEADER_LEN) break;
    465                    if (!BufferPKT)
    466                    {
    467          	    ip->ip.checksum=htons((UINT16)len);
    468          	    ip->ip.frags=~IPChecksum((UINT16*)tcp,len);
    469          	    tcp_hlen=tcp->tcp.hlen=(tcp->tcp.hlen&0xF0)>>2;
    470                    }
    471                    else  tcp_hlen=tcp->tcp.hlen;
    472                      if (tcp_hlen<TCP_HEADER_LEN) break;
    473          	    if (tcp_hlen>(TCP_MAX_OPT_LEN+TCP_HEADER_LEN)) break;
    474          	    if (len<tcp_hlen) break;
    475          	    len-=tcp_hlen;
    476          	}
    477          	ip->ip.ttl=0;
    478                  if (!BufferPKT)
    479                  {
    480          	  if (IPChecksum((UINT16*)&ip->ip.frags,14)!=IP_GOOD_CS) break;
    481                  }
    482          	//Ищем нужный сокет
    483          	s=QUE_sock;
    484          	while(s)
    485          	{
    486          	  if (s->lport==tcp->tcp.dest_port)
    487          	  {
    488          	    //Локальный порт совпадает
    489          	    if (s->state==TCP_STATE_LISTENING)
    490          	    {
    491          	      //Сокет в состоянии LISTENING, делаем bind
    492          	      if((tcp->tcp.flags&(TCP_FLAG_SYN|TCP_FLAG_ACK|TCP_FLAG_RESET|TCP_FLAG_FIN))!=TCP_FLAG_SYN) break; //Это не SYN
    493          	      IPcpy(&s->rip,&ip->ip.src_ip);
    494          	      s->rport=tcp->tcp.src_port;
    495          	      MACcpy(s->dst_mac+ETH_HWA_LEN,__get_eth_root(ip)->hdr.src_mac+ETH_HWA_LEN);
    496          	      goto L_FOUND_SOCKET;
    497          	    }
    498          	    else
    499          	    {
    500          	      //Этот сокет не в состоянии LISTENING, проверяем необходимость добавления в очередь
    501          	      if (s->rport==tcp->tcp.src_port && !IPcmp(&s->rip, &ip->ip.src_ip) /*s->rip==ip->ip.src_ip*/) goto L_FOUND_SOCKET; //Найден сокет в открытом состоянии
    502          	      //Попробуем добавить ломящегося клиента в очередь (только если сокет не закрыт (и только серверный сокет))
    503          	      if (
    504          		  (tcp->tcp.flags&(TCP_FLAG_SYN|TCP_FLAG_ACK|TCP_FLAG_RESET|TCP_FLAG_FIN))==TCP_FLAG_SYN
    505          		    &&
    506          		  (s->state!=TCP_STATE_CLOSED)
    507          		    //&&
    508          		  //(s->type&TCP_TYPE_SERVER)
    509          		    )
    510          	      {
    511          		//Сначала проверяем, а не ожидается ли такой в очереди
    512          		TCP_QUE_CLIENT *p;
    513          		UREG i=CallTCPhook(TCP_EVENT_QUE_GET,0,(TCP_QUE_CLIENT**)(&tcp->tcp.ackno),s);
    514          		p=*((TCP_QUE_CLIENT **)(&tcp->tcp.ackno));
    515          		while(i)
    516          		{
    517          		  if (p->rport==tcp->tcp.src_port && !IPcmp(&p->rip,&ip->ip.src_ip)) goto L_TCPDROP; //Такой мы уже запомнили
    518          		  p++;
    519          		  i--;
    520          		}
    521          		//Используем tcp.ackno как переменную для хранения адреса TCP_QUE_CLIENT
    522          		if (CallTCPhook(TCP_EVENT_QUE_ALLOC,0,(TCP_QUE_CLIENT**)(&tcp->tcp.ackno),s))
    523          		{
    524          		  p=*((TCP_QUE_CLIENT **)(&tcp->tcp.ackno));
    525          		  MACcpy(p->dst_mac+ETH_HWA_LEN,__get_eth_root(ip)->hdr.src_mac+ETH_HWA_LEN);
    526          		  p->mss=ExtractMSS(tcp);
    527          		  p->rport=tcp->tcp.src_port;
    528          		  IPcpy(&p->rip,&ip->ip.src_ip);
    529          		  //p->seqno=tcp->tcp.seqno;
    530          		  IPcpy(&p->seqno,&tcp->tcp.seqno);
    531          		  goto L_TCPDROP;
    532          		}
    533          	      }
    534          	    }
    535          	  }
    536          	  s=s->next;
    537          	}
    538          	//Не нашли ничего подходящего
    539                  goto L_FAST_FIN;
    540                L_FOUND_SOCKET:
    541          	if (tcp->tcp.flags & TCP_FLAG_RESET)
    542          	{
    543          	  //Обрабатываем флаг сброса
    544          	  switch(s->state)
    545          	  {
    546          	    //Для всех состояний, кроме SYN-SENT, все сегменты с сигналом перезагрузки (RST) проходят проверку полей SEQ.
    547          	  default:
    548          	    //Сигнал перезагрузки признается, если его номер очереди попадает в окно
    549          	    if (cmp_S_A(tcp,s)) goto L_TCPDROP;
    550          	    break;
    551          	    //Если получатель находился в состоянии LISTENING
    552          	  case TCP_STATE_LISTENING:
    553          	    goto L_TCPDROP; //то он игнорирует сигнал
    554          	    //В состоянии SYN SENT 
    555          	  case TCP_STATE_SYN_SENT:
    556          	    //сигнал RST признается, если поле ACK подтверждает ранее сделанную посылку сигнала SYN.
    557          	    if (cmp_A_S(tcp,s)!=1) goto L_TCPDROP;
    558          	    break;
    559          	  }
    560          	  if (ClosingTCP(TCP_EVENT_ABORT,s)) s->state=TCP_STATE_QUE_CLIENT;//Будем имитировать приход SYN-пакета
    561          	L_TCPDROP:
    562          	  break;
    563          	}
    564          	if (tcp->tcp.flags & TCP_FLAG_SYN)
    565          	{
    566          	  //Обрабатываем флаг SYN
    567          	  switch(s->state)
    568          	  {
    569          	  default:
    570          	    if (cmp_S_A(tcp,s)||(len>ntohs(s->win))) goto L_TCPDROP;//break; //Не попадаем в окно приема
    571          	    if (ClosingTCP(TCP_EVENT_ABORT,s)) s->state=TCP_STATE_QUE_CLIENT;//Будем имитировать приход SYN-пакета
    572          	    goto L_SENDRESET;
    573          	  case TCP_STATE_SYN_SENT:
    574          	    //Нам ответили, проверяем
    575          	    if (cmp_A_S(tcp,s)!=1) goto L_TCPDROP; //Не наш
    576          	    inc32cpy(&s->ACKNO,&tcp->tcp.seqno);
    577          	    s->rmss=ExtractMSS(tcp);
    578          	    CallTCPhook_null(TCP_EVENT_CONREQ,s);
    579          	    goto L_CONNECTED;
    580          	  case TCP_STATE_LISTENING:
    581          	    if (tcp->tcp.flags & TCP_FLAG_ACK) goto L_SENDRESET;
    582          	    CallTCPhook_null(TCP_EVENT_CONREQ,s);
    583          	    set_state_SYN_RECEIVED(s,&tcp->tcp.seqno,ExtractMSS(tcp));
    584          	    break;
    585          	  }
    586          	}
    587          	else
    588          	{
    589                    #ifdef CONSOLE_DEBUG         
    590                    _print_fstr("\r\nTCP");
    591                    _print_num("FLG:",(UINT16)BufferPKT);
    592                    #endif
    593          	  int d;
    594          	  if (!(tcp->tcp.flags & TCP_FLAG_ACK)) goto L_TCPDROP; //Drop packets without ACK
    595          	  if (s->state==TCP_STATE_SYN_SENT) goto L_TCPDROP;
    596          	  d=cmp_S_A(tcp,s);
    597          	  if (len>ntohs(s->win)) goto L_TCPACK;
    598          //	  if (d==1 && s->state==TCP_STATE_FINW1) goto L_LINUX_BUG;
    599                    if (d && s->state==TCP_STATE_FINW1) goto L_LINUX_BUG;
    600          //          ->>> Вот тут надо сделать следующую фигню <<<-
    601           //         собственно фигня:
    602                       #ifdef CONSOLE_DEBUG
    603                      _print_num("\r\nd:",d);
    604                      _print_num("ID:",_READ_U16_REV (((UINT8*)(&ip->ip.id))));
    605                      #endif
    606                    if (d>0)
    607                    {
    608                      
    609                      //Слишком свежий пакет
    610                      if (BufferPKT)//флаг, что обрабатываемый пакет достали из буфера
    611                      {
    612                          #ifdef CONSOLE_DEBUG
    613                          //_print_num("\r\nSave'n'drop#",_READ_U16_REV (((UINT8*)(&tcp->tcp.seqno))+2)); // дампим записанный SEQ#
    614                          _print_fstr("Save'n'drop"); 
    615                          #endif
    616                          ETHfifo_write(ETH_PKT.hdr.dst_mac,ETH_PKT_len, FIFO_pkt_TS);
    617                          //сохраняем пакет в буфер; //Ибо его достали в основном цикле, таймаут не трогаем
    618                          goto L_TCPDROP; //Нафиг пока
    619                      }
    620                          #ifdef CONSOLE_DEBUG
    621                          //_print_num("\r\nSave'n'ACK#:", _READ_U16_REV (((UINT8*)(&tcp->tcp.seqno))+2)); // дампим записанный SEQ#
    622                          _print_fstr("Save'n'ACK"); 
    623                          #endif
    624                         //инициализируем таймаут для пакета, который пойдет в буфер;
    625                         //сохраняем пакет в буфер; //Ибо его достали в основном цикле
    626                          ETHfifo_write(ETH_PKT.hdr.dst_mac,ETH_PKT_len, (UINT8)(irs_high+20));
    627                          goto L_TCPACK;
    628                    }          
    629          	  if (d) goto L_TCPACK;
    630          	  switch(s->state)
    631          	  {
    632          	  case TCP_STATE_SYN_RECEIVED:
    633          	    if (cmp_A_S(tcp,s)!=1) //Если же подтверждение в сегменте оказалось неприемлемым,
    634          	      goto L_SENDRESET; //то сформировать сегмент с сигналом перезагрузки
    635          	  L_CONNECTED:
    636          	    inc32(&s->SEQNO,1);
    637          	    s->state=TCP_STATE_CONNECTED;
    638          	    s->flags=TCP_FLAG_ACK;
    639          //	    s->type&=~TCP_TYPE_FLAG_DELAYED_ACK;
    640                       s->type|=TCP_TYPE_FLAG_DELAYED_ACK;
    641          	    goto L_TCP_CHECK_INCOMING;
    642          	  case TCP_STATE_CONNECTED:
    643          	    if ((d=cmp_A_S(tcp,s))<0) goto L_TCPDROP; //Очень древнее подтверждение, или уж очень новое
    644          	    {
    645          	      unsigned int i;
    646          	      unsigned int o;
    647          	      i=s->sended_len;
    648          	      if (d>i)
    649          	      {
    650          #ifdef IPSEQ_DEBUG
    651          		IPSEQ=1;
    652          #endif
    653          		 goto L_TCPACK; //Мы столько никогда не посылали, посылаем ACK
    654          	      }
    655          	      i-=d;
    656          	      s->sended_len=i; //Уменьшаем общее количество посланного на количество подтвержденного
    657          	      //Расчитываем новое смещение относительно SEQ
    658          	      o=i=s->send_disp;
    659          	      if (d>i)
    660          	      {
    661          		i=0;
    662          	      }
    663          	      else
    664          	      {
    665          		i-=d;
    666          	      }
    667          	      s->send_disp=i;
    668          	      if (i==0&&o!=0)
    669          	      {
    670          		//Пробуем расчитать новый RTT
    671          		UREG i=s->timer_init;
    672          		if (s->timer>(__multiply_unsigned(i,64)>>8))
    673          		{
    674          		  if (i==255)
    675          		  {
    676          		    //Специальный случай
    677          		    i=128;
    678          		  }
    679          		  else
    680          		    i>>=1;
    681          		  if (i<TCP_TIMER_INITV) i=TCP_TIMER_INITV;
    682          		}
    683          		s->timer=i;
    684          		s->timer_init=i;
    685          	      }
    686          	    }
    687          	    inc32i(&s->SEQNO,d);
    688          	    {
    689          	      UREG i;
    690          	      for(;;)
    691          	      {
    692          		i=255; if (d<i) i=d; d-=i;
    693          		if (!i) break;
    694          		CallTCPhook(TCP_EVENT_ACK,i,NULL,s);
    695          	      }
    696          	    }
    697          	  L_TCP_CHECK_INCOMING:
    698          	    {
    699          	      UREG is_data_for_send;
    700          	      {
    701          		//Окно на другой стороне
    702          		unsigned int rw=ntohs(tcp->tcp.window);
    703          		if (rw>(TCP_MAX_DATA_LEN*4)) rw=TCP_MAX_DATA_LEN*4; //Не надо больше 4х пакетов за раз ;)
    704          		s->rwin=rw;
    705          	      }
    706          	      inc32i(&s->ACKNO,len);
    707          	      {
    708          		unsigned int d=0;
    709          		unsigned int j;
    710          		do
    711          		{
    712          		  j=len-d; //Сколько осталось
    713          		  if (j>255) j=255; //Слишком много ;)
    714          		  is_data_for_send=CallTCPhook(TCP_EVENT_DATA,j,tcp->data-TCP_HEADER_LEN+tcp->tcp.hlen+d,s);
    715          		  j=len-d;
    716          		  if (j>255) j=255;
    717          		  d+=j;
    718          		}
    719          		while(d!=len);
    720          	      }
    721          	      if (tcp->tcp.flags & TCP_FLAG_FIN)
    722          	      {
    723          		inc32(&s->ACKNO,1); //Подтвердим FIN
    724          		s->state=TCP_STATE_FINW1;
    725          	      }
    726          	      if (s->state==TCP_STATE_FINW1)
    727          	      {
    728          		//Кто-то инициировал закрытие сокета
    729          		s->flags=TCP_FLAG_ACK|TCP_FLAG_FIN;
    730                          s->timer=0;
    731                          //Попробуем послать чуть позже
    732          		goto L_TCPDROP; //А вдруг там в другом пакете уже нас FIN дожидается?
    733          	      }
    734                        if (!s->win) goto L_TCPACK; //Если окно стало равным 0, посылаем подтверждение в принудительном порядке
    735          	      if (is_data_for_send&&(s->send_disp==0)) //Если запрос передачи - передаем через REQ
    736          	      {
    737          		//Кроме того, необходимо, чтобы у нас не было неподтвержденных пакетов
    738          		s->txreq=TCP_TXREQ_SEND; //Продолжаем посылать
    739          	      }
    740          	      else 
    741          	      {
    742          		if (len)
    743          		{
    744          		  s->timer=s->timer_init; //Нам пришли данные, начинаем отсчет сначала
    745          		  UREG fda=s->type;
    746          		  //Надо подтвердить данные, проверяем на delayed ack
    747          		  if (fda&TCP_TYPE_FLAG_DELAYED_ACK)
    748          		  {
    749          		    //Принудительный ответ на каждый второй пакет с данными
    750          		    s->type=fda&~TCP_TYPE_FLAG_DELAYED_ACK;
    751          		    //Отключаем таймер delayed ack
    752          		    if (s->txreq>TCP_TXREQ_SEND) s->txreq=TCP_TXREQ_NONE;
    753          #ifdef IPSEQ_DEBUG
    754          		    IPSEQ=4;
    755          #endif
    756          		    goto L_TCPACK;
    757          		  }
    758          		  s->txreq=TCP_TXREQ_DACK2;
    759          		  s->type=fda|TCP_TYPE_FLAG_DELAYED_ACK;
    760          		}
    761          	      }
    762          	    }
    763          	    goto L_TCPDROP;
    764          	  case TCP_STATE_CLOSED:
    765          	    goto L_SENDRESET;
    766          	  case TCP_STATE_FINW1:
    767          	    if ((!(tcp->tcp.flags & TCP_FLAG_FIN)) && cmp_A_S(tcp,s)<=0) goto L_TCPDROP;//Если же подтверждение в сегменте оказалось неприемлемым,
    768          	  L_LINUX_BUG:
    769          	    if (ClosingTCP(TCP_EVENT_CLOSE,s)) s->state=TCP_STATE_QUE_CLIENT;//Будем имитировать приход SYN-пакета
    770          	    if (tcp->tcp.flags & TCP_FLAG_FIN) goto L_FAST_FIN;
    771          	    goto L_TCPDROP;
    772          	  default:
    773                      {
    774                      L_SENDRESET:
    775                      L_FAST_FIN:
    776                        if(tcp->tcp.flags & TCP_FLAG_ACK)
    777                        {
    778                          swapmem(&tcp->tcp.seqno,4);
    779                          if (tcp->tcp.flags & TCP_FLAG_FIN)
    780                          {
    781                            inc32(&tcp->tcp.ackno,1);
    782                            tcp->tcp.flags = TCP_FLAG_ACK | TCP_FLAG_FIN;
    783                          }
    784                          else
    785                          {
    786                            tcp->tcp.flags = TCP_FLAG_RESET;
    787                          }
    788                        }
    789                        else
    790                        {
    791                          inc32cpy(&tcp->tcp.ackno,&tcp->tcp.seqno);
    792                          tcp->tcp.seqno=0;
    793                          tcp->tcp.flags = TCP_FLAG_RESET | TCP_FLAG_ACK;	
    794                        }
    795                        swapmem(&tcp->tcp.src_port,2);
    796                        ptcp=&tcp->tcp;
    797                      }
    798          	    goto L_SENDTCP;
    799          	  }
    800          	}
    801                L_TCPACK:
    802          	ptcp=(TCP_HEADER*)&s->lport;
    803                L_SENDTCP:
    804          	len=0; //Нет данных
    805          	//Костыль, копирование ip_dest из старого в новый
    806          	IPcpy(&(tcpf=(TCP_FRAME*)__get_eth_root(ip))->ip.dest_ip,&ip->ip.src_ip);
    807                L_SENDTCPWITHDATA:
    808          	IPcpyIP(&tcpf->ip.src_ip); //Для правильного расчета контрольной суммы псевдозаголовка
    809          	tcpf->ip.ttl=0;
    810          	tcpf->ip.proto=IP_TCP;
    811          	netw_memcpy(&tcpf->tcp.src_port,ptcp,16);
    812          	tcpf->tcp.hlen=(TCP_HEADER_LEN << 2) & 0xfc;
    813          	if (s)
    814          	{
    815          	  unsigned int d=s->send_disp;
    816          	  if (s->txreq==TCP_TXREQ_DUPACK)
    817          	  {
    818          	    d=0;
    819          	    s->txreq=TCP_TXREQ_NONE;
    820          	  }
    821          	  inc32i(&tcpf->tcp.seqno,d);
    822          	  d=s->send_disp;
    823          	  d+=len;
    824          	  s->send_disp=d;
    825          	  if (d>s->sended_len) s->sended_len=d;
    826          	  //Если посылаем SYN, то добавляем опцию MSS
    827          	  if (tcpf->tcp.flags & TCP_FLAG_SYN)
    828          	  {
    829          	    tcpf->tcp.hlen=((TCP_HEADER_LEN+4) << 2) & 0xfc;
    830          	    tcpf->data[0]=0x02;
    831          	    tcpf->data[1]=0x04;
    832          	    tcpf->data[2]=(TCP_MAX_DATA_LEN)>>8;
    833          	    tcpf->data[3]=(TCP_MAX_DATA_LEN)&0xFF;
    834          	    len+=4;
    835          	  }
    836          	}
    837          	len+=TCP_HEADER_LEN;
    838          	tcpf->ip.checksum=htons(len);
    839          	tcpf->tcp.urgent=0;
    840          	tcpf->tcp.checksum=0; //~IPChecksum((UINT16*)&tcpf->ip.ttl,12);
    841          	tcpf->tcp.checksum=IPChecksum((UINT16*)&tcpf->ip.ttl,len+12);  //IPChecksum((UINT16*)&tcpf->tcp,len);
    842          	ip=(IP_FRAME *)tcpf;
    843                L_CREATEIP:
    844          	len+=IP_HEADER_LEN;
    845          	MACcpy(ip->eth.dst_mac+ETH_HWA_LEN,ip->eth/*ep->hdr*/.src_mac+ETH_HWA_LEN); //Временно, тут нужен ARP кеш
    846          	MACcpy(ip->eth.src_mac+ETH_HWA_LEN,MAC0+ETH_HWA_LEN);
    847          	ip->eth.type=ETH_PROTOCOL_IP;
    848          	/* Make IP header	*/
    849          	ip->ip.vihl = IP_DEF_VIHL;
    850          	ip->ip.tos = IP_DEF_TOS;
    851          	ip->ip.tlen = htons(len);
    852          #ifdef USE_IPSEQ
    853          #ifdef IPSEQ_DEBUG
    854          	ip->ip.id = htons(IPSEQ);
    855          	IPSEQ=0;
    856          #else
    857          	ip->ip.id = htons(++IPSEQ);
    858          #endif
    859          #else
    860          	ip->ip.id=0;
    861          #endif
    862          	ip->ip.frags = htons(IP_DONT_FRAGMENT);
    863          	ip->ip.ttl = 0x80;	/* ttl */
    864          	ip->ip.checksum = 0;	/* prepare checksum */
    865          	IPcpyIP(&ip->ip.src_ip);	/* My IP */
    866          	/* Make checksum */
    867          	ip->ip.checksum = IPChecksum((UINT16 *)&ip->ip, IP_HEADER_LEN);	/* create checksum */
    868          	len+=ETH_HEADER_LEN;
    869          	ep=(ETH_FRAME *)ip;
    870                L_SENDETH:
    871          	if (len<60) len=60;
    872          	//CRC32((UINT8*)ep,len,1);
    873          	ETH_PKT_len=len;//+4;
    874          	ETH_PKT_mode=16;
    875          	continue;
    876                }
    877                break;
    878              }
    879              //Освобождение пакета
    880              ETH_PKT_mode=0;
    881              ETH_STOP_BACK_PRESSURE();
    882            }
    883            // Проверка таймера
    884            if (TIMER_200ms)
   \                     ??INT_ETH_PROCESS_PKT2_3:
   \   00000026   9B14               SBIS    0x02, 0x04
   \   00000028   C606               RJMP    ??INT_ETH_PROCESS_PKT2_6
    885            {
    886              TIMER_200ms=0;
   \   0000002A   9814               CBI     0x02, 0x04
    887              s=((TCP_SOCK *)&QUE_sock);
   \   0000002C   ....               LDI     R24, LOW((IP + 10))
   \   0000002E   ....               LDI     R25, HIGH((IP + 10))
   \   00000030   C5FC               RJMP    ??INT_ETH_PROCESS_PKT2_7
   \                     ??INT_ETH_PROCESS_PKT2_5:
   \   00000032   90A0....           LDS     R10, (IP + 8)
   \   00000036   90B0....           LDS     R11, (IP + 9)
   \   0000003A   ....               LDI     R16, LOW(ETH_PKT)
   \   0000003C   2E40               MOV     R4, R16
   \   0000003E   ....               LDI     R16, (ETH_PKT) >> 8
   \   00000040   2E50               MOV     R5, R16
   \   00000042   ....               LDI     R24, LOW(ETH_PKT)
   \   00000044   ....               LDI     R25, (ETH_PKT) >> 8
   \   00000046   ....               LDI     R30, LOW(ETH_PKT)
   \   00000048   ....               LDI     R31, (ETH_PKT) >> 8
   \   0000004A   85A4               LDD     R26, Z+12
   \   0000004C   85B5               LDD     R27, Z+13
   \   0000004E   9718               SBIW    R27:R26, 8
   \   00000050   F409               BRNE    $+2+2
   \   00000052   C0DB               RJMP    ??INT_ETH_PROCESS_PKT2_8
   \   00000054   50A0               SUBI    R26, 0
   \   00000056   40B6               SBCI    R27, 6
   \   00000058   F009               BREQ    $+2+2
   \   0000005A   C268               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   0000005C   9100....           LDS     R16, (ETH_PKT + 16)
   \   00000060   9110....           LDS     R17, (ETH_PKT + 17)
   \   00000064   3008               CPI     R16, 8
   \   00000066   4010               SBCI    R17, 0
   \   00000068   F009               BREQ    $+2+2
   \   0000006A   C260               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   0000006C   9100....           LDS     R16, (ETH_PKT + 14)
   \   00000070   9110....           LDS     R17, (ETH_PKT + 15)
   \   00000074   3000               CPI     R16, 0
   \   00000076   4011               SBCI    R17, 1
   \   00000078   F009               BREQ    $+2+2
   \   0000007A   C258               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   0000007C   91E0....           LDS     R30, (ETH_PKT + 20)
   \   00000080   91F0....           LDS     R31, (ETH_PKT + 21)
   \   00000084   50E0               SUBI    R30, 0
   \   00000086   40F1               SBCI    R31, 1
   \   00000088   F029               BREQ    ??INT_ETH_PROCESS_PKT2_10
   \   0000008A   50E0               SUBI    R30, 0
   \   0000008C   40F1               SBCI    R31, 1
   \   0000008E   F409               BRNE    $+2+2
   \   00000090   C057               RJMP    ??INT_ETH_PROCESS_PKT2_11
   \   00000092   C24C               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \                     ??INT_ETH_PROCESS_PKT2_10:
   \   00000094   ....               LDI     R30, LOW(ETH_PKT)
   \   00000096   ....               LDI     R31, (ETH_PKT) >> 8
   \   00000098   A106               LDD     R16, Z+38
   \   0000009A   A117               LDD     R17, Z+39
   \   0000009C   A520               LDD     R18, Z+40
   \   0000009E   A531               LDD     R19, Z+41
   \   000000A0   ....               LDI     R30, LOW(IP)
   \   000000A2   ....               LDI     R31, (IP) >> 8
   \   000000A4   8140               LD      R20, Z
   \   000000A6   8151               LDD     R21, Z+1
   \   000000A8   8162               LDD     R22, Z+2
   \   000000AA   8173               LDD     R23, Z+3
   \   000000AC   1704               CP      R16, R20
   \   000000AE   0715               CPC     R17, R21
   \   000000B0   0726               CPC     R18, R22
   \   000000B2   0737               CPC     R19, R23
   \   000000B4   F009               BREQ    $+2+2
   \   000000B6   C23A               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   000000B8   9100....           LDS     R16, ETH_PKT
   \   000000BC   9110....           LDS     R17, (ETH_PKT + 1)
   \   000000C0   2301               AND     R16, R17
   \   000000C2   9110....           LDS     R17, (ETH_PKT + 2)
   \   000000C6   2301               AND     R16, R17
   \   000000C8   9110....           LDS     R17, (ETH_PKT + 3)
   \   000000CC   2301               AND     R16, R17
   \   000000CE   9110....           LDS     R17, (ETH_PKT + 4)
   \   000000D2   2301               AND     R16, R17
   \   000000D4   9110....           LDS     R17, (ETH_PKT + 5)
   \   000000D8   2301               AND     R16, R17
   \   000000DA   3F0F               CPI     R16, 255
   \   000000DC   F009               BREQ    $+2+2
   \   000000DE   C226               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   000000E0   ....               LDI     R30, LOW(ETH_PKT)
   \   000000E2   ....               LDI     R31, (ETH_PKT) >> 8
   \   000000E4   8D04               LDD     R16, Z+28
   \   000000E6   8D15               LDD     R17, Z+29
   \   000000E8   8D26               LDD     R18, Z+30
   \   000000EA   8D37               LDD     R19, Z+31
   \   000000EC   A306               STD     Z+38, R16
   \   000000EE   A317               STD     Z+39, R17
   \   000000F0   A720               STD     Z+40, R18
   \   000000F2   A731               STD     Z+41, R19
   \   000000F4   967C               ADIW    R31:R30, 28
   \   000000F6   ....               LDI     R26, LOW((ETH_PKT + 38))
   \   000000F8   ....               LDI     R27, HIGH((ETH_PKT + 38))
   \   000000FA   ....               RCALL   MACcpy
   \   000000FC   ....               LDI     R30, LOW((IP + 21))
   \   000000FE   ....               LDI     R31, HIGH((IP + 21))
   \   00000100   ....               LDI     R26, LOW((ETH_PKT + 28))
   \   00000102   ....               LDI     R27, HIGH((ETH_PKT + 28))
   \   00000104   ....               RCALL   MACcpy
   \   00000106   ....               LDI     R30, LOW((ETH_PKT + 12))
   \   00000108   ....               LDI     R31, HIGH((ETH_PKT + 12))
   \   0000010A   ....               LDI     R26, LOW((ETH_PKT + 6))
   \   0000010C   ....               LDI     R27, HIGH((ETH_PKT + 6))
   \   0000010E   ....               RCALL   MACcpy
   \   00000110   ....               LDI     R30, LOW((IP + 21))
   \   00000112   ....               LDI     R31, HIGH((IP + 21))
   \   00000114   ....               LDI     R26, LOW((ETH_PKT + 12))
   \   00000116   ....               LDI     R27, HIGH((ETH_PKT + 12))
   \   00000118   ....               RCALL   MACcpy
   \   0000011A   E000               LDI     R16, 0
   \   0000011C   E012               LDI     R17, 2
   \   0000011E   ....               LDI     R30, LOW(ETH_PKT)
   \   00000120   ....               LDI     R31, (ETH_PKT) >> 8
   \   00000122   8B04               STD     Z+20, R16
   \   00000124   8B15               STD     Z+21, R17
   \   00000126   ....               LDI     R30, LOW(IP)
   \   00000128   ....               LDI     R31, (IP) >> 8
   \   0000012A   8100               LD      R16, Z
   \   0000012C   8111               LDD     R17, Z+1
   \   0000012E   8122               LDD     R18, Z+2
   \   00000130   8133               LDD     R19, Z+3
   \   00000132   ....               LDI     R30, LOW(ETH_PKT)
   \   00000134   ....               LDI     R31, (ETH_PKT) >> 8
   \   00000136   8F04               STD     Z+28, R16
   \   00000138   8F15               STD     Z+29, R17
   \   0000013A   8F26               STD     Z+30, R18
   \   0000013C   8F37               STD     Z+31, R19
   \   0000013E   C31B               RJMP    ??INT_ETH_PROCESS_PKT2_12
   \                     ??INT_ETH_PROCESS_PKT2_11:
   \   00000140   01F2               MOVW    R31:R30, R5:R4
   \   00000142   A106               LDD     R16, Z+38
   \   00000144   A117               LDD     R17, Z+39
   \   00000146   A520               LDD     R18, Z+40
   \   00000148   A531               LDD     R19, Z+41
   \   0000014A   ....               LDI     R30, LOW(IP)
   \   0000014C   ....               LDI     R31, (IP) >> 8
   \   0000014E   8140               LD      R20, Z
   \   00000150   8151               LDD     R21, Z+1
   \   00000152   8162               LDD     R22, Z+2
   \   00000154   8173               LDD     R23, Z+3
   \   00000156   1704               CP      R16, R20
   \   00000158   0715               CPC     R17, R21
   \   0000015A   0726               CPC     R18, R22
   \   0000015C   0737               CPC     R19, R23
   \   0000015E   F009               BREQ    $+2+2
   \   00000160   C1E5               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   00000162   ....               LDI     R30, LOW((IP + 15))
   \   00000164   ....               LDI     R31, HIGH((IP + 15))
   \   00000166   01D2               MOVW    R27:R26, R5:R4
   \   00000168   ....               RCALL   MACcmp
   \   0000016A   2300               TST     R16
   \   0000016C   F009               BREQ    $+2+2
   \   0000016E   C1DE               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   00000170   01F2               MOVW    R31:R30, R5:R4
   \   00000172   967C               ADIW    R31:R30, 28
   \   00000174   E00C               LDI     R16, 12
   \   00000176   0E40               ADD     R4, R16
   \   00000178   E000               LDI     R16, 0
   \   0000017A   1E50               ADC     R5, R16
   \   0000017C   01D2               MOVW    R27:R26, R5:R4
   \   0000017E   ....               RCALL   MACcpy
   \   00000180   9180....           LDS     R24, (IP + 10)
   \   00000184   9190....           LDS     R25, (IP + 11)
   \   00000188   C002               RJMP    ??INT_ETH_PROCESS_PKT2_13
   \                     ??INT_ETH_PROCESS_PKT2_14:
   \   0000018A   8180               LD      R24, Z
   \   0000018C   8191               LDD     R25, Z+1
   \                     ??INT_ETH_PROCESS_PKT2_13:
   \   0000018E   2F08               MOV     R16, R24
   \   00000190   2B09               OR      R16, R25
   \   00000192   F409               BRNE    $+2+2
   \   00000194   C1CB               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   00000196   01FC               MOVW    R31:R30, R25:R24
   \   00000198   8D03               LDD     R16, Z+27
   \   0000019A   3003               CPI     R16, 3
   \   0000019C   F7B1               BRNE    ??INT_ETH_PROCESS_PKT2_14
   \   0000019E   ....               LDI     R30, LOW(ETH_PKT)
   \   000001A0   ....               LDI     R31, (ETH_PKT) >> 8
   \   000001A2   8D04               LDD     R16, Z+28
   \   000001A4   8D15               LDD     R17, Z+29
   \   000001A6   8D26               LDD     R18, Z+30
   \   000001A8   8D37               LDD     R19, Z+31
   \   000001AA   01FC               MOVW    R31:R30, R25:R24
   \   000001AC   8947               LDD     R20, Z+23
   \   000001AE   8D50               LDD     R21, Z+24
   \   000001B0   8D61               LDD     R22, Z+25
   \   000001B2   8D72               LDD     R23, Z+26
   \   000001B4   1704               CP      R16, R20
   \   000001B6   0715               CPC     R17, R21
   \   000001B8   0726               CPC     R18, R22
   \   000001BA   0737               CPC     R19, R23
   \   000001BC   F731               BRNE    ??INT_ETH_PROCESS_PKT2_14
   \   000001BE   E004               LDI     R16, 4
   \   000001C0   8F03               STD     Z+27, R16
   \   000001C2   E000               LDI     R16, 0
   \   000001C4   8B07               STD     Z+23, R16
   \   000001C6   8F00               STD     Z+24, R16
   \   000001C8   8F01               STD     Z+25, R16
   \   000001CA   8F02               STD     Z+26, R16
   \   000001CC   ....               LDI     R16, LOW(ETH_PKT)
   \   000001CE   2E40               MOV     R4, R16
   \   000001D0   ....               LDI     R16, (ETH_PKT) >> 8
   \   000001D2   2E50               MOV     R5, R16
   \   000001D4   2C64               MOV     R6, R4
   \   000001D6   2E70               MOV     R7, R16
   \   000001D8   8503               LDD     R16, Z+11
   \   000001DA   8514               LDD     R17, Z+12
   \   000001DC   8525               LDD     R18, Z+13
   \   000001DE   8536               LDD     R19, Z+14
   \   000001E0   01F2               MOVW    R31:R30, R5:R4
   \   000001E2   8F06               STD     Z+30, R16
   \   000001E4   8F17               STD     Z+31, R17
   \   000001E6   A320               STD     Z+32, R18
   \   000001E8   A331               STD     Z+33, R19
   \   000001EA   E00C               LDI     R16, 12
   \   000001EC   0E40               ADD     R4, R16
   \   000001EE   E000               LDI     R16, 0
   \   000001F0   1E50               ADC     R5, R16
   \   000001F2   01F2               MOVW    R31:R30, R5:R4
   \   000001F4   01DC               MOVW    R27:R26, R25:R24
   \   000001F6   961B               ADIW    R27:R26, 11
   \   000001F8   ....               RCALL   MACcpy
   \   000001FA   014C               MOVW    R9:R8, R25:R24
   \   000001FC   E00F               LDI     R16, 15
   \   000001FE   0E80               ADD     R8, R16
   \   00000200   E000               LDI     R16, 0
   \   00000202   1E90               ADC     R9, R16
   \   00000204   24AA               CLR     R10
   \   00000206   24BB               CLR     R11
   \   00000208   C215               RJMP    ??INT_ETH_PROCESS_PKT2_15
   \                     ??INT_ETH_PROCESS_PKT2_8:
   \   0000020A   8D06               LDD     R16, Z+30
   \   0000020C   8D17               LDD     R17, Z+31
   \   0000020E   A120               LDD     R18, Z+32
   \   00000210   A131               LDD     R19, Z+33
   \   00000212   ....               LDI     R30, LOW(IP)
   \   00000214   ....               LDI     R31, (IP) >> 8
   \   00000216   8140               LD      R20, Z
   \   00000218   8151               LDD     R21, Z+1
   \   0000021A   8162               LDD     R22, Z+2
   \   0000021C   8173               LDD     R23, Z+3
   \   0000021E   1704               CP      R16, R20
   \   00000220   0715               CPC     R17, R21
   \   00000222   0726               CPC     R18, R22
   \   00000224   0737               CPC     R19, R23
   \   00000226   F009               BREQ    $+2+2
   \   00000228   C181               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   0000022A   ....               LDI     R30, LOW((IP + 15))
   \   0000022C   ....               LDI     R31, HIGH((IP + 15))
   \   0000022E   01D2               MOVW    R27:R26, R5:R4
   \   00000230   ....               RCALL   MACcmp
   \   00000232   2300               TST     R16
   \   00000234   F009               BREQ    $+2+2
   \   00000236   C17A               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   00000238   01F5               MOVW    R31:R30, R11:R10
   \   0000023A   90B0....           LDS     R11, (ETH_PKT + 16)
   \   0000023E   90A0....           LDS     R10, (ETH_PKT + 17)
   \   00000242   973E               SBIW    R31:R30, 14
   \   00000244   9100....           LDS     R16, (ETH_PKT + 14)
   \   00000248   7F00               ANDI    R16, 0xF0
   \   0000024A   3400               CPI     R16, 64
   \   0000024C   F009               BREQ    $+2+2
   \   0000024E   C16E               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   00000250   9100....           LDS     R16, (ETH_PKT + 14)
   \   00000254   700F               ANDI    R16, 0x0F
   \   00000256   0F00               LSL     R16
   \   00000258   0F00               LSL     R16
   \   0000025A   3209               CPI     R16, 41
   \   0000025C   F008               BRCS    $+2+2
   \   0000025E   C166               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   00000260   E010               LDI     R17, 0
   \   00000262   170E               CP      R16, R30
   \   00000264   071F               CPC     R17, R31
   \   00000266   F008               BRCS    $+2+2
   \   00000268   C161               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   0000026A   15EA               CP      R30, R10
   \   0000026C   05FB               CPC     R31, R11
   \   0000026E   F408               BRCC    $+2+2
   \   00000270   C15D               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   00000272   16A0               CP      R10, R16
   \   00000274   06B1               CPC     R11, R17
   \   00000276   F408               BRCC    $+2+2
   \   00000278   C159               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   0000027A   1AA0               SUB     R10, R16
   \   0000027C   0AB1               SBC     R11, R17
   \   0000027E   ....               LDI     R17, LOW((ETH_PKT + 14))
   \   00000280   2E61               MOV     R6, R17
   \   00000282   ....               LDI     R17, HIGH((ETH_PKT + 14))
   \   00000284   2E71               MOV     R7, R17
   \   00000286   E010               LDI     R17, 0
   \   00000288   0E60               ADD     R6, R16
   \   0000028A   1E71               ADC     R7, R17
   \   0000028C   9100....           LDS     R16, BufferPKT
   \   00000290   2300               TST     R16
   \   00000292   F441               BRNE    ??INT_ETH_PROCESS_PKT2_16
   \   00000294   9100....           LDS     R16, (ETH_PKT + 20)
   \   00000298   9110....           LDS     R17, (ETH_PKT + 21)
   \   0000029C   730F               ANDI    R16, 0x3F
   \   0000029E   2B01               OR      R16, R17
   \   000002A0   F009               BREQ    $+2+2
   \   000002A2   C144               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \                     ??INT_ETH_PROCESS_PKT2_16:
   \   000002A4   9100....           LDS     R16, BufferPKT
   \   000002A8   2300               TST     R16
   \   000002AA   F441               BRNE    ??INT_ETH_PROCESS_PKT2_17
   \   000002AC   E104               LDI     R16, 20
   \   000002AE   E010               LDI     R17, 0
   \   000002B0   ....               LDI     R26, LOW((ETH_PKT + 14))
   \   000002B2   ....               LDI     R27, HIGH((ETH_PKT + 14))
   \   000002B4   ....               RCALL   IPChecksum
   \   000002B6   2B01               OR      R16, R17
   \   000002B8   F009               BREQ    $+2+2
   \   000002BA   C138               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \                     ??INT_ETH_PROCESS_PKT2_17:
   \   000002BC   9100....           LDS     R16, (ETH_PKT + 23)
   \   000002C0   950A               DEC     R16
   \   000002C2   F019               BREQ    ??INT_ETH_PROCESS_PKT2_18
   \   000002C4   5005               SUBI    R16, 5
   \   000002C6   F1A9               BREQ    ??INT_ETH_PROCESS_PKT2_19
   \   000002C8   C131               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \                     ??INT_ETH_PROCESS_PKT2_18:
   \   000002CA   E008               LDI     R16, 8
   \   000002CC   16A0               CP      R10, R16
   \   000002CE   E000               LDI     R16, 0
   \   000002D0   06B0               CPC     R11, R16
   \   000002D2   F408               BRCC    $+2+2
   \   000002D4   C12B               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   000002D6   0185               MOVW    R17:R16, R11:R10
   \   000002D8   01D3               MOVW    R27:R26, R7:R6
   \   000002DA   ....               RCALL   IPChecksum
   \   000002DC   2B01               OR      R16, R17
   \   000002DE   F009               BREQ    $+2+2
   \   000002E0   C125               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   000002E2   01F3               MOVW    R31:R30, R7:R6
   \   000002E4   8101               LDD     R16, Z+1
   \   000002E6   2300               TST     R16
   \   000002E8   F009               BREQ    $+2+2
   \   000002EA   C120               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   000002EC   8100               LD      R16, Z
   \   000002EE   3008               CPI     R16, 8
   \   000002F0   F009               BREQ    $+2+2
   \   000002F2   C11C               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   000002F4   ....               LDI     R30, LOW(ETH_PKT)
   \   000002F6   ....               LDI     R31, (ETH_PKT) >> 8
   \   000002F8   8D02               LDD     R16, Z+26
   \   000002FA   8D13               LDD     R17, Z+27
   \   000002FC   8D24               LDD     R18, Z+28
   \   000002FE   8D35               LDD     R19, Z+29
   \   00000300   8F06               STD     Z+30, R16
   \   00000302   8F17               STD     Z+31, R17
   \   00000304   A320               STD     Z+32, R18
   \   00000306   A331               STD     Z+33, R19
   \   00000308   0185               MOVW    R17:R16, R11:R10
   \   0000030A   01F3               MOVW    R31:R30, R7:R6
   \   0000030C   ....               LDI     R26, LOW((ETH_PKT + 34))
   \   0000030E   ....               LDI     R27, HIGH((ETH_PKT + 34))
   \   00000310   ....               RCALL   _netw_memcpy
   \   00000312   E000               LDI     R16, 0
   \   00000314   9300....           STS     (ETH_PKT + 34), R16
   \   00000318   ....               LDI     R30, LOW(ETH_PKT)
   \   0000031A   ....               LDI     R31, (ETH_PKT) >> 8
   \   0000031C   A304               STD     Z+36, R16
   \   0000031E   A305               STD     Z+37, R16
   \   00000320   0185               MOVW    R17:R16, R11:R10
   \   00000322   ....               LDI     R26, LOW((ETH_PKT + 34))
   \   00000324   ....               LDI     R27, HIGH((ETH_PKT + 34))
   \   00000326   ....               RCALL   IPChecksum
   \   00000328   ....               LDI     R30, LOW(ETH_PKT)
   \   0000032A   ....               LDI     R31, (ETH_PKT) >> 8
   \   0000032C   A304               STD     Z+36, R16
   \   0000032E   A315               STD     Z+37, R17
   \   00000330   C1DC               RJMP    ??INT_ETH_PROCESS_PKT2_20
   \                     ??INT_ETH_PROCESS_PKT2_19:
   \   00000332   E104               LDI     R16, 20
   \   00000334   16A0               CP      R10, R16
   \   00000336   E000               LDI     R16, 0
   \   00000338   06B0               CPC     R11, R16
   \   0000033A   F408               BRCC    $+2+2
   \   0000033C   C0F7               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   0000033E   9100....           LDS     R16, BufferPKT
   \   00000342   2300               TST     R16
   \   00000344   F491               BRNE    ??INT_ETH_PROCESS_PKT2_21
   \   00000346   01F2               MOVW    R31:R30, R5:R4
   \   00000348   8EB0               STD     Z+24, R11
   \   0000034A   8EA1               STD     Z+25, R10
   \   0000034C   0185               MOVW    R17:R16, R11:R10
   \   0000034E   01D3               MOVW    R27:R26, R7:R6
   \   00000350   ....               RCALL   IPChecksum
   \   00000352   9500               COM     R16
   \   00000354   9510               COM     R17
   \   00000356   01F2               MOVW    R31:R30, R5:R4
   \   00000358   8B04               STD     Z+20, R16
   \   0000035A   8B15               STD     Z+21, R17
   \   0000035C   01F3               MOVW    R31:R30, R7:R6
   \   0000035E   8504               LDD     R16, Z+12
   \   00000360   7F00               ANDI    R16, 0xF0
   \   00000362   9506               LSR     R16
   \   00000364   9506               LSR     R16
   \   00000366   8704               STD     Z+12, R16
   \   00000368   C002               RJMP    ??INT_ETH_PROCESS_PKT2_22
   \                     ??INT_ETH_PROCESS_PKT2_21:
   \   0000036A   01F3               MOVW    R31:R30, R7:R6
   \   0000036C   8504               LDD     R16, Z+12
   \                     ??INT_ETH_PROCESS_PKT2_22:
   \   0000036E   3104               CPI     R16, 20
   \   00000370   F408               BRCC    $+2+2
   \   00000372   C0DC               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   00000374   330D               CPI     R16, 61
   \   00000376   F008               BRCS    $+2+2
   \   00000378   C0D9               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   0000037A   E010               LDI     R17, 0
   \   0000037C   16A0               CP      R10, R16
   \   0000037E   06B1               CPC     R11, R17
   \   00000380   F408               BRCC    $+2+2
   \   00000382   C0D4               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   00000384   1AA0               SUB     R10, R16
   \   00000386   0AB1               SBC     R11, R17
   \   00000388   9310....           STS     (ETH_PKT + 22), R17
   \   0000038C   9100....           LDS     R16, BufferPKT
   \   00000390   2300               TST     R16
   \   00000392   F439               BRNE    ??INT_ETH_PROCESS_PKT2_23
   \   00000394   E00E               LDI     R16, 14
   \   00000396   ....               LDI     R26, LOW((ETH_PKT + 20))
   \   00000398   ....               LDI     R27, HIGH((ETH_PKT + 20))
   \   0000039A   ....               RCALL   IPChecksum
   \   0000039C   2B01               OR      R16, R17
   \   0000039E   F009               BREQ    $+2+2
   \   000003A0   C0C5               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \                     ??INT_ETH_PROCESS_PKT2_23:
   \   000003A2   9180....           LDS     R24, (IP + 10)
   \   000003A6   9190....           LDS     R25, (IP + 11)
   \   000003AA   C003               RJMP    ??INT_ETH_PROCESS_PKT2_24
   \                     ??INT_ETH_PROCESS_PKT2_25:
   \   000003AC   01FC               MOVW    R31:R30, R25:R24
   \   000003AE   8180               LD      R24, Z
   \   000003B0   8191               LDD     R25, Z+1
   \                     ??INT_ETH_PROCESS_PKT2_24:
   \   000003B2   2F08               MOV     R16, R24
   \   000003B4   2B09               OR      R16, R25
   \   000003B6   F409               BRNE    $+2+2
   \   000003B8   C3F8               RJMP    ??INT_ETH_PROCESS_PKT2_26
   \   000003BA   01FC               MOVW    R31:R30, R25:R24
   \   000003BC   8507               LDD     R16, Z+15
   \   000003BE   8910               LDD     R17, Z+16
   \   000003C0   01F3               MOVW    R31:R30, R7:R6
   \   000003C2   8122               LDD     R18, Z+2
   \   000003C4   8133               LDD     R19, Z+3
   \   000003C6   1702               CP      R16, R18
   \   000003C8   0713               CPC     R17, R19
   \   000003CA   F781               BRNE    ??INT_ETH_PROCESS_PKT2_25
   \   000003CC   01FC               MOVW    R31:R30, R25:R24
   \   000003CE   8D03               LDD     R16, Z+27
   \   000003D0   3001               CPI     R16, 1
   \   000003D2   F581               BRNE    ??INT_ETH_PROCESS_PKT2_27
   \   000003D4   01F3               MOVW    R31:R30, R7:R6
   \   000003D6   8505               LDD     R16, Z+13
   \   000003D8   7107               ANDI    R16, 0x17
   \   000003DA   3002               CPI     R16, 2
   \   000003DC   F009               BREQ    $+2+2
   \   000003DE   C3E5               RJMP    ??INT_ETH_PROCESS_PKT2_26
   \   000003E0   01F2               MOVW    R31:R30, R5:R4
   \   000003E2   8D02               LDD     R16, Z+26
   \   000003E4   8D13               LDD     R17, Z+27
   \   000003E6   8D24               LDD     R18, Z+28
   \   000003E8   8D35               LDD     R19, Z+29
   \   000003EA   01FC               MOVW    R31:R30, R25:R24
   \   000003EC   8703               STD     Z+11, R16
   \   000003EE   8714               STD     Z+12, R17
   \   000003F0   8725               STD     Z+13, R18
   \   000003F2   8736               STD     Z+14, R19
   \   000003F4   01F3               MOVW    R31:R30, R7:R6
   \   000003F6   8100               LD      R16, Z
   \   000003F8   8111               LDD     R17, Z+1
   \   000003FA   01FC               MOVW    R31:R30, R25:R24
   \   000003FC   8B01               STD     Z+17, R16
   \   000003FE   8B12               STD     Z+18, R17
   \   00000400   E00C               LDI     R16, 12
   \   00000402   0E40               ADD     R4, R16
   \   00000404   E000               LDI     R16, 0
   \   00000406   1E50               ADC     R5, R16
   \   00000408   01F2               MOVW    R31:R30, R5:R4
   \   0000040A   01DC               MOVW    R27:R26, R25:R24
   \   0000040C   961B               ADIW    R27:R26, 11
   \   0000040E   ....               RCALL   MACcpy
   \                     ??INT_ETH_PROCESS_PKT2_28:
   \   00000410   01F3               MOVW    R31:R30, R7:R6
   \   00000412   8505               LDD     R16, Z+13
   \   00000414   FF02               SBRS    R16, 2
   \   00000416   C0AE               RJMP    ??INT_ETH_PROCESS_PKT2_29
   \   00000418   01FC               MOVW    R31:R30, R25:R24
   \   0000041A   8D03               LDD     R16, Z+27
   \   0000041C   950A               DEC     R16
   \   0000041E   F409               BRNE    $+2+2
   \   00000420   C085               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   00000422   5003               SUBI    R16, 3
   \   00000424   01D3               MOVW    R27:R26, R7:R6
   \   00000426   F409               BRNE    $+2+2
   \   00000428   C098               RJMP    ??INT_ETH_PROCESS_PKT2_30
   \   0000042A   ....               RCALL   cmp_S_A
   \   0000042C   2B01               OR      R16, R17
   \   0000042E   F009               BREQ    $+2+2
   \   00000430   C07D               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   00000432   C097               RJMP    ??INT_ETH_PROCESS_PKT2_31
   \                     ??INT_ETH_PROCESS_PKT2_27:
   \   00000434   8901               LDD     R16, Z+17
   \   00000436   8912               LDD     R17, Z+18
   \   00000438   01F3               MOVW    R31:R30, R7:R6
   \   0000043A   8120               LD      R18, Z
   \   0000043C   8131               LDD     R19, Z+1
   \   0000043E   1702               CP      R16, R18
   \   00000440   0713               CPC     R17, R19
   \   00000442   F479               BRNE    ??INT_ETH_PROCESS_PKT2_32
   \   00000444   01FC               MOVW    R31:R30, R25:R24
   \   00000446   8503               LDD     R16, Z+11
   \   00000448   8514               LDD     R17, Z+12
   \   0000044A   8525               LDD     R18, Z+13
   \   0000044C   8536               LDD     R19, Z+14
   \   0000044E   01F2               MOVW    R31:R30, R5:R4
   \   00000450   8D42               LDD     R20, Z+26
   \   00000452   8D53               LDD     R21, Z+27
   \   00000454   8D64               LDD     R22, Z+28
   \   00000456   8D75               LDD     R23, Z+29
   \   00000458   1704               CP      R16, R20
   \   0000045A   0715               CPC     R17, R21
   \   0000045C   0726               CPC     R18, R22
   \   0000045E   0737               CPC     R19, R23
   \   00000460   F2B9               BREQ    ??INT_ETH_PROCESS_PKT2_28
   \                     ??INT_ETH_PROCESS_PKT2_32:
   \   00000462   01F3               MOVW    R31:R30, R7:R6
   \   00000464   8505               LDD     R16, Z+13
   \   00000466   7107               ANDI    R16, 0x17
   \   00000468   3002               CPI     R16, 2
   \   0000046A   F009               BREQ    $+2+2
   \   0000046C   CF9F               RJMP    ??INT_ETH_PROCESS_PKT2_25
   \   0000046E   01FC               MOVW    R31:R30, R25:R24
   \   00000470   8D03               LDD     R16, Z+27
   \   00000472   2300               TST     R16
   \   00000474   F409               BRNE    $+2+2
   \   00000476   CF9A               RJMP    ??INT_ETH_PROCESS_PKT2_25
   \   00000478   01D3               MOVW    R27:R26, R7:R6
   \   0000047A   9618               ADIW    R27:R26, 8
   \   0000047C   E010               LDI     R17, 0
   \   0000047E   E00B               LDI     R16, 11
   \   00000480   ....               RCALL   CallTCPhook
   \   00000482   2FA0               MOV     R26, R16
   \   00000484   01F3               MOVW    R31:R30, R7:R6
   \   00000486   8480               LDD     R8, Z+8
   \   00000488   8491               LDD     R9, Z+9
   \   0000048A   2300               TST     R16
   \   0000048C   F0F1               BREQ    ??INT_ETH_PROCESS_PKT2_33
   \                     ??INT_ETH_PROCESS_PKT2_34:
   \   0000048E   01F4               MOVW    R31:R30, R9:R8
   \   00000490   8500               LDD     R16, Z+8
   \   00000492   8511               LDD     R17, Z+9
   \   00000494   01F3               MOVW    R31:R30, R7:R6
   \   00000496   8120               LD      R18, Z
   \   00000498   8131               LDD     R19, Z+1
   \   0000049A   1702               CP      R16, R18
   \   0000049C   0713               CPC     R17, R19
   \   0000049E   F479               BRNE    ??INT_ETH_PROCESS_PKT2_35
   \   000004A0   01F4               MOVW    R31:R30, R9:R8
   \   000004A2   8542               LDD     R20, Z+10
   \   000004A4   8553               LDD     R21, Z+11
   \   000004A6   8564               LDD     R22, Z+12
   \   000004A8   8575               LDD     R23, Z+13
   \   000004AA   01F2               MOVW    R31:R30, R5:R4
   \   000004AC   8D02               LDD     R16, Z+26
   \   000004AE   8D13               LDD     R17, Z+27
   \   000004B0   8D24               LDD     R18, Z+28
   \   000004B2   8D35               LDD     R19, Z+29
   \   000004B4   1740               CP      R20, R16
   \   000004B6   0751               CPC     R21, R17
   \   000004B8   0762               CPC     R22, R18
   \   000004BA   0773               CPC     R23, R19
   \   000004BC   F1B9               BREQ    ??INT_ETH_PROCESS_PKT2_9
   \                     ??INT_ETH_PROCESS_PKT2_35:
   \   000004BE   E102               LDI     R16, 18
   \   000004C0   0E80               ADD     R8, R16
   \   000004C2   E000               LDI     R16, 0
   \   000004C4   1E90               ADC     R9, R16
   \   000004C6   95AA               DEC     R26
   \   000004C8   F711               BRNE    ??INT_ETH_PROCESS_PKT2_34
   \                     ??INT_ETH_PROCESS_PKT2_33:
   \   000004CA   01FC               MOVW    R31:R30, R25:R24
   \   000004CC   01D3               MOVW    R27:R26, R7:R6
   \   000004CE   9618               ADIW    R27:R26, 8
   \   000004D0   E010               LDI     R17, 0
   \   000004D2   E00A               LDI     R16, 10
   \   000004D4   ....               RCALL   CallTCPhook
   \   000004D6   2300               TST     R16
   \   000004D8   F409               BRNE    $+2+2
   \   000004DA   CF68               RJMP    ??INT_ETH_PROCESS_PKT2_25
   \   000004DC   01F3               MOVW    R31:R30, R7:R6
   \   000004DE   8480               LDD     R8, Z+8
   \   000004E0   8491               LDD     R9, Z+9
   \   000004E2   ....               LDI     R30, LOW((ETH_PKT + 12))
   \   000004E4   ....               LDI     R31, HIGH((ETH_PKT + 12))
   \   000004E6   01D4               MOVW    R27:R26, R9:R8
   \   000004E8   9616               ADIW    R27:R26, 6
   \   000004EA   ....               RCALL   MACcpy
   \   000004EC   01F3               MOVW    R31:R30, R7:R6
   \   000004EE   ....               RCALL   ExtractMSS
   \   000004F0   01F4               MOVW    R31:R30, R9:R8
   \   000004F2   8306               STD     Z+6, R16
   \   000004F4   8317               STD     Z+7, R17
   \   000004F6   01F3               MOVW    R31:R30, R7:R6
   \   000004F8   8100               LD      R16, Z
   \   000004FA   8111               LDD     R17, Z+1
   \   000004FC   01F4               MOVW    R31:R30, R9:R8
   \   000004FE   8700               STD     Z+8, R16
   \   00000500   8711               STD     Z+9, R17
   \   00000502   ....               LDI     R30, LOW(ETH_PKT)
   \   00000504   ....               LDI     R31, (ETH_PKT) >> 8
   \   00000506   8D02               LDD     R16, Z+26
   \   00000508   8D13               LDD     R17, Z+27
   \   0000050A   8D24               LDD     R18, Z+28
   \   0000050C   8D35               LDD     R19, Z+29
   \   0000050E   01F4               MOVW    R31:R30, R9:R8
   \   00000510   8702               STD     Z+10, R16
   \   00000512   8713               STD     Z+11, R17
   \   00000514   8724               STD     Z+12, R18
   \   00000516   8735               STD     Z+13, R19
   \   00000518   01F3               MOVW    R31:R30, R7:R6
   \   0000051A   8104               LDD     R16, Z+4
   \   0000051C   8115               LDD     R17, Z+5
   \   0000051E   8126               LDD     R18, Z+6
   \   00000520   8137               LDD     R19, Z+7
   \   00000522   01F4               MOVW    R31:R30, R9:R8
   \   00000524   8706               STD     Z+14, R16
   \   00000526   8717               STD     Z+15, R17
   \   00000528   8B20               STD     Z+16, R18
   \   0000052A   8B31               STD     Z+17, R19
   \                     ??INT_ETH_PROCESS_PKT2_9:
   \   0000052C   E000               LDI     R16, 0
   \   0000052E   9300....           STS     (IP + 14), R16
   \   00000532   ........           CALL    ETH_STOP_BACK_PRESSURE
   \                     ??INT_ETH_PROCESS_PKT2_0:
   \   00000536   9100....           LDS     R16, (IP + 14)
   \   0000053A   3002               CPI     R16, 2
   \   0000053C   F408               BRCC    $+2+2
   \   0000053E   CD71               RJMP    ??INT_ETH_PROCESS_PKT2_4
   \                     ??INT_ETH_PROCESS_PKT2_36:
   \   00000540   9120....           LDS     R18, (IP + 8)
   \   00000544   9130....           LDS     R19, (IP + 9)
   \   00000548   ....               LDI     R16, LOW(ETH_PKT)
   \   0000054A   ....               LDI     R17, (ETH_PKT) >> 8
   \   0000054C   ........           CALL    enc28j60PacketSend
   \   00000550   2300               TST     R16
   \   00000552   F009               BREQ    $+2+2
   \   00000554   CD62               RJMP    ??INT_ETH_PROCESS_PKT2_1
   \   00000556   E000               LDI     R16, 0
   \   00000558   CD61               RJMP    ??INT_ETH_PROCESS_PKT2_2
   \                     ??INT_ETH_PROCESS_PKT2_30:
   \   0000055A   ....               RCALL   cmp_A_S
   \   0000055C   3001               CPI     R16, 1
   \   0000055E   4010               SBCI    R17, 0
   \   00000560   F729               BRNE    ??INT_ETH_PROCESS_PKT2_9
   \                     ??INT_ETH_PROCESS_PKT2_31:
   \   00000562   01DC               MOVW    R27:R26, R25:R24
   \   00000564   E004               LDI     R16, 4
   \   00000566   ....               RCALL   ClosingTCP
   \   00000568   2300               TST     R16
   \   0000056A   F301               BREQ    ??INT_ETH_PROCESS_PKT2_9
   \   0000056C   E008               LDI     R16, 8
   \   0000056E   01FC               MOVW    R31:R30, R25:R24
   \   00000570   8F03               STD     Z+27, R16
   \   00000572   CFDC               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \                     ??INT_ETH_PROCESS_PKT2_29:
   \   00000574   FF01               SBRS    R16, 1
   \   00000576   C109               RJMP    ??INT_ETH_PROCESS_PKT2_37
   \   00000578   01FC               MOVW    R31:R30, R25:R24
   \   0000057A   8D03               LDD     R16, Z+27
   \   0000057C   950A               DEC     R16
   \   0000057E   F199               BREQ    ??INT_ETH_PROCESS_PKT2_38
   \   00000580   5003               SUBI    R16, 3
   \   00000582   01D3               MOVW    R27:R26, R7:R6
   \   00000584   F099               BREQ    ??INT_ETH_PROCESS_PKT2_39
   \   00000586   ....               RCALL   cmp_S_A
   \   00000588   2B01               OR      R16, R17
   \   0000058A   F681               BRNE    ??INT_ETH_PROCESS_PKT2_9
   \   0000058C   01FC               MOVW    R31:R30, R25:R24
   \   0000058E   8D35               LDD     R19, Z+29
   \   00000590   8D26               LDD     R18, Z+30
   \   00000592   152A               CP      R18, R10
   \   00000594   053B               CPC     R19, R11
   \   00000596   F250               BRCS    ??INT_ETH_PROCESS_PKT2_9
   \   00000598   01DC               MOVW    R27:R26, R25:R24
   \   0000059A   E004               LDI     R16, 4
   \   0000059C   ....               RCALL   ClosingTCP
   \   0000059E   2300               TST     R16
   \   000005A0   F409               BRNE    $+2+2
   \   000005A2   C303               RJMP    ??INT_ETH_PROCESS_PKT2_26
   \   000005A4   E008               LDI     R16, 8
   \   000005A6   01FC               MOVW    R31:R30, R25:R24
   \   000005A8   8F03               STD     Z+27, R16
   \   000005AA   C2FF               RJMP    ??INT_ETH_PROCESS_PKT2_26
   \                     ??INT_ETH_PROCESS_PKT2_39:
   \   000005AC   ....               RCALL   cmp_A_S
   \   000005AE   3001               CPI     R16, 1
   \   000005B0   4010               SBCI    R17, 0
   \   000005B2   F009               BREQ    $+2+2
   \   000005B4   CFBB               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   000005B6   01AC               MOVW    R21:R20, R25:R24
   \   000005B8   5E49               SUBI    R20, 233
   \   000005BA   4F5F               SBCI    R21, 255
   \   000005BC   01F3               MOVW    R31:R30, R7:R6
   \   000005BE   8104               LDD     R16, Z+4
   \   000005C0   8115               LDD     R17, Z+5
   \   000005C2   8126               LDD     R18, Z+6
   \   000005C4   8137               LDD     R19, Z+7
   \   000005C6   01FA               MOVW    R31:R30, R21:R20
   \   000005C8   8300               ST      Z, R16
   \   000005CA   8311               STD     Z+1, R17
   \   000005CC   8322               STD     Z+2, R18
   \   000005CE   8333               STD     Z+3, R19
   \   000005D0   E001               LDI     R16, 1
   \   000005D2   ....               RCALL   inc32
   \   000005D4   01F3               MOVW    R31:R30, R7:R6
   \   000005D6   ....               RCALL   ExtractMSS
   \   000005D8   01FC               MOVW    R31:R30, R25:R24
   \   000005DA   A301               STD     Z+33, R16
   \   000005DC   A312               STD     Z+34, R17
   \   000005DE   01DC               MOVW    R27:R26, R25:R24
   \   000005E0   E001               LDI     R16, 1
   \   000005E2   ....               RCALL   CallTCPhook_null
   \   000005E4   C20F               RJMP    ??INT_ETH_PROCESS_PKT2_40
   \                     ??INT_ETH_PROCESS_PKT2_38:
   \   000005E6   01F3               MOVW    R31:R30, R7:R6
   \   000005E8   8505               LDD     R16, Z+13
   \   000005EA   FD04               SBRC    R16, 4
   \   000005EC   C2DE               RJMP    ??INT_ETH_PROCESS_PKT2_26
   \   000005EE   01DC               MOVW    R27:R26, R25:R24
   \   000005F0   E001               LDI     R16, 1
   \   000005F2   ....               RCALL   CallTCPhook_null
   \   000005F4   01F3               MOVW    R31:R30, R7:R6
   \   000005F6   ....               RCALL   ExtractMSS
   \   000005F8   0198               MOVW    R19:R18, R17:R16
   \   000005FA   E004               LDI     R16, 4
   \   000005FC   0E60               ADD     R6, R16
   \   000005FE   E000               LDI     R16, 0
   \   00000600   1E70               ADC     R7, R16
   \   00000602   0183               MOVW    R17:R16, R7:R6
   \   00000604   01DC               MOVW    R27:R26, R25:R24
   \   00000606   ....               RCALL   set_state_SYN_RECEIVED
   \                     ??INT_ETH_PROCESS_PKT2_41:
   \   00000608   014C               MOVW    R9:R8, R25:R24
   \   0000060A   E00F               LDI     R16, 15
   \   0000060C   0E80               ADD     R8, R16
   \   0000060E   E000               LDI     R16, 0
   \   00000610   1E90               ADC     R9, R16
   \                     ??INT_ETH_PROCESS_PKT2_42:
   \   00000612   24AA               CLR     R10
   \   00000614   24BB               CLR     R11
   \   00000616   ....               LDI     R16, LOW(ETH_PKT)
   \   00000618   2E40               MOV     R4, R16
   \   0000061A   ....               LDI     R16, (ETH_PKT) >> 8
   \   0000061C   2C64               MOV     R6, R4
   \   0000061E   2E70               MOV     R7, R16
   \   00000620   ....               LDI     R30, LOW(ETH_PKT)
   \   00000622   ....               LDI     R31, (ETH_PKT) >> 8
   \   00000624   8D02               LDD     R16, Z+26
   \   00000626   8D13               LDD     R17, Z+27
   \   00000628   8D24               LDD     R18, Z+28
   \   0000062A   8D35               LDD     R19, Z+29
   \   0000062C   8F06               STD     Z+30, R16
   \   0000062E   8F17               STD     Z+31, R17
   \   00000630   A320               STD     Z+32, R18
   \   00000632   A331               STD     Z+33, R19
   \                     ??INT_ETH_PROCESS_PKT2_15:
   \   00000634   ....               LDI     R30, LOW(IP)
   \   00000636   ....               LDI     R31, (IP) >> 8
   \   00000638   8100               LD      R16, Z
   \   0000063A   8111               LDD     R17, Z+1
   \   0000063C   8122               LDD     R18, Z+2
   \   0000063E   8133               LDD     R19, Z+3
   \   00000640   01F3               MOVW    R31:R30, R7:R6
   \   00000642   8F02               STD     Z+26, R16
   \   00000644   8F13               STD     Z+27, R17
   \   00000646   8F24               STD     Z+28, R18
   \   00000648   8F35               STD     Z+29, R19
   \   0000064A   E000               LDI     R16, 0
   \   0000064C   8B06               STD     Z+22, R16
   \   0000064E   E006               LDI     R16, 6
   \   00000650   8B07               STD     Z+23, R16
   \   00000652   E010               LDI     R17, 0
   \   00000654   E100               LDI     R16, 16
   \   00000656   01F4               MOVW    R31:R30, R9:R8
   \   00000658   01D3               MOVW    R27:R26, R7:R6
   \   0000065A   9692               ADIW    R27:R26, 34
   \   0000065C   ....               RCALL   _netw_memcpy
   \   0000065E   E500               LDI     R16, 80
   \   00000660   01F3               MOVW    R31:R30, R7:R6
   \   00000662   A706               STD     Z+46, R16
   \   00000664   2F08               MOV     R16, R24
   \   00000666   2B09               OR      R16, R25
   \   00000668   F161               BREQ    ??INT_ETH_PROCESS_PKT2_43
   \   0000066A   01FC               MOVW    R31:R30, R25:R24
   \   0000066C   A105               LDD     R16, Z+37
   \   0000066E   A116               LDD     R17, Z+38
   \   00000670   A521               LDD     R18, Z+41
   \   00000672   3021               CPI     R18, 1
   \   00000674   F419               BRNE    ??INT_ETH_PROCESS_PKT2_44
   \   00000676   E000               LDI     R16, 0
   \   00000678   E010               LDI     R17, 0
   \   0000067A   A701               STD     Z+41, R16
   \                     ??INT_ETH_PROCESS_PKT2_44:
   \   0000067C   01F3               MOVW    R31:R30, R7:R6
   \   0000067E   96B6               ADIW    R31:R30, 38
   \   00000680   ....               RCALL   inc32i
   \   00000682   01FC               MOVW    R31:R30, R25:R24
   \   00000684   A105               LDD     R16, Z+37
   \   00000686   A116               LDD     R17, Z+38
   \   00000688   0D0A               ADD     R16, R10
   \   0000068A   1D1B               ADC     R17, R11
   \   0000068C   A305               STD     Z+37, R16
   \   0000068E   A316               STD     Z+38, R17
   \   00000690   A123               LDD     R18, Z+35
   \   00000692   A134               LDD     R19, Z+36
   \   00000694   1720               CP      R18, R16
   \   00000696   0731               CPC     R19, R17
   \   00000698   F410               BRCC    ??INT_ETH_PROCESS_PKT2_45
   \   0000069A   A303               STD     Z+35, R16
   \   0000069C   A314               STD     Z+36, R17
   \                     ??INT_ETH_PROCESS_PKT2_45:
   \   0000069E   01F3               MOVW    R31:R30, R7:R6
   \   000006A0   A507               LDD     R16, Z+47
   \   000006A2   FF01               SBRS    R16, 1
   \   000006A4   C00E               RJMP    ??INT_ETH_PROCESS_PKT2_43
   \   000006A6   E600               LDI     R16, 96
   \   000006A8   A706               STD     Z+46, R16
   \   000006AA   E002               LDI     R16, 2
   \   000006AC   AB06               STD     Z+54, R16
   \   000006AE   E004               LDI     R16, 4
   \   000006B0   AB07               STD     Z+55, R16
   \   000006B2   E005               LDI     R16, 5
   \   000006B4   AF00               STD     Z+56, R16
   \   000006B6   E400               LDI     R16, 64
   \   000006B8   AF01               STD     Z+57, R16
   \   000006BA   E004               LDI     R16, 4
   \   000006BC   0EA0               ADD     R10, R16
   \   000006BE   E000               LDI     R16, 0
   \   000006C0   1EB0               ADC     R11, R16
   \                     ??INT_ETH_PROCESS_PKT2_43:
   \   000006C2   E104               LDI     R16, 20
   \   000006C4   0EA0               ADD     R10, R16
   \   000006C6   E000               LDI     R16, 0
   \   000006C8   1EB0               ADC     R11, R16
   \   000006CA   8EB0               STD     Z+24, R11
   \   000006CC   8EA1               STD     Z+25, R10
   \   000006CE   AB04               STD     Z+52, R16
   \   000006D0   AB05               STD     Z+53, R16
   \   000006D2   AB02               STD     Z+50, R16
   \   000006D4   AB03               STD     Z+51, R16
   \   000006D6   0185               MOVW    R17:R16, R11:R10
   \   000006D8   5F04               SUBI    R16, 244
   \   000006DA   4F1F               SBCI    R17, 255
   \   000006DC   01D3               MOVW    R27:R26, R7:R6
   \   000006DE   9656               ADIW    R27:R26, 22
   \   000006E0   ....               RCALL   IPChecksum
   \   000006E2   01F3               MOVW    R31:R30, R7:R6
   \   000006E4   AB02               STD     Z+50, R16
   \   000006E6   AB13               STD     Z+51, R17
   \   000006E8   01C3               MOVW    R25:R24, R7:R6
   \                     ??INT_ETH_PROCESS_PKT2_20:
   \   000006EA   E104               LDI     R16, 20
   \   000006EC   0EA0               ADD     R10, R16
   \   000006EE   E000               LDI     R16, 0
   \   000006F0   1EB0               ADC     R11, R16
   \   000006F2   963C               ADIW    R31:R30, 12
   \   000006F4   01DC               MOVW    R27:R26, R25:R24
   \   000006F6   9616               ADIW    R27:R26, 6
   \   000006F8   ....               RCALL   MACcpy
   \   000006FA   ....               LDI     R30, LOW((IP + 21))
   \   000006FC   ....               LDI     R31, HIGH((IP + 21))
   \   000006FE   01DC               MOVW    R27:R26, R25:R24
   \   00000700   961C               ADIW    R27:R26, 12
   \   00000702   ....               RCALL   MACcpy
   \   00000704   E008               LDI     R16, 8
   \   00000706   E010               LDI     R17, 0
   \   00000708   01FC               MOVW    R31:R30, R25:R24
   \   0000070A   8704               STD     Z+12, R16
   \   0000070C   8715               STD     Z+13, R17
   \   0000070E   E405               LDI     R16, 69
   \   00000710   8706               STD     Z+14, R16
   \   00000712   8717               STD     Z+15, R17
   \   00000714   8AB0               STD     Z+16, R11
   \   00000716   8AA1               STD     Z+17, R10
   \   00000718   ....               LDI     R30, LOW(IP)
   \   0000071A   ....               LDI     R31, (IP) >> 8
   \   0000071C   8504               LDD     R16, Z+12
   \   0000071E   8515               LDD     R17, Z+13
   \   00000720   5F0F               SUBI    R16, 255
   \   00000722   4F1F               SBCI    R17, 255
   \   00000724   8704               STD     Z+12, R16
   \   00000726   8715               STD     Z+13, R17
   \   00000728   01FC               MOVW    R31:R30, R25:R24
   \   0000072A   8B12               STD     Z+18, R17
   \   0000072C   8B03               STD     Z+19, R16
   \   0000072E   E030               LDI     R19, 0
   \   00000730   E420               LDI     R18, 64
   \   00000732   8B24               STD     Z+20, R18
   \   00000734   8B35               STD     Z+21, R19
   \   00000736   E800               LDI     R16, 128
   \   00000738   8B06               STD     Z+22, R16
   \   0000073A   8F30               STD     Z+24, R19
   \   0000073C   8F31               STD     Z+25, R19
   \   0000073E   ....               LDI     R30, LOW(IP)
   \   00000740   ....               LDI     R31, (IP) >> 8
   \   00000742   8100               LD      R16, Z
   \   00000744   8111               LDD     R17, Z+1
   \   00000746   8122               LDD     R18, Z+2
   \   00000748   8133               LDD     R19, Z+3
   \   0000074A   01FC               MOVW    R31:R30, R25:R24
   \   0000074C   8F02               STD     Z+26, R16
   \   0000074E   8F13               STD     Z+27, R17
   \   00000750   8F24               STD     Z+28, R18
   \   00000752   8F35               STD     Z+29, R19
   \   00000754   E104               LDI     R16, 20
   \   00000756   E010               LDI     R17, 0
   \   00000758   01DC               MOVW    R27:R26, R25:R24
   \   0000075A   961E               ADIW    R27:R26, 14
   \   0000075C   ....               RCALL   IPChecksum
   \   0000075E   01FC               MOVW    R31:R30, R25:R24
   \   00000760   8F00               STD     Z+24, R16
   \   00000762   8F11               STD     Z+25, R17
   \   00000764   E00E               LDI     R16, 14
   \   00000766   0EA0               ADD     R10, R16
   \   00000768   E000               LDI     R16, 0
   \   0000076A   1EB0               ADC     R11, R16
   \   0000076C   E30C               LDI     R16, 60
   \   0000076E   16A0               CP      R10, R16
   \   00000770   E000               LDI     R16, 0
   \   00000772   06B0               CPC     R11, R16
   \   00000774   F418               BRCC    ??INT_ETH_PROCESS_PKT2_46
   \                     ??INT_ETH_PROCESS_PKT2_12:
   \   00000776   E30C               LDI     R16, 60
   \   00000778   2EA0               MOV     R10, R16
   \   0000077A   24BB               CLR     R11
   \                     ??INT_ETH_PROCESS_PKT2_46:
   \   0000077C   ....               LDI     R30, LOW(IP)
   \   0000077E   ....               LDI     R31, (IP) >> 8
   \   00000780   86A0               STD     Z+8, R10
   \   00000782   86B1               STD     Z+9, R11
   \   00000784   E100               LDI     R16, 16
   \   00000786   8706               STD     Z+14, R16
   \   00000788   CEDB               RJMP    ??INT_ETH_PROCESS_PKT2_36
   \                     ??INT_ETH_PROCESS_PKT2_37:
   \   0000078A   FF04               SBRS    R16, 4
   \   0000078C   CECF               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   0000078E   01FC               MOVW    R31:R30, R25:R24
   \   00000790   8D03               LDD     R16, Z+27
   \   00000792   3004               CPI     R16, 4
   \   00000794   F409               BRNE    $+2+2
   \   00000796   CECA               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   00000798   01D3               MOVW    R27:R26, R7:R6
   \   0000079A   ....               RCALL   cmp_S_A
   \   0000079C   0128               MOVW    R5:R4, R17:R16
   \   0000079E   01FC               MOVW    R31:R30, R25:R24
   \   000007A0   8D35               LDD     R19, Z+29
   \   000007A2   8D26               LDD     R18, Z+30
   \   000007A4   152A               CP      R18, R10
   \   000007A6   053B               CPC     R19, R11
   \   000007A8   F408               BRCC    $+2+2
   \   000007AA   CF2E               RJMP    ??INT_ETH_PROCESS_PKT2_41
   \   000007AC   2B01               OR      R16, R17
   \   000007AE   8D03               LDD     R16, Z+27
   \   000007B0   F409               BRNE    $+2+2
   \   000007B2   C11A               RJMP    ??INT_ETH_PROCESS_PKT2_47
   \   000007B4   3005               CPI     R16, 5
   \   000007B6   F409               BRNE    $+2+2
   \   000007B8   C1EC               RJMP    ??INT_ETH_PROCESS_PKT2_48
   \   000007BA   E001               LDI     R16, 1
   \   000007BC   1640               CP      R4, R16
   \   000007BE   E000               LDI     R16, 0
   \   000007C0   0650               CPC     R5, R16
   \   000007C2   F40C               BRGE    $+2+2
   \   000007C4   CF21               RJMP    ??INT_ETH_PROCESS_PKT2_41
   \   000007C6   9100....           LDS     R16, BufferPKT
   \   000007CA   2300               TST     R16
   \   000007CC   F409               BRNE    $+2+2
   \   000007CE   C082               RJMP    ??INT_ETH_PROCESS_PKT2_49
   \   000007D0   9040....           LDS     R4, FIFO_pkt_TS
   \   000007D4   9180....           LDS     R24, (IP + 8)
   \   000007D8   9190....           LDS     R25, (IP + 9)
   \   000007DC   ....               LDI     R26, LOW(ETH_PKT)
   \   000007DE   ....               LDI     R27, (ETH_PKT) >> 8
   \   000007E0   2F08               MOV     R16, R24
   \   000007E2   2B09               OR      R16, R25
   \   000007E4   F409               BRNE    $+2+2
   \   000007E6   CEA2               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   000007E8   ........           CALL    ETHfifo_free
   \   000007EC   3709               CPI     R16, 121
   \   000007EE   4015               SBCI    R17, 5
   \   000007F0   4020               SBCI    R18, 0
   \   000007F2   4030               SBCI    R19, 0
   \   000007F4   F408               BRCC    $+2+2
   \   000007F6   CE9A               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   000007F8   2400               CLR     R0
   \   000007FA   ....               LDI     R30, LOW(ETHfifo_pWR)
   \   000007FC   ....               LDI     R31, (ETHfifo_pWR) >> 8
   \   000007FE   8100               LD      R16, Z
   \   00000800   8111               LDD     R17, Z+1
   \   00000802   8122               LDD     R18, Z+2
   \   00000804   8133               LDD     R19, Z+3
   \   00000806   9603               ADIW    R25:R24, 3
   \   00000808   011C               MOVW    R3:R2, R25:R24
   \   0000080A   9894               CBI     0x12, 0x04
   \   0000080C   E046               LDI     R20, 6
   \   0000080E   B94F               OUT     0x0F, R20
   \                     ??INT_ETH_PROCESS_PKT2_50:
   \   00000810   9B77               SBIS    0x0E, 0x07
   \   00000812   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_50
   \   00000814   9A94               SBI     0x12, 0x04
   \   00000816   9894               CBI     0x12, 0x04
   \   00000818   E042               LDI     R20, 2
   \   0000081A   B94F               OUT     0x0F, R20
   \                     ??INT_ETH_PROCESS_PKT2_51:
   \   0000081C   9B77               SBIS    0x0E, 0x07
   \   0000081E   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_51
   \   00000820   B92F               OUT     0x0F, R18
   \                     ??INT_ETH_PROCESS_PKT2_52:
   \   00000822   9B77               SBIS    0x0E, 0x07
   \   00000824   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_52
   \   00000826   B91F               OUT     0x0F, R17
   \                     ??INT_ETH_PROCESS_PKT2_53:
   \   00000828   9B77               SBIS    0x0E, 0x07
   \   0000082A   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_53
   \   0000082C   B90F               OUT     0x0F, R16
   \                     ??INT_ETH_PROCESS_PKT2_54:
   \   0000082E   9977               SBIC    0x0E, 0x07
   \   00000830   C009               RJMP    ??INT_ETH_PROCESS_PKT2_55
   \   00000832   CFFD               RJMP    ??INT_ETH_PROCESS_PKT2_54
   \                     ??INT_ETH_PROCESS_PKT2_56:
   \   00000834   2D40               MOV     R20, R0
   \   00000836   2000               TST     R0
   \   00000838   F029               BREQ    ??INT_ETH_PROCESS_PKT2_55
   \   0000083A   954A               DEC     R20
   \   0000083C   F041               BREQ    ??INT_ETH_PROCESS_PKT2_57
   \   0000083E   954A               DEC     R20
   \   00000840   F049               BREQ    ??INT_ETH_PROCESS_PKT2_58
   \   00000842   C00A               RJMP    ??INT_ETH_PROCESS_PKT2_59
   \                     ??INT_ETH_PROCESS_PKT2_55:
   \   00000844   01FC               MOVW    R31:R30, R25:R24
   \   00000846   9733               SBIW    R31:R30, 3
   \   00000848   2FEF               MOV     R30, R31
   \                     ??INT_ETH_PROCESS_PKT2_60:
   \   0000084A   9403               INC     R0
   \   0000084C   C006               RJMP    ??INT_ETH_PROCESS_PKT2_61
   \                     ??INT_ETH_PROCESS_PKT2_57:
   \   0000084E   2FE8               MOV     R30, R24
   \   00000850   50E3               SUBI    R30, 3
   \   00000852   CFFB               RJMP    ??INT_ETH_PROCESS_PKT2_60
   \                     ??INT_ETH_PROCESS_PKT2_58:
   \   00000854   2DE4               MOV     R30, R4
   \   00000856   CFF9               RJMP    ??INT_ETH_PROCESS_PKT2_60
   \                     ??INT_ETH_PROCESS_PKT2_59:
   \   00000858   91ED               LD      R30, X+
   \                     ??INT_ETH_PROCESS_PKT2_61:
   \   0000085A   B9EF               OUT     0x0F, R30
   \   0000085C   E040               LDI     R20, 0
   \   0000085E   5F0F               SUBI    R16, 255
   \   00000860   4F1F               SBCI    R17, 255
   \   00000862   4F2F               SBCI    R18, 255
   \   00000864   4F3F               SBCI    R19, 255
   \   00000866   3000               CPI     R16, 0
   \   00000868   0714               CPC     R17, R20
   \   0000086A   E052               LDI     R21, 2
   \   0000086C   0725               CPC     R18, R21
   \   0000086E   0734               CPC     R19, R20
   \   00000870   F008               BRCS    ??INT_ETH_PROCESS_PKT2_62
   \   00000872   E041               LDI     R20, 1
   \                     ??INT_ETH_PROCESS_PKT2_62:
   \   00000874   9B77               SBIS    0x0E, 0x07
   \   00000876   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_62
   \   00000878   2344               TST     R20
   \   0000087A   F0C1               BREQ    ??INT_ETH_PROCESS_PKT2_63
   \   0000087C   9A94               SBI     0x12, 0x04
   \   0000087E   E405               LDI     R16, 69
   \   00000880   EC19               LDI     R17, 201
   \   00000882   E021               LDI     R18, 1
   \   00000884   E030               LDI     R19, 0
   \   00000886   9894               CBI     0x12, 0x04
   \   00000888   E046               LDI     R20, 6
   \   0000088A   B94F               OUT     0x0F, R20
   \                     ??INT_ETH_PROCESS_PKT2_64:
   \   0000088C   9B77               SBIS    0x0E, 0x07
   \   0000088E   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_64
   \   00000890   9A94               SBI     0x12, 0x04
   \   00000892   9894               CBI     0x12, 0x04
   \   00000894   B95F               OUT     0x0F, R21
   \                     ??INT_ETH_PROCESS_PKT2_65:
   \   00000896   9B77               SBIS    0x0E, 0x07
   \   00000898   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_65
   \   0000089A   B92F               OUT     0x0F, R18
   \                     ??INT_ETH_PROCESS_PKT2_66:
   \   0000089C   9B77               SBIS    0x0E, 0x07
   \   0000089E   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_66
   \   000008A0   B91F               OUT     0x0F, R17
   \                     ??INT_ETH_PROCESS_PKT2_67:
   \   000008A2   9B77               SBIS    0x0E, 0x07
   \   000008A4   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_67
   \   000008A6   B90F               OUT     0x0F, R16
   \                     ??INT_ETH_PROCESS_PKT2_68:
   \   000008A8   9B77               SBIS    0x0E, 0x07
   \   000008AA   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_68
   \                     ??INT_ETH_PROCESS_PKT2_63:
   \   000008AC   01A1               MOVW    R21:R20, R3:R2
   \   000008AE   EF6F               LDI     R22, 255
   \   000008B0   0E26               ADD     R2, R22
   \   000008B2   1E36               ADC     R3, R22
   \   000008B4   2B45               OR      R20, R21
   \   000008B6   F009               BREQ    $+2+2
   \   000008B8   CFBD               RJMP    ??INT_ETH_PROCESS_PKT2_56
   \   000008BA   9A94               SBI     0x12, 0x04
   \   000008BC   ....               LDI     R30, LOW(ETHfifo_pWR)
   \   000008BE   ....               LDI     R31, (ETHfifo_pWR) >> 8
   \   000008C0   8300               ST      Z, R16
   \   000008C2   8311               STD     Z+1, R17
   \   000008C4   8322               STD     Z+2, R18
   \   000008C6   8333               STD     Z+3, R19
   \   000008C8   9100....           LDS     R16, ETHfifo_CNT
   \   000008CC   9503               INC     R16
   \   000008CE   9300....           STS     ETHfifo_CNT, R16
   \   000008D2   CE2C               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \                     ??INT_ETH_PROCESS_PKT2_49:
   \   000008D4   ....               LDI     R30, LOW(IP)
   \   000008D6   ....               LDI     R31, (IP) >> 8
   \   000008D8   81A6               LDD     R26, Z+6
   \   000008DA   81B7               LDD     R27, Z+7
   \   000008DC   5EAC               SUBI    R26, 236
   \   000008DE   8440               LDD     R4, Z+8
   \   000008E0   8451               LDD     R5, Z+9
   \   000008E2   ....               LDI     R16, LOW(ETH_PKT)
   \   000008E4   2E60               MOV     R6, R16
   \   000008E6   ....               LDI     R16, (ETH_PKT) >> 8
   \   000008E8   2E70               MOV     R7, R16
   \   000008EA   2D04               MOV     R16, R4
   \   000008EC   2905               OR      R16, R5
   \   000008EE   F409               BRNE    $+2+2
   \   000008F0   CE8B               RJMP    ??INT_ETH_PROCESS_PKT2_41
   \   000008F2   ........           CALL    ETHfifo_free
   \   000008F6   3709               CPI     R16, 121
   \   000008F8   4015               SBCI    R17, 5
   \   000008FA   E0B0               LDI     R27, 0
   \   000008FC   4020               SBCI    R18, 0
   \   000008FE   4030               SBCI    R19, 0
   \   00000900   F408               BRCC    $+2+2
   \   00000902   CE82               RJMP    ??INT_ETH_PROCESS_PKT2_41
   \   00000904   ....               LDI     R30, LOW(ETHfifo_pWR)
   \   00000906   ....               LDI     R31, (ETHfifo_pWR) >> 8
   \   00000908   8100               LD      R16, Z
   \   0000090A   8111               LDD     R17, Z+1
   \   0000090C   8122               LDD     R18, Z+2
   \   0000090E   8133               LDD     R19, Z+3
   \   00000910   E043               LDI     R20, 3
   \   00000912   0E44               ADD     R4, R20
   \   00000914   1E5B               ADC     R5, R27
   \   00000916   0102               MOVW    R1:R0, R5:R4
   \   00000918   9894               CBI     0x12, 0x04
   \   0000091A   E046               LDI     R20, 6
   \   0000091C   B94F               OUT     0x0F, R20
   \                     ??INT_ETH_PROCESS_PKT2_69:
   \   0000091E   9B77               SBIS    0x0E, 0x07
   \   00000920   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_69
   \   00000922   9A94               SBI     0x12, 0x04
   \   00000924   9894               CBI     0x12, 0x04
   \   00000926   E042               LDI     R20, 2
   \   00000928   B94F               OUT     0x0F, R20
   \                     ??INT_ETH_PROCESS_PKT2_70:
   \   0000092A   9B77               SBIS    0x0E, 0x07
   \   0000092C   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_70
   \   0000092E   B92F               OUT     0x0F, R18
   \                     ??INT_ETH_PROCESS_PKT2_71:
   \   00000930   9B77               SBIS    0x0E, 0x07
   \   00000932   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_71
   \   00000934   B91F               OUT     0x0F, R17
   \                     ??INT_ETH_PROCESS_PKT2_72:
   \   00000936   9B77               SBIS    0x0E, 0x07
   \   00000938   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_72
   \   0000093A   B90F               OUT     0x0F, R16
   \                     ??INT_ETH_PROCESS_PKT2_73:
   \   0000093C   9977               SBIC    0x0E, 0x07
   \   0000093E   C009               RJMP    ??INT_ETH_PROCESS_PKT2_74
   \   00000940   CFFD               RJMP    ??INT_ETH_PROCESS_PKT2_73
   \                     ??INT_ETH_PROCESS_PKT2_75:
   \   00000942   2F4B               MOV     R20, R27
   \   00000944   23BB               TST     R27
   \   00000946   F029               BREQ    ??INT_ETH_PROCESS_PKT2_74
   \   00000948   954A               DEC     R20
   \   0000094A   F041               BREQ    ??INT_ETH_PROCESS_PKT2_76
   \   0000094C   954A               DEC     R20
   \   0000094E   F049               BREQ    ??INT_ETH_PROCESS_PKT2_77
   \   00000950   C00A               RJMP    ??INT_ETH_PROCESS_PKT2_78
   \                     ??INT_ETH_PROCESS_PKT2_74:
   \   00000952   01A2               MOVW    R21:R20, R5:R4
   \   00000954   5043               SUBI    R20, 3
   \   00000956   4050               SBCI    R21, 0
   \                     ??INT_ETH_PROCESS_PKT2_79:
   \   00000958   95B3               INC     R27
   \   0000095A   C008               RJMP    ??INT_ETH_PROCESS_PKT2_80
   \                     ??INT_ETH_PROCESS_PKT2_76:
   \   0000095C   2D54               MOV     R21, R4
   \   0000095E   5053               SUBI    R21, 3
   \   00000960   CFFB               RJMP    ??INT_ETH_PROCESS_PKT2_79
   \                     ??INT_ETH_PROCESS_PKT2_77:
   \   00000962   2F5A               MOV     R21, R26
   \   00000964   CFF9               RJMP    ??INT_ETH_PROCESS_PKT2_79
   \                     ??INT_ETH_PROCESS_PKT2_78:
   \   00000966   01F3               MOVW    R31:R30, R7:R6
   \   00000968   9151               LD      R21, Z+
   \   0000096A   013F               MOVW    R7:R6, R31:R30
   \                     ??INT_ETH_PROCESS_PKT2_80:
   \   0000096C   B95F               OUT     0x0F, R21
   \   0000096E   E050               LDI     R21, 0
   \   00000970   5F0F               SUBI    R16, 255
   \   00000972   4F1F               SBCI    R17, 255
   \   00000974   4F2F               SBCI    R18, 255
   \   00000976   4F3F               SBCI    R19, 255
   \   00000978   3000               CPI     R16, 0
   \   0000097A   0715               CPC     R17, R21
   \   0000097C   E042               LDI     R20, 2
   \   0000097E   0724               CPC     R18, R20
   \   00000980   0735               CPC     R19, R21
   \   00000982   F008               BRCS    ??INT_ETH_PROCESS_PKT2_81
   \   00000984   E051               LDI     R21, 1
   \                     ??INT_ETH_PROCESS_PKT2_81:
   \   00000986   9B77               SBIS    0x0E, 0x07
   \   00000988   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_81
   \   0000098A   2355               TST     R21
   \   0000098C   F0C9               BREQ    ??INT_ETH_PROCESS_PKT2_82
   \   0000098E   9A94               SBI     0x12, 0x04
   \   00000990   E405               LDI     R16, 69
   \   00000992   EC19               LDI     R17, 201
   \   00000994   E021               LDI     R18, 1
   \   00000996   E030               LDI     R19, 0
   \   00000998   9894               CBI     0x12, 0x04
   \   0000099A   E046               LDI     R20, 6
   \   0000099C   B94F               OUT     0x0F, R20
   \                     ??INT_ETH_PROCESS_PKT2_83:
   \   0000099E   9B77               SBIS    0x0E, 0x07
   \   000009A0   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_83
   \   000009A2   9A94               SBI     0x12, 0x04
   \   000009A4   9894               CBI     0x12, 0x04
   \   000009A6   E042               LDI     R20, 2
   \   000009A8   B94F               OUT     0x0F, R20
   \                     ??INT_ETH_PROCESS_PKT2_84:
   \   000009AA   9B77               SBIS    0x0E, 0x07
   \   000009AC   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_84
   \   000009AE   B92F               OUT     0x0F, R18
   \                     ??INT_ETH_PROCESS_PKT2_85:
   \   000009B0   9B77               SBIS    0x0E, 0x07
   \   000009B2   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_85
   \   000009B4   B91F               OUT     0x0F, R17
   \                     ??INT_ETH_PROCESS_PKT2_86:
   \   000009B6   9B77               SBIS    0x0E, 0x07
   \   000009B8   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_86
   \   000009BA   B90F               OUT     0x0F, R16
   \                     ??INT_ETH_PROCESS_PKT2_87:
   \   000009BC   9B77               SBIS    0x0E, 0x07
   \   000009BE   CFFE               RJMP    ??INT_ETH_PROCESS_PKT2_87
   \                     ??INT_ETH_PROCESS_PKT2_82:
   \   000009C0   01B0               MOVW    R23:R22, R1:R0
   \   000009C2   EF4F               LDI     R20, 255
   \   000009C4   0E04               ADD     R0, R20
   \   000009C6   1E14               ADC     R1, R20
   \   000009C8   2B67               OR      R22, R23
   \   000009CA   F009               BREQ    $+2+2
   \   000009CC   CFBA               RJMP    ??INT_ETH_PROCESS_PKT2_75
   \   000009CE   9A94               SBI     0x12, 0x04
   \   000009D0   ....               LDI     R30, LOW(ETHfifo_pWR)
   \   000009D2   ....               LDI     R31, (ETHfifo_pWR) >> 8
   \   000009D4   8300               ST      Z, R16
   \   000009D6   8311               STD     Z+1, R17
   \   000009D8   8322               STD     Z+2, R18
   \   000009DA   8333               STD     Z+3, R19
   \   000009DC   9100....           LDS     R16, ETHfifo_CNT
   \   000009E0   9503               INC     R16
   \   000009E2   9300....           STS     ETHfifo_CNT, R16
   \   000009E6   CE10               RJMP    ??INT_ETH_PROCESS_PKT2_41
   \                     ??INT_ETH_PROCESS_PKT2_47:
   \   000009E8   5002               SUBI    R16, 2
   \   000009EA   F031               BREQ    ??INT_ETH_PROCESS_PKT2_88
   \   000009EC   5003               SUBI    R16, 3
   \   000009EE   F409               BRNE    $+2+2
   \   000009F0   C0C5               RJMP    ??INT_ETH_PROCESS_PKT2_89
   \   000009F2   950A               DEC     R16
   \   000009F4   F0A1               BREQ    ??INT_ETH_PROCESS_PKT2_90
   \   000009F6   C0D9               RJMP    ??INT_ETH_PROCESS_PKT2_26
   \                     ??INT_ETH_PROCESS_PKT2_88:
   \   000009F8   01D3               MOVW    R27:R26, R7:R6
   \   000009FA   ....               RCALL   cmp_A_S
   \   000009FC   3001               CPI     R16, 1
   \   000009FE   4010               SBCI    R17, 0
   \   00000A00   F009               BREQ    $+2+2
   \   00000A02   C0D3               RJMP    ??INT_ETH_PROCESS_PKT2_26
   \                     ??INT_ETH_PROCESS_PKT2_40:
   \   00000A04   E001               LDI     R16, 1
   \   00000A06   01FC               MOVW    R31:R30, R25:R24
   \   00000A08   9673               ADIW    R31:R30, 19
   \   00000A0A   ....               RCALL   inc32
   \   00000A0C   E006               LDI     R16, 6
   \   00000A0E   01FC               MOVW    R31:R30, R25:R24
   \   00000A10   8F03               STD     Z+27, R16
   \   00000A12   E100               LDI     R16, 16
   \   00000A14   8F04               STD     Z+28, R16
   \   00000A16   8102               LDD     R16, Z+2
   \   00000A18   6800               ORI     R16, 0x80
   \   00000A1A   8302               STD     Z+2, R16
   \   00000A1C   C047               RJMP    ??INT_ETH_PROCESS_PKT2_91
   \                     ??INT_ETH_PROCESS_PKT2_90:
   \   00000A1E   01D3               MOVW    R27:R26, R7:R6
   \   00000A20   ....               RCALL   cmp_A_S
   \   00000A22   0128               MOVW    R5:R4, R17:R16
   \   00000A24   2311               TST     R17
   \   00000A26   F40A               BRPL    $+2+2
   \   00000A28   CD81               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   00000A2A   01FC               MOVW    R31:R30, R25:R24
   \   00000A2C   A103               LDD     R16, Z+35
   \   00000A2E   A114               LDD     R17, Z+36
   \   00000A30   1504               CP      R16, R4
   \   00000A32   0515               CPC     R17, R5
   \   00000A34   F408               BRCC    $+2+2
   \   00000A36   CDE8               RJMP    ??INT_ETH_PROCESS_PKT2_41
   \   00000A38   1904               SUB     R16, R4
   \   00000A3A   0915               SBC     R17, R5
   \   00000A3C   A303               STD     Z+35, R16
   \   00000A3E   A314               STD     Z+36, R17
   \   00000A40   A145               LDD     R20, Z+37
   \   00000A42   A156               LDD     R21, Z+38
   \   00000A44   018A               MOVW    R17:R16, R21:R20
   \   00000A46   2F24               MOV     R18, R20
   \   00000A48   1504               CP      R16, R4
   \   00000A4A   0515               CPC     R17, R5
   \   00000A4C   F418               BRCC    ??INT_ETH_PROCESS_PKT2_92
   \   00000A4E   E000               LDI     R16, 0
   \   00000A50   E010               LDI     R17, 0
   \   00000A52   C002               RJMP    ??INT_ETH_PROCESS_PKT2_93
   \                     ??INT_ETH_PROCESS_PKT2_92:
   \   00000A54   1904               SUB     R16, R4
   \   00000A56   0915               SBC     R17, R5
   \                     ??INT_ETH_PROCESS_PKT2_93:
   \   00000A58   A305               STD     Z+37, R16
   \   00000A5A   A316               STD     Z+38, R17
   \   00000A5C   2B01               OR      R16, R17
   \   00000A5E   F499               BRNE    ??INT_ETH_PROCESS_PKT2_94
   \   00000A60   2B25               OR      R18, R21
   \   00000A62   F089               BREQ    ??INT_ETH_PROCESS_PKT2_94
   \   00000A64   A500               LDD     R16, Z+40
   \   00000A66   E410               LDI     R17, 64
   \   00000A68   9F01               MUL     R16, R17
   \   00000A6A   2C01               MOV     R0, R1
   \   00000A6C   A117               LDD     R17, Z+39
   \   00000A6E   1601               CP      R0, R17
   \   00000A70   F440               BRCC    ??INT_ETH_PROCESS_PKT2_95
   \   00000A72   3F0F               CPI     R16, 255
   \   00000A74   F411               BRNE    ??INT_ETH_PROCESS_PKT2_96
   \   00000A76   E800               LDI     R16, 128
   \   00000A78   C004               RJMP    ??INT_ETH_PROCESS_PKT2_95
   \                     ??INT_ETH_PROCESS_PKT2_96:
   \   00000A7A   9506               LSR     R16
   \   00000A7C   3004               CPI     R16, 4
   \   00000A7E   F408               BRCC    ??INT_ETH_PROCESS_PKT2_95
   \   00000A80   E004               LDI     R16, 4
   \                     ??INT_ETH_PROCESS_PKT2_95:
   \   00000A82   A307               STD     Z+39, R16
   \   00000A84   A700               STD     Z+40, R16
   \                     ??INT_ETH_PROCESS_PKT2_94:
   \   00000A86   0182               MOVW    R17:R16, R5:R4
   \   00000A88   9673               ADIW    R31:R30, 19
   \   00000A8A   ....               RCALL   inc32i
   \   00000A8C   C005               RJMP    ??INT_ETH_PROCESS_PKT2_97
   \                     ??INT_ETH_PROCESS_PKT2_98:
   \   00000A8E   01FC               MOVW    R31:R30, R25:R24
   \   00000A90   E0A0               LDI     R26, 0
   \   00000A92   E0B0               LDI     R27, 0
   \   00000A94   E005               LDI     R16, 5
   \   00000A96   ....               RCALL   CallTCPhook
   \                     ??INT_ETH_PROCESS_PKT2_97:
   \   00000A98   EF1F               LDI     R17, 255
   \   00000A9A   1641               CP      R4, R17
   \   00000A9C   E000               LDI     R16, 0
   \   00000A9E   0650               CPC     R5, R16
   \   00000AA0   F40C               BRGE    ??INT_ETH_PROCESS_PKT2_99
   \   00000AA2   2D14               MOV     R17, R4
   \                     ??INT_ETH_PROCESS_PKT2_99:
   \   00000AA4   1A41               SUB     R4, R17
   \   00000AA6   0A50               SBC     R5, R16
   \   00000AA8   2311               TST     R17
   \   00000AAA   F789               BRNE    ??INT_ETH_PROCESS_PKT2_98
   \                     ??INT_ETH_PROCESS_PKT2_91:
   \   00000AAC   01F3               MOVW    R31:R30, R7:R6
   \   00000AAE   8516               LDD     R17, Z+14
   \   00000AB0   8507               LDD     R16, Z+15
   \   00000AB2   3001               CPI     R16, 1
   \   00000AB4   E125               LDI     R18, 21
   \   00000AB6   0712               CPC     R17, R18
   \   00000AB8   F010               BRCS    ??INT_ETH_PROCESS_PKT2_100
   \   00000ABA   E000               LDI     R16, 0
   \   00000ABC   E115               LDI     R17, 21
   \                     ??INT_ETH_PROCESS_PKT2_100:
   \   00000ABE   01FC               MOVW    R31:R30, R25:R24
   \   00000AC0   8F07               STD     Z+31, R16
   \   00000AC2   A310               STD     Z+32, R17
   \   00000AC4   0185               MOVW    R17:R16, R11:R10
   \   00000AC6   9677               ADIW    R31:R30, 23
   \   00000AC8   ....               RCALL   inc32i
   \   00000ACA   2444               CLR     R4
   \   00000ACC   2455               CLR     R5
   \                     ??INT_ETH_PROCESS_PKT2_101:
   \   00000ACE   0195               MOVW    R19:R18, R11:R10
   \   00000AD0   1924               SUB     R18, R4
   \   00000AD2   0935               SBC     R19, R5
   \   00000AD4   3031               CPI     R19, 1
   \   00000AD6   F008               BRCS    ??INT_ETH_PROCESS_PKT2_102
   \   00000AD8   EF2F               LDI     R18, 255
   \                     ??INT_ETH_PROCESS_PKT2_102:
   \   00000ADA   01F3               MOVW    R31:R30, R7:R6
   \   00000ADC   8544               LDD     R20, Z+12
   \   00000ADE   E050               LDI     R21, 0
   \   00000AE0   01D3               MOVW    R27:R26, R7:R6
   \   00000AE2   0FA4               ADD     R26, R20
   \   00000AE4   1FB5               ADC     R27, R21
   \   00000AE6   0DA4               ADD     R26, R4
   \   00000AE8   1DB5               ADC     R27, R5
   \   00000AEA   01FC               MOVW    R31:R30, R25:R24
   \   00000AEC   2F12               MOV     R17, R18
   \   00000AEE   E007               LDI     R16, 7
   \   00000AF0   ....               RCALL   CallTCPhook
   \   00000AF2   0195               MOVW    R19:R18, R11:R10
   \   00000AF4   1924               SUB     R18, R4
   \   00000AF6   0935               SBC     R19, R5
   \   00000AF8   3031               CPI     R19, 1
   \   00000AFA   F010               BRCS    ??INT_ETH_PROCESS_PKT2_103
   \   00000AFC   EF2F               LDI     R18, 255
   \   00000AFE   E030               LDI     R19, 0
   \                     ??INT_ETH_PROCESS_PKT2_103:
   \   00000B00   0E42               ADD     R4, R18
   \   00000B02   1E53               ADC     R5, R19
   \   00000B04   144A               CP      R4, R10
   \   00000B06   045B               CPC     R5, R11
   \   00000B08   F711               BRNE    ??INT_ETH_PROCESS_PKT2_101
   \   00000B0A   01F3               MOVW    R31:R30, R7:R6
   \   00000B0C   8515               LDD     R17, Z+13
   \   00000B0E   FF10               SBRS    R17, 0
   \   00000B10   C008               RJMP    ??INT_ETH_PROCESS_PKT2_104
   \   00000B12   E001               LDI     R16, 1
   \   00000B14   01FC               MOVW    R31:R30, R25:R24
   \   00000B16   9677               ADIW    R31:R30, 23
   \   00000B18   ....               RCALL   inc32
   \   00000B1A   E005               LDI     R16, 5
   \   00000B1C   01FC               MOVW    R31:R30, R25:R24
   \   00000B1E   8F03               STD     Z+27, R16
   \   00000B20   C004               RJMP    ??INT_ETH_PROCESS_PKT2_105
   \                     ??INT_ETH_PROCESS_PKT2_104:
   \   00000B22   01FC               MOVW    R31:R30, R25:R24
   \   00000B24   8D13               LDD     R17, Z+27
   \   00000B26   3015               CPI     R17, 5
   \   00000B28   F429               BRNE    ??INT_ETH_PROCESS_PKT2_106
   \                     ??INT_ETH_PROCESS_PKT2_105:
   \   00000B2A   E101               LDI     R16, 17
   \   00000B2C   8F04               STD     Z+28, R16
   \   00000B2E   E000               LDI     R16, 0
   \   00000B30   A307               STD     Z+39, R16
   \   00000B32   CCFC               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \                     ??INT_ETH_PROCESS_PKT2_106:
   \   00000B34   8D25               LDD     R18, Z+29
   \   00000B36   8D36               LDD     R19, Z+30
   \   00000B38   2B23               OR      R18, R19
   \   00000B3A   F409               BRNE    $+2+2
   \   00000B3C   CD65               RJMP    ??INT_ETH_PROCESS_PKT2_41
   \   00000B3E   2300               TST     R16
   \   00000B40   F039               BREQ    ??INT_ETH_PROCESS_PKT2_107
   \   00000B42   A105               LDD     R16, Z+37
   \   00000B44   A116               LDD     R17, Z+38
   \   00000B46   2B01               OR      R16, R17
   \   00000B48   F419               BRNE    ??INT_ETH_PROCESS_PKT2_107
   \   00000B4A   E003               LDI     R16, 3
   \   00000B4C   A701               STD     Z+41, R16
   \   00000B4E   CCEE               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \                     ??INT_ETH_PROCESS_PKT2_107:
   \   00000B50   28AB               OR      R10, R11
   \   00000B52   F409               BRNE    $+2+2
   \   00000B54   CCEB               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \   00000B56   A500               LDD     R16, Z+40
   \   00000B58   A307               STD     Z+39, R16
   \   00000B5A   8102               LDD     R16, Z+2
   \   00000B5C   FB07               BST     R16, 7
   \   00000B5E   F44E               BRTC    ??INT_ETH_PROCESS_PKT2_108
   \   00000B60   770F               ANDI    R16, 0x7F
   \   00000B62   8302               STD     Z+2, R16
   \   00000B64   A501               LDD     R16, Z+41
   \   00000B66   3004               CPI     R16, 4
   \   00000B68   F408               BRCC    $+2+2
   \   00000B6A   CD4E               RJMP    ??INT_ETH_PROCESS_PKT2_41
   \   00000B6C   E000               LDI     R16, 0
   \   00000B6E   A701               STD     Z+41, R16
   \   00000B70   CD4B               RJMP    ??INT_ETH_PROCESS_PKT2_41
   \                     ??INT_ETH_PROCESS_PKT2_108:
   \   00000B72   E015               LDI     R17, 5
   \   00000B74   A711               STD     Z+41, R17
   \   00000B76   6800               ORI     R16, 0x80
   \   00000B78   8302               STD     Z+2, R16
   \   00000B7A   CCD8               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \                     ??INT_ETH_PROCESS_PKT2_89:
   \   00000B7C   01F3               MOVW    R31:R30, R7:R6
   \   00000B7E   8505               LDD     R16, Z+13
   \   00000B80   FD00               SBRC    R16, 0
   \   00000B82   C007               RJMP    ??INT_ETH_PROCESS_PKT2_48
   \   00000B84   01FC               MOVW    R31:R30, R25:R24
   \   00000B86   01D3               MOVW    R27:R26, R7:R6
   \   00000B88   ....               RCALL   cmp_A_S
   \   00000B8A   3001               CPI     R16, 1
   \   00000B8C   4010               SBCI    R17, 0
   \   00000B8E   F40C               BRGE    $+2+2
   \   00000B90   CCCD               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \                     ??INT_ETH_PROCESS_PKT2_48:
   \   00000B92   01DC               MOVW    R27:R26, R25:R24
   \   00000B94   E003               LDI     R16, 3
   \   00000B96   ....               RCALL   ClosingTCP
   \   00000B98   2300               TST     R16
   \   00000B9A   F019               BREQ    ??INT_ETH_PROCESS_PKT2_109
   \   00000B9C   E008               LDI     R16, 8
   \   00000B9E   01FC               MOVW    R31:R30, R25:R24
   \   00000BA0   8F03               STD     Z+27, R16
   \                     ??INT_ETH_PROCESS_PKT2_109:
   \   00000BA2   01F3               MOVW    R31:R30, R7:R6
   \   00000BA4   8505               LDD     R16, Z+13
   \   00000BA6   FF00               SBRS    R16, 0
   \   00000BA8   CCC1               RJMP    ??INT_ETH_PROCESS_PKT2_9
   \                     ??INT_ETH_PROCESS_PKT2_26:
   \   00000BAA   01F3               MOVW    R31:R30, R7:R6
   \   00000BAC   8505               LDD     R16, Z+13
   \   00000BAE   FF04               SBRS    R16, 4
   \   00000BB0   C012               RJMP    ??INT_ETH_PROCESS_PKT2_110
   \   00000BB2   01D3               MOVW    R27:R26, R7:R6
   \   00000BB4   9614               ADIW    R27:R26, 4
   \   00000BB6   E004               LDI     R16, 4
   \   00000BB8   01FD               MOVW    R31:R30, R27:R26
   \   00000BBA   9634               ADIW    R31:R30, 4
   \   00000BBC   ....               RCALL   _swapmem
   \   00000BBE   01F3               MOVW    R31:R30, R7:R6
   \   00000BC0   8505               LDD     R16, Z+13
   \   00000BC2   FF00               SBRS    R16, 0
   \   00000BC4   C006               RJMP    ??INT_ETH_PROCESS_PKT2_111
   \   00000BC6   E001               LDI     R16, 1
   \   00000BC8   9638               ADIW    R31:R30, 8
   \   00000BCA   ....               RCALL   inc32
   \   00000BCC   E101               LDI     R16, 17
   \   00000BCE   01F3               MOVW    R31:R30, R7:R6
   \   00000BD0   C017               RJMP    ??INT_ETH_PROCESS_PKT2_112
   \                     ??INT_ETH_PROCESS_PKT2_111:
   \   00000BD2   E004               LDI     R16, 4
   \   00000BD4   C015               RJMP    ??INT_ETH_PROCESS_PKT2_112
   \                     ??INT_ETH_PROCESS_PKT2_110:
   \   00000BD6   0193               MOVW    R19:R18, R7:R6
   \   00000BD8   5F28               SUBI    R18, 248
   \   00000BDA   4F3F               SBCI    R19, 255
   \   00000BDC   8144               LDD     R20, Z+4
   \   00000BDE   8155               LDD     R21, Z+5
   \   00000BE0   8166               LDD     R22, Z+6
   \   00000BE2   8177               LDD     R23, Z+7
   \   00000BE4   01F9               MOVW    R31:R30, R19:R18
   \   00000BE6   8340               ST      Z, R20
   \   00000BE8   8351               STD     Z+1, R21
   \   00000BEA   8362               STD     Z+2, R22
   \   00000BEC   8373               STD     Z+3, R23
   \   00000BEE   E001               LDI     R16, 1
   \   00000BF0   ....               RCALL   inc32
   \   00000BF2   E000               LDI     R16, 0
   \   00000BF4   01F3               MOVW    R31:R30, R7:R6
   \   00000BF6   8304               STD     Z+4, R16
   \   00000BF8   8305               STD     Z+5, R16
   \   00000BFA   8306               STD     Z+6, R16
   \   00000BFC   8307               STD     Z+7, R16
   \   00000BFE   E104               LDI     R16, 20
   \                     ??INT_ETH_PROCESS_PKT2_112:
   \   00000C00   8705               STD     Z+13, R16
   \   00000C02   E002               LDI     R16, 2
   \   00000C04   9632               ADIW    R31:R30, 2
   \   00000C06   01D3               MOVW    R27:R26, R7:R6
   \   00000C08   ....               RCALL   _swapmem
   \   00000C0A   0143               MOVW    R9:R8, R7:R6
   \   00000C0C   CD02               RJMP    ??INT_ETH_PROCESS_PKT2_42
    888              while((s=s->next))
    889              {
    890                UREG i;
    891                if (s->timer_init&&(i=s->timer)) s->timer=i-1;
   \                     ??INT_ETH_PROCESS_PKT2_113:
   \   00000C0E   01FC               MOVW    R31:R30, R25:R24
   \   00000C10   A500               LDD     R16, Z+40
   \   00000C12   2300               TST     R16
   \   00000C14   F029               BREQ    ??INT_ETH_PROCESS_PKT2_114
   \   00000C16   A107               LDD     R16, Z+39
   \   00000C18   2300               TST     R16
   \   00000C1A   F011               BREQ    ??INT_ETH_PROCESS_PKT2_114
   \   00000C1C   950A               DEC     R16
   \   00000C1E   A307               STD     Z+39, R16
    892                if (s->txreq>TCP_TXREQ_SEND) s->txreq--;
   \                     ??INT_ETH_PROCESS_PKT2_114:
   \   00000C20   A501               LDD     R16, Z+41
   \   00000C22   3004               CPI     R16, 4
   \   00000C24   F010               BRCS    ??INT_ETH_PROCESS_PKT2_7
   \   00000C26   950A               DEC     R16
   \   00000C28   A701               STD     Z+41, R16
    893              }
   \                     ??INT_ETH_PROCESS_PKT2_7:
   \   00000C2A   01FC               MOVW    R31:R30, R25:R24
   \   00000C2C   8180               LD      R24, Z
   \   00000C2E   8191               LDD     R25, Z+1
   \   00000C30   2F08               MOV     R16, R24
   \   00000C32   2B09               OR      R16, R25
   \   00000C34   F761               BRNE    ??INT_ETH_PROCESS_PKT2_113
    894            }
    895            s=((TCP_SOCK *)&QUE_sock);
   \                     ??INT_ETH_PROCESS_PKT2_6:
   \   00000C36   ....               LDI     R24, LOW((IP + 10))
   \   00000C38   ....               LDI     R25, HIGH((IP + 10))
   \   00000C3A   C003               RJMP    ??INT_ETH_PROCESS_PKT2_115
    896            while((s=s->next))
    897            {
    898              // Обработка чита
    899              if (s->async_req) CallTCPhook_null(TCP_EVENT_ASYNC_REQ,s);
    900              if (s->state==TCP_STATE_QUE_CLIENT || //Есть клиент в очереди
    901          	s->txreq==TCP_TXREQ_SEND) //Запрос передачи
    902              {
    903                //s->timer_init=TCP_TIMER_INITV>>1; //Таймер начинает считать сначала
    904                goto L_TRY_CHEAT;
    905              }
    906              // Обработка таймера сокетов (перепосылка пакета)
    907              if ((!s->timer_init) || (s->timer)) continue;
    908              switch(s->state)
    909              {
    910              case TCP_STATE_CONNECTING:
    911                if (s->timer_init==255)
    912                {
    913          	ClosingTCP(TCP_EVENT_ABORT,s); //Нет соединения
   \                     ??INT_ETH_PROCESS_PKT2_116:
   \   00000C3C   01DC               MOVW    R27:R26, R25:R24
   \   00000C3E   E004               LDI     R16, 4
   \   00000C40   ....               RCALL   ClosingTCP
    914          	continue;
    915                }
   \                     ??INT_ETH_PROCESS_PKT2_115:
   \   00000C42   01FC               MOVW    R31:R30, R25:R24
   \   00000C44   8180               LD      R24, Z
   \   00000C46   8191               LDD     R25, Z+1
   \   00000C48   2F08               MOV     R16, R24
   \   00000C4A   2B09               OR      R16, R25
   \   00000C4C   F409               BRNE    $+2+2
   \   00000C4E   C153               RJMP    ??INT_ETH_PROCESS_PKT2_117
   \   00000C50   01FC               MOVW    R31:R30, R25:R24
   \   00000C52   A502               LDD     R16, Z+42
   \   00000C54   2300               TST     R16
   \   00000C56   F019               BREQ    ??INT_ETH_PROCESS_PKT2_118
   \   00000C58   01DC               MOVW    R27:R26, R25:R24
   \   00000C5A   E009               LDI     R16, 9
   \   00000C5C   ....               RCALL   CallTCPhook_null
   \                     ??INT_ETH_PROCESS_PKT2_118:
   \   00000C5E   01FC               MOVW    R31:R30, R25:R24
   \   00000C60   8D03               LDD     R16, Z+27
   \   00000C62   3008               CPI     R16, 8
   \   00000C64   F0C1               BREQ    ??INT_ETH_PROCESS_PKT2_119
   \   00000C66   A501               LDD     R16, Z+41
   \   00000C68   3003               CPI     R16, 3
   \   00000C6A   F0A9               BREQ    ??INT_ETH_PROCESS_PKT2_119
   \   00000C6C   A500               LDD     R16, Z+40
   \   00000C6E   2300               TST     R16
   \   00000C70   F341               BREQ    ??INT_ETH_PROCESS_PKT2_115
   \   00000C72   A107               LDD     R16, Z+39
   \   00000C74   2300               TST     R16
   \   00000C76   F729               BRNE    ??INT_ETH_PROCESS_PKT2_115
   \   00000C78   8D03               LDD     R16, Z+27
   \   00000C7A   5002               SUBI    R16, 2
   \   00000C7C   F051               BREQ    ??INT_ETH_PROCESS_PKT2_120
   \   00000C7E   950A               DEC     R16
   \   00000C80   F029               BREQ    ??INT_ETH_PROCESS_PKT2_121
   \   00000C82   5001               SUBI    R16, 1
   \   00000C84   F010               BRCS    ??INT_ETH_PROCESS_PKT2_122
   \   00000C86   5003               SUBI    R16, 3
   \   00000C88   F020               BRCS    ??INT_ETH_PROCESS_PKT2_120
   \                     ??INT_ETH_PROCESS_PKT2_122:
   \   00000C8A   C132               RJMP    ??INT_ETH_PROCESS_PKT2_123
   \                     ??INT_ETH_PROCESS_PKT2_121:
   \   00000C8C   A500               LDD     R16, Z+40
   \   00000C8E   3F0F               CPI     R16, 255
   \   00000C90   F2A9               BREQ    ??INT_ETH_PROCESS_PKT2_116
    916              case TCP_STATE_SYN_SENT:
    917              case TCP_STATE_CONNECTED:
    918              case TCP_STATE_SYN_RECEIVED:
    919              case TCP_STATE_FINW1:
    920                s->timer=1; //Если вдруг не получится занять буфер, будем повторять снова
   \                     ??INT_ETH_PROCESS_PKT2_120:
   \   00000C92   E001               LDI     R16, 1
   \   00000C94   A307               STD     Z+39, R16
    921              L_TRY_CHEAT:
    922                {
    923          	UREG pp;
    924          	__disable_interrupt();
   \                     ??INT_ETH_PROCESS_PKT2_119:
   \   00000C96   94F8               CLI
    925          	pp=ETH_PKT_mode;
   \   00000C98   9110....           LDS     R17, (IP + 14)
    926          	ETH_PKT_mode=1;
   \   00000C9C   E001               LDI     R16, 1
   \   00000C9E   9300....           STS     (IP + 14), R16
    927          	__enable_interrupt();
   \   00000CA2   9478               SEI
    928          	if (pp) goto L_CHECK_INCOMING;
   \   00000CA4   2311               TST     R17
   \   00000CA6   F009               BREQ    $+2+2
   \   00000CA8   CC46               RJMP    ??INT_ETH_PROCESS_PKT2_0
    929          	ETH_STOP_BACK_PRESSURE();
   \   00000CAA   ........           CALL    ETH_STOP_BACK_PRESSURE
    930          	ip=(IP_FRAME*)(&ETH_PKT);
    931                }
    932                tcpf=(TCP_FRAME*)ip;
   \   00000CAE   ....               LDI     R16, LOW(ETH_PKT)
   \   00000CB0   2E60               MOV     R6, R16
   \   00000CB2   ....               LDI     R16, (ETH_PKT) >> 8
   \   00000CB4   2E70               MOV     R7, R16
    933                if (s->state==TCP_STATE_CONNECTING)
   \   00000CB6   01FC               MOVW    R31:R30, R25:R24
   \   00000CB8   8D03               LDD     R16, Z+27
   \   00000CBA   3003               CPI     R16, 3
   \   00000CBC   F009               BREQ    $+2+2
   \   00000CBE   C050               RJMP    ??INT_ETH_PROCESS_PKT2_124
    934                {
    935          	ARP_FRAME *apo;    
    936          	UREG f=s->timer_init;
    937          	f<<=1;
   \   00000CC0   A500               LDD     R16, Z+40
   \   00000CC2   0F00               LSL     R16
    938          	if (f>=(TCP_TIMER_INITV<<3))
   \   00000CC4   3200               CPI     R16, 32
   \   00000CC6   F018               BRCS    ??INT_ETH_PROCESS_PKT2_125
    939          	{
    940          	  s->timer_init=255; //Последний выстрел
   \   00000CC8   EF1F               LDI     R17, 255
   \   00000CCA   A710               STD     Z+40, R17
   \   00000CCC   C001               RJMP    ??INT_ETH_PROCESS_PKT2_126
    941          	}
    942          	else
    943          	  s->timer_init=f;
   \                     ??INT_ETH_PROCESS_PKT2_125:
   \   00000CCE   A700               STD     Z+40, R16
    944          	s->timer=f;
   \                     ??INT_ETH_PROCESS_PKT2_126:
   \   00000CD0   A307               STD     Z+39, R16
    945          	//Теперь готовим ARP-запрос
    946          	apo=(ARP_FRAME*)(&ETH_PKT);
    947          	apo->arp.hw_type=ARP_HARDWARE;
   \   00000CD2   E000               LDI     R16, 0
   \   00000CD4   E011               LDI     R17, 1
   \   00000CD6   ....               LDI     R30, LOW(ETH_PKT)
   \   00000CD8   ....               LDI     R31, (ETH_PKT) >> 8
   \   00000CDA   8706               STD     Z+14, R16
   \   00000CDC   8717               STD     Z+15, R17
    948          	apo->arp.proto=ARP_ETHCODE;
   \   00000CDE   E008               LDI     R16, 8
   \   00000CE0   E010               LDI     R17, 0
   \   00000CE2   8B00               STD     Z+16, R16
   \   00000CE4   8B11               STD     Z+17, R17
    949          	apo->arp.hw_len=ETH_HWA_LEN;
   \   00000CE6   E006               LDI     R16, 6
   \   00000CE8   8B02               STD     Z+18, R16
    950          	apo->arp.protocol_len=ETH_PRA_LEN;
   \   00000CEA   E004               LDI     R16, 4
   \   00000CEC   8B03               STD     Z+19, R16
    951          	apo->arp.opcode=ARP_REQUEST;
   \   00000CEE   E000               LDI     R16, 0
   \   00000CF0   E011               LDI     R17, 1
   \   00000CF2   8B04               STD     Z+20, R16
   \   00000CF4   8B15               STD     Z+21, R17
    952          	apo->eth.type=ETH_PROTOCOL_ARP;
   \   00000CF6   E008               LDI     R16, 8
   \   00000CF8   E016               LDI     R17, 6
   \   00000CFA   8704               STD     Z+12, R16
   \   00000CFC   8715               STD     Z+13, R17
    953          	MACcpy(apo->arp.src_mac+ETH_HWA_LEN,MAC0+ETH_HWA_LEN);
   \   00000CFE   ....               LDI     R16, LOW(IP)
   \   00000D00   2E60               MOV     R6, R16
   \   00000D02   ....               LDI     R16, (IP) >> 8
   \   00000D04   2E70               MOV     R7, R16
   \   00000D06   ....               LDI     R30, LOW((IP + 21))
   \   00000D08   ....               LDI     R31, HIGH((IP + 21))
   \   00000D0A   ....               LDI     R26, LOW((ETH_PKT + 28))
   \   00000D0C   ....               LDI     R27, HIGH((ETH_PKT + 28))
   \   00000D0E   ....               RCALL   MACcpy
    954          	IPcpyIP(&apo->arp.src_ip);
   \   00000D10   01F3               MOVW    R31:R30, R7:R6
   \   00000D12   8100               LD      R16, Z
   \   00000D14   8111               LDD     R17, Z+1
   \   00000D16   8122               LDD     R18, Z+2
   \   00000D18   8133               LDD     R19, Z+3
   \   00000D1A   ....               LDI     R30, LOW(ETH_PKT)
   \   00000D1C   ....               LDI     R31, (ETH_PKT) >> 8
   \   00000D1E   8F04               STD     Z+28, R16
   \   00000D20   8F15               STD     Z+29, R17
   \   00000D22   8F26               STD     Z+30, R18
   \   00000D24   8F37               STD     Z+31, R19
    955          	netw_memset(apo->arp.dst_mac,0,ETH_HWA_LEN);
   \   00000D26   E016               LDI     R17, 6
   \   00000D28   E000               LDI     R16, 0
   \   00000D2A   96B0               ADIW    R31:R30, 32
   \   00000D2C   ....               RCALL   netw_memset
    956                  apo->arp.dst_ip=s->ACKNO;
   \   00000D2E   01FC               MOVW    R31:R30, R25:R24
   \   00000D30   8907               LDD     R16, Z+23
   \   00000D32   8D10               LDD     R17, Z+24
   \   00000D34   8D21               LDD     R18, Z+25
   \   00000D36   8D32               LDD     R19, Z+26
   \   00000D38   ....               LDI     R30, LOW(ETH_PKT)
   \   00000D3A   ....               LDI     R31, (ETH_PKT) >> 8
   \   00000D3C   A306               STD     Z+38, R16
   \   00000D3E   A317               STD     Z+39, R17
   \   00000D40   A720               STD     Z+40, R18
   \   00000D42   A731               STD     Z+41, R19
    957          //      apo->arp.dst_ip=s->rip;
    958          //       apo->arp.dst_ip=OUTG_IP[1];        
    959          	MACcpy(apo->eth.src_mac+ETH_HWA_LEN,MAC0+ETH_HWA_LEN);        
   \   00000D44   E105               LDI     R16, 21
   \   00000D46   0E60               ADD     R6, R16
   \   00000D48   E000               LDI     R16, 0
   \   00000D4A   1E70               ADC     R7, R16
   \   00000D4C   01F3               MOVW    R31:R30, R7:R6
   \   00000D4E   ....               LDI     R26, LOW((ETH_PKT + 12))
   \   00000D50   ....               LDI     R27, HIGH((ETH_PKT + 12))
   \   00000D52   ....               RCALL   MACcpy
    960          //        MACcpy(apo->eth.dst_mac+ETH_HWA_LEN,MAC_GATE0+ETH_HWA_LEN);
    961          	netw_memset(apo->eth.dst_mac,0xFF,ETH_HWA_LEN);
   \   00000D54   E016               LDI     R17, 6
   \   00000D56   EF0F               LDI     R16, 255
   \   00000D58   ....               LDI     R30, LOW(ETH_PKT)
   \   00000D5A   ....               LDI     R31, (ETH_PKT) >> 8
   \   00000D5C   ....               RCALL   netw_memset
    962          	len=ARP_FRAME_LEN;
    963          	ep=(ETH_FRAME*)apo;
    964          	goto L_SENDETH;    
   \   00000D5E   CD0B               RJMP    ??INT_ETH_PROCESS_PKT2_12
    965                }
    966                if (s->state==TCP_STATE_QUE_CLIENT)
   \                     ??INT_ETH_PROCESS_PKT2_124:
   \   00000D60   3008               CPI     R16, 8
   \   00000D62   F569               BRNE    ??INT_ETH_PROCESS_PKT2_127
    967                {
    968          	CallTCPhook(TCP_EVENT_QUE_GET,0,(TCP_QUE_CLIENT**)(&tcpf->tcp.ackno),s);
   \   00000D64   01D3               MOVW    R27:R26, R7:R6
   \   00000D66   969A               ADIW    R27:R26, 42
   \   00000D68   E010               LDI     R17, 0
   \   00000D6A   E00B               LDI     R16, 11
   \   00000D6C   ....               RCALL   CallTCPhook
    969          	TCP_QUE_CLIENT *p=(*((TCP_QUE_CLIENT **)(&tcpf->tcp.ackno)));
   \   00000D6E   01F3               MOVW    R31:R30, R7:R6
   \   00000D70   A442               LDD     R4, Z+42
   \   00000D72   A453               LDD     R5, Z+43
    970          	MACcpy(s->dst_mac+ETH_HWA_LEN,p->dst_mac+ETH_HWA_LEN);
   \   00000D74   01F2               MOVW    R31:R30, R5:R4
   \   00000D76   9636               ADIW    R31:R30, 6
   \   00000D78   01DC               MOVW    R27:R26, R25:R24
   \   00000D7A   961B               ADIW    R27:R26, 11
   \   00000D7C   ....               RCALL   MACcpy
    971          	IPcpy(&s->rip,&p->rip);
   \   00000D7E   01F2               MOVW    R31:R30, R5:R4
   \   00000D80   8502               LDD     R16, Z+10
   \   00000D82   8513               LDD     R17, Z+11
   \   00000D84   8524               LDD     R18, Z+12
   \   00000D86   8535               LDD     R19, Z+13
   \   00000D88   01FC               MOVW    R31:R30, R25:R24
   \   00000D8A   8703               STD     Z+11, R16
   \   00000D8C   8714               STD     Z+12, R17
   \   00000D8E   8725               STD     Z+13, R18
   \   00000D90   8736               STD     Z+14, R19
    972          	s->rport=p->rport;
   \   00000D92   01F2               MOVW    R31:R30, R5:R4
   \   00000D94   8500               LDD     R16, Z+8
   \   00000D96   8511               LDD     R17, Z+9
   \   00000D98   01FC               MOVW    R31:R30, R25:R24
   \   00000D9A   8B01               STD     Z+17, R16
   \   00000D9C   8B12               STD     Z+18, R17
    973          	CallTCPhook_null(TCP_EVENT_CONREQ,s);
   \   00000D9E   01DC               MOVW    R27:R26, R25:R24
   \   00000DA0   E001               LDI     R16, 1
   \   00000DA2   ....               RCALL   CallTCPhook_null
    974          	set_state_SYN_RECEIVED(s,&p->seqno,p->mss);
   \   00000DA4   01F2               MOVW    R31:R30, R5:R4
   \   00000DA6   8126               LDD     R18, Z+6
   \   00000DA8   8137               LDD     R19, Z+7
   \   00000DAA   E00E               LDI     R16, 14
   \   00000DAC   0E40               ADD     R4, R16
   \   00000DAE   E000               LDI     R16, 0
   \   00000DB0   1E50               ADC     R5, R16
   \   00000DB2   0182               MOVW    R17:R16, R5:R4
   \   00000DB4   01DC               MOVW    R27:R26, R25:R24
   \   00000DB6   ....               RCALL   set_state_SYN_RECEIVED
    975          	CallTCPhook_null(TCP_EVENT_QUE_REMOVE,s);
   \   00000DB8   01DC               MOVW    R27:R26, R25:R24
   \   00000DBA   E00C               LDI     R16, 12
   \   00000DBC   ....               RCALL   CallTCPhook_null
    976                }
    977                IPcpy(&tcpf->ip.dest_ip,&s->rip);
   \                     ??INT_ETH_PROCESS_PKT2_127:
   \   00000DBE   0123               MOVW    R5:R4, R7:R6
   \   00000DC0   01FC               MOVW    R31:R30, R25:R24
   \   00000DC2   8503               LDD     R16, Z+11
   \   00000DC4   8514               LDD     R17, Z+12
   \   00000DC6   8525               LDD     R18, Z+13
   \   00000DC8   8536               LDD     R19, Z+14
   \   00000DCA   01F3               MOVW    R31:R30, R7:R6
   \   00000DCC   8F06               STD     Z+30, R16
   \   00000DCE   8F17               STD     Z+31, R17
   \   00000DD0   A320               STD     Z+32, R18
   \   00000DD2   A331               STD     Z+33, R19
    978                MACcpy(ip->eth.src_mac+ETH_HWA_LEN,s->dst_mac+ETH_HWA_LEN);
   \   00000DD4   01FC               MOVW    R31:R30, R25:R24
   \   00000DD6   963B               ADIW    R31:R30, 11
   \   00000DD8   E00C               LDI     R16, 12
   \   00000DDA   0E40               ADD     R4, R16
   \   00000DDC   E000               LDI     R16, 0
   \   00000DDE   1E50               ADC     R5, R16
   \   00000DE0   01D2               MOVW    R27:R26, R5:R4
   \   00000DE2   ....               RCALL   MACcpy
    979                ptcp=(TCP_HEADER*)&s->lport;
   \   00000DE4   014C               MOVW    R9:R8, R25:R24
   \   00000DE6   E00F               LDI     R16, 15
   \   00000DE8   0E80               ADD     R8, R16
   \   00000DEA   E000               LDI     R16, 0
   \   00000DEC   1E90               ADC     R9, R16
    980                len=0;
   \   00000DEE   24AA               CLR     R10
   \   00000DF0   24BB               CLR     R11
    981                //if (s->state==TCP_STATE_QUE_CLIENT) goto L_SENDTCPWITHDATA;
    982                if (s->timer_init==255)
   \   00000DF2   01FC               MOVW    R31:R30, R25:R24
   \   00000DF4   A500               LDD     R16, Z+40
   \   00000DF6   3F0F               CPI     R16, 255
   \   00000DF8   F459               BRNE    ??INT_ETH_PROCESS_PKT2_128
    983                {
    984          	//Закрываем по таймауту
    985          	s->flags=TCP_FLAG_RESET; //Посылаем RST
   \   00000DFA   E004               LDI     R16, 4
   \   00000DFC   8F04               STD     Z+28, R16
    986          	while(CallTCPhook_null(TCP_EVENT_QUE_REMOVE,s)); //Пока всех не выбросим из очереди, все равно все устарело
   \                     ??INT_ETH_PROCESS_PKT2_129:
   \   00000DFE   01DC               MOVW    R27:R26, R25:R24
   \   00000E00   E00C               LDI     R16, 12
   \   00000E02   ....               RCALL   CallTCPhook_null
   \   00000E04   2300               TST     R16
   \   00000E06   F7D9               BRNE    ??INT_ETH_PROCESS_PKT2_129
    987          	ClosingTCP(TCP_EVENT_ABORT,s);
   \   00000E08   01DC               MOVW    R27:R26, R25:R24
   \   00000E0A   E004               LDI     R16, 4
   \   00000E0C   ....               RCALL   ClosingTCP
    988          	goto L_SENDTCPWITHDATA;
   \   00000E0E   CC12               RJMP    ??INT_ETH_PROCESS_PKT2_15
    989                }
    990                {
    991          	if (s->txreq==TCP_TXREQ_SEND) goto L_RESEND_OR_CHEAT;
   \                     ??INT_ETH_PROCESS_PKT2_128:
   \   00000E10   A501               LDD     R16, Z+41
   \   00000E12   3003               CPI     R16, 3
   \   00000E14   F031               BREQ    ??INT_ETH_PROCESS_PKT2_130
    992          	if (s->state==TCP_STATE_CONNECTED)
   \   00000E16   8D03               LDD     R16, Z+27
   \   00000E18   3006               CPI     R16, 6
   \   00000E1A   F009               BREQ    $+2+2
   \   00000E1C   C057               RJMP    ??INT_ETH_PROCESS_PKT2_131
    993          	{
    994          	  s->send_disp=0; //Т.к. производим откат
   \   00000E1E   A2A5               STD     Z+37, R10
   \   00000E20   A2A6               STD     Z+38, R10
    995          	L_RESEND_OR_CHEAT:
    996          	  s->type&=~TCP_TYPE_FLAG_DELAYED_ACK;
   \                     ??INT_ETH_PROCESS_PKT2_130:
   \   00000E22   8102               LDD     R16, Z+2
   \   00000E24   770F               ANDI    R16, 0x7F
   \   00000E26   8302               STD     Z+2, R16
    997          	  {
    998          	    unsigned int d;
    999          	    unsigned int sd=s->send_disp;
   \   00000E28   A105               LDD     R16, Z+37
   \   00000E2A   A116               LDD     R17, Z+38
   1000          	    UREG j=TCP_EVENT_SEND;
   \   00000E2C   E028               LDI     R18, 8
   1001          	    if (sd==0) j=TCP_EVENT_REGENERATE; //Если смещение 0, регенерируем от ACK
   \   00000E2E   2F30               MOV     R19, R16
   \   00000E30   2B31               OR      R19, R17
   \   00000E32   F409               BRNE    ??INT_ETH_PROCESS_PKT2_132
   \   00000E34   E026               LDI     R18, 6
   1002          	    d=s->rwin-sd;
   \                     ??INT_ETH_PROCESS_PKT2_132:
   \   00000E36   8C47               LDD     R4, Z+31
   \   00000E38   A050               LDD     R5, Z+32
   \   00000E3A   1A40               SUB     R4, R16
   \   00000E3C   0A51               SBC     R5, R17
   1003          	    UREG i;
   1004          	    len=0;
   1005          	    unsigned int nl=s->rmss;
   \   00000E3E   A101               LDD     R16, Z+33
   \   00000E40   A112               LDD     R17, Z+34
   1006          	    //Проверим размер окна и MSS приемной стороны
   1007          	    if (d==nl)
   \   00000E42   1640               CP      R4, R16
   \   00000E44   0651               CPC     R5, R17
   \   00000E46   F419               BRNE    ??INT_ETH_PROCESS_PKT2_133
   1008          	    {
   1009          	      //Этот пакет - последний для окна. После него не стоит продолжать передачу
   1010          	      s->txreq=TCP_TXREQ_STOP;
   \   00000E48   E002               LDI     R16, 2
   \   00000E4A   A701               STD     Z+41, R16
   \   00000E4C   C004               RJMP    ??INT_ETH_PROCESS_PKT2_134
   1011          	    }
   1012          	    if (d>nl)
   \                     ??INT_ETH_PROCESS_PKT2_133:
   \   00000E4E   1504               CP      R16, R4
   \   00000E50   0515               CPC     R17, R5
   \   00000E52   F408               BRCC    ??INT_ETH_PROCESS_PKT2_134
   1013          	    {
   1014          	      //Размер окна больше чем MSS
   1015          	      d=nl; //Количество данных для передачи равно MSS
   \   00000E54   0128               MOVW    R5:R4, R17:R16
   1016          	    }
   1017          	    i=255; if (d<i) i=d; d-=i;
   \                     ??INT_ETH_PROCESS_PKT2_134:
   \   00000E56   EF0F               LDI     R16, 255
   \   00000E58   1640               CP      R4, R16
   \   00000E5A   045A               CPC     R5, R10
   \   00000E5C   F408               BRCC    ??INT_ETH_PROCESS_PKT2_135
   \   00000E5E   2D04               MOV     R16, R4
   \                     ??INT_ETH_PROCESS_PKT2_135:
   \   00000E60   1A40               SUB     R4, R16
   \   00000E62   085A               SBC     R5, R10
   1018          	    nl=CallTCPhook(j,i,tcpf->data,s);
   \   00000E64   ....               LDI     R26, LOW((ETH_PKT + 54))
   \   00000E66   ....               LDI     R27, HIGH((ETH_PKT + 54))
   \   00000E68   2F10               MOV     R17, R16
   \   00000E6A   2F02               MOV     R16, R18
   \   00000E6C   C007               RJMP    ??INT_ETH_PROCESS_PKT2_136
   1019          	    for(;nl;)
   1020          	    {
   1021          	      len+=nl;
   1022          	      i=255; if (d<i) i=d; d-=i;
   1023          	      if (!i) break;
   1024          	      nl=CallTCPhook(TCP_EVENT_SEND,i,tcpf->data+len,s);
   \                     ??INT_ETH_PROCESS_PKT2_137:
   \   00000E6E   01FC               MOVW    R31:R30, R25:R24
   \   00000E70   ....               LDI     R26, LOW((ETH_PKT + 54))
   \   00000E72   ....               LDI     R27, HIGH((ETH_PKT + 54))
   \   00000E74   0DAA               ADD     R26, R10
   \   00000E76   1DBB               ADC     R27, R11
   \   00000E78   2F10               MOV     R17, R16
   \   00000E7A   E008               LDI     R16, 8
   \                     ??INT_ETH_PROCESS_PKT2_136:
   \   00000E7C   ....               RCALL   CallTCPhook
   \   00000E7E   E010               LDI     R17, 0
   \   00000E80   2300               TST     R16
   \   00000E82   F059               BREQ    ??INT_ETH_PROCESS_PKT2_138
   \   00000E84   0EA0               ADD     R10, R16
   \   00000E86   1EB1               ADC     R11, R17
   \   00000E88   EF0F               LDI     R16, 255
   \   00000E8A   1640               CP      R4, R16
   \   00000E8C   0651               CPC     R5, R17
   \   00000E8E   F408               BRCC    ??INT_ETH_PROCESS_PKT2_139
   \   00000E90   2D04               MOV     R16, R4
   \                     ??INT_ETH_PROCESS_PKT2_139:
   \   00000E92   1A40               SUB     R4, R16
   \   00000E94   0A51               SBC     R5, R17
   \   00000E96   2300               TST     R16
   \   00000E98   F751               BRNE    ??INT_ETH_PROCESS_PKT2_137
   1025          	    }
   1026          	  }	  
   1027          	  {
   1028          	    UREG i=s->flags;
   \                     ??INT_ETH_PROCESS_PKT2_138:
   \   00000E9A   01FC               MOVW    R31:R30, R25:R24
   \   00000E9C   8D04               LDD     R16, Z+28
   1029          	    if (len) i|=TCP_FLAG_PUSH; else i&=~TCP_FLAG_PUSH;
   \   00000E9E   2D1A               MOV     R17, R10
   \   00000EA0   291B               OR      R17, R11
   \   00000EA2   F011               BREQ    ??INT_ETH_PROCESS_PKT2_140
   \   00000EA4   6008               ORI     R16, 0x08
   \   00000EA6   C001               RJMP    ??INT_ETH_PROCESS_PKT2_141
   \                     ??INT_ETH_PROCESS_PKT2_140:
   \   00000EA8   7F07               ANDI    R16, 0xF7
   1030          	    s->flags=i;
   \                     ??INT_ETH_PROCESS_PKT2_141:
   \   00000EAA   8F04               STD     Z+28, R16
   1031          	  }
   1032          	  if (s->txreq==TCP_TXREQ_STOP)
   \   00000EAC   A501               LDD     R16, Z+41
   \   00000EAE   3002               CPI     R16, 2
   \   00000EB0   F419               BRNE    ??INT_ETH_PROCESS_PKT2_142
   1033          	  {
   1034          	    s->txreq=TCP_TXREQ_NONE;
   \   00000EB2   E000               LDI     R16, 0
   \   00000EB4   A701               STD     Z+41, R16
   1035          	    goto L_STOP_TX;
   \   00000EB6   C003               RJMP    ??INT_ETH_PROCESS_PKT2_143
   1036          	  }
   1037                    if (s->txreq==TCP_TXREQ_SEND)
   \                     ??INT_ETH_PROCESS_PKT2_142:
   \   00000EB8   A501               LDD     R16, Z+41
   \   00000EBA   3003               CPI     R16, 3
   \   00000EBC   F439               BRNE    ??INT_ETH_PROCESS_PKT2_131
   1038                    {
   1039          	  L_STOP_TX:
   1040          	    //Если есть данные, будем продолжать слать, нам пофиг ;)
   1041                      if (len==0) s->txreq=TCP_TXREQ_DUPACK; //Если данных нет, посылаем DUP для получения быстрого ACK на последний пакет
   \                     ??INT_ETH_PROCESS_PKT2_143:
   \   00000EBE   2D0A               MOV     R16, R10
   \   00000EC0   290B               OR      R16, R11
   \   00000EC2   F009               BREQ    $+2+2
   \   00000EC4   CBB7               RJMP    ??INT_ETH_PROCESS_PKT2_15
   \   00000EC6   E001               LDI     R16, 1
   \   00000EC8   A701               STD     Z+41, R16
   \   00000ECA   CBB4               RJMP    ??INT_ETH_PROCESS_PKT2_15
   1042          #ifdef IPSEQ_DEBUG
   1043          	    IPSEQ=2;
   1044          #endif
   1045                      goto L_SENDTCPWITHDATA; //Не надо трогать таймер после перепосылки
   1046                    }
   1047          	}
   1048                }
   1049                //Следующая итерация таймера, в 2 раза больше пауза
   1050                {
   1051          	UREG f=s->timer_init<<1;
   \                     ??INT_ETH_PROCESS_PKT2_131:
   \   00000ECC   A500               LDD     R16, Z+40
   \   00000ECE   0F00               LSL     R16
   1052          	if ((s->state==TCP_STATE_SYN_RECEIVED)||(s->state==TCP_STATE_SYN_SENT))
   \   00000ED0   8D13               LDD     R17, Z+27
   \   00000ED2   3012               CPI     R17, 2
   \   00000ED4   F011               BREQ    ??INT_ETH_PROCESS_PKT2_144
   \   00000ED6   3014               CPI     R17, 4
   \   00000ED8   F431               BRNE    ??INT_ETH_PROCESS_PKT2_145
   1053          	{
   1054          	  if (f>=(TCP_TIMER_INITV<<3))
   \                     ??INT_ETH_PROCESS_PKT2_144:
   \   00000EDA   3200               CPI     R16, 32
   \   00000EDC   F038               BRCS    ??INT_ETH_PROCESS_PKT2_146
   1055          	  {
   1056          	    s->timer_init=255; //Последний выстрел
   \   00000EDE   EF1F               LDI     R17, 255
   \   00000EE0   A710               STD     Z+40, R17
   1057          	  }
   1058          	  else
   1059          	    s->timer_init=f;
   1060          	}
   1061          	else
   1062          	{
   1063          	  if (f==(UREG)256)
   1064          	  {
   1065          	    f=255;
   1066          	  }
   1067          	  s->timer_init=f;
   1068          	}
   1069          	s->timer=f;
   \                     ??INT_ETH_PROCESS_PKT2_147:
   \   00000EE2   A307               STD     Z+39, R16
   1070                }
   1071          #ifdef IPSEQ_DEBUG
   1072                IPSEQ=3;
   1073          #endif
   1074                goto L_SENDTCPWITHDATA;
   \   00000EE4   CBA7               RJMP    ??INT_ETH_PROCESS_PKT2_15
   \                     ??INT_ETH_PROCESS_PKT2_145:
   \   00000EE6   2300               TST     R16
   \   00000EE8   F409               BRNE    ??INT_ETH_PROCESS_PKT2_146
   \   00000EEA   EF0F               LDI     R16, 255
   \                     ??INT_ETH_PROCESS_PKT2_146:
   \   00000EEC   A700               STD     Z+40, R16
   \   00000EEE   CFF9               RJMP    ??INT_ETH_PROCESS_PKT2_147
   1075              default:
   1076                s->timer_init=0; //какого вообще хрена тут делает таймер ;)
   \                     ??INT_ETH_PROCESS_PKT2_123:
   \   00000EF0   E000               LDI     R16, 0
   \   00000EF2   A700               STD     Z+40, R16
   \   00000EF4   CEA6               RJMP    ??INT_ETH_PROCESS_PKT2_115
   1077                break;
   1078              }
   1079            }
   1080          }
   \                     ??INT_ETH_PROCESS_PKT2_117:
   \   00000EF6   9189               LD      R24, Y+
   \   00000EF8   9199               LD      R25, Y+
   \   00000EFA   91A9               LD      R26, Y+
   \   00000EFC   91B9               LD      R27, Y+
   \   00000EFE   9049               LD      R4, Y+
   \   00000F00   9059               LD      R5, Y+
   \   00000F02   9069               LD      R6, Y+
   \   00000F04   9079               LD      R7, Y+
   \   00000F06   9089               LD      R8, Y+
   \   00000F08   9099               LD      R9, Y+
   \   00000F0A   90A9               LD      R10, Y+
   \   00000F0C   90B9               LD      R11, Y+
   \   00000F0E   9508               RET
   \   00000F10                      REQUIRE _A_TWAR
   \   00000F10                      REQUIRE _A_SPSR
   \   00000F10                      REQUIRE _A_SPDR
   \   00000F10                      REQUIRE _A_PORTD
   1081          
   1082          #pragma diag_default=Ta006
   1083          
   1084          #pragma diag_suppress=Ta006

   \                                 In  segment CODE, align 2, keep-with-next
   1085          __interrupt void TIMER_TASK(void)
   \                     TIMER_TASK:
   1086          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B72F               IN      R18, 0x3F
   1087            //Обработка таймеров
   1088           // if ((++IRS)&0x1FFF) return; //Каждые 8192*25.6мкс=210мс
   1089            if ((count_200ms_low+=8)) return;
   \   0000000C   9100....           LDS     R16, (IP + 4)
   \   00000010   5F08               SUBI    R16, 248
   \   00000012   9300....           STS     (IP + 4), R16
   \   00000016   2300               TST     R16
   \   00000018   F489               BRNE    ??TIMER_TASK_0
   1090            if ((count_200ms_high+=1)) return;
   \   0000001A   9100....           LDS     R16, (IP + 5)
   \   0000001E   9503               INC     R16
   \   00000020   9300....           STS     (IP + 5), R16
   \   00000024   2300               TST     R16
   \   00000026   F451               BRNE    ??TIMER_TASK_0
   1091            irs_high++;
   \   00000028   ....               LDI     R30, LOW(IP)
   \   0000002A   ....               LDI     R31, (IP) >> 8
   \   0000002C   8106               LDD     R16, Z+6
   \   0000002E   8117               LDD     R17, Z+7
   \   00000030   5F0F               SUBI    R16, 255
   \   00000032   4F1F               SBCI    R17, 255
   \   00000034   8306               STD     Z+6, R16
   \   00000036   8317               STD     Z+7, R17
   1092            TIMER_200ms=1;
   \   00000038   9A14               SBI     0x02, 0x04
   1093            WAKEUP_ETH();
   \   0000003A   9A11               SBI     0x02, 0x01
   1094          }
   \                     ??TIMER_TASK_0:
   \   0000003C   BF2F               OUT     0x3F, R18
   \   0000003E   9109               LD      R16, Y+
   \   00000040   9119               LD      R17, Y+
   \   00000042   9129               LD      R18, Y+
   \   00000044   91E9               LD      R30, Y+
   \   00000046   91F9               LD      R31, Y+
   \   00000048   9518               RETI
   \   0000004A                      REQUIRE _A_TWAR
   1095          #pragma diag_default=Ta006
   1096          
   1097          #pragma vector=EE_RDY_vect

   \                                 In  segment CODE, align 2, keep-with-next
   1098          __interrupt __raw void INT_ETH_PROCESS_PKT(void)
   \                     INT_ETH_PROCESS_PKT:
   1099          {
   1100             
   1101          }
   \   00000000   9518               RETI
   1102          
   1103          #pragma vector=TIMER0_COMP_vect

   \                                 In  segment CODE, align 2, keep-with-next
   1104          __interrupt __raw void INT_TIMER_DISPATCH(void)
   \                     INT_TIMER_DISPATCH:
   1105          {
   1106            if (TIMER_TASK_LOCK) return;
   \   00000000   9912               SBIC    0x02, 0x02
   \   00000002   C00B               RJMP    ??INT_TIMER_DISPATCH_0
   1107            TIMER_TASK_LOCK=1;
   \   00000004   9A12               SBI     0x02, 0x02
   1108          //  DISABLE_INT_ETH();
   1109            __enable_interrupt();
   \   00000006   9478               SEI
   1110            if (TIMER_TASK_TMR)
   \   00000008   9B13               SBIS    0x02, 0x03
   \   0000000A   C003               RJMP    ??INT_TIMER_DISPATCH_1
   1111            {
   1112              TIMER_TASK_TMR=0;
   \   0000000C   9813               CBI     0x02, 0x03
   1113              ((void(*)(void))TIMER_TASK)();
   \   0000000E   ....               RCALL   TIMER_TASK
   \   00000010   C001               RJMP    ??INT_TIMER_DISPATCH_2
   1114            }
   1115            else
   1116              TIMER_TASK_TMR=1;
   \                     ??INT_TIMER_DISPATCH_1:
   \   00000012   9A13               SBI     0x02, 0x03
   1117            __watchdog_reset();
   \                     ??INT_TIMER_DISPATCH_2:
   \   00000014   95A8               WDR
   1118            __disable_interrupt();
   \   00000016   94F8               CLI
   1119            TIMER_TASK_LOCK=0;
   \   00000018   9812               CBI     0x02, 0x02
   1120            //if (ETH_TASK_LOCK) return;
   1121            //if (ETH_TASK_WAKEUP) ENABLE_INT_ETH();
   1122          }
   \                     ??INT_TIMER_DISPATCH_0:
   \   0000001A   9518               RETI
   \   0000001C                      REQUIRE _A_TWAR

   \                                 In  segment INTVEC, offset 0x28, root
   \                     `??INT_TIMER_DISPATCH??INTVEC 40`:
   \   00000028   ........           JMP     INT_TIMER_DISPATCH

   \                                 In  segment INTVEC, offset 0x44, root
   \                     `??INT_ETH_PROCESS_PKT??INTVEC 68`:
   \   00000044   ........           JMP     INT_ETH_PROCESS_PKT
   1123          
   1124          /*
   1125          void ExecuteETH(void)
   1126          {
   1127            ENABLE_INT_ETH();
   1128          }
   1129          */

   Maximum stack usage in bytes:

     Function                    CSTACK RSTACK
     --------                    ------ ------
     AddTCPsocket                    0      2
     CallTCPhook                     0      2
       ->   Indirect call            0      2
     CallTCPhook_null                0      2
       -> CallTCPhook                0      2
     ClosingTCP                      0      2
       -> CallTCPhook_null           0      2
     ExtractMSS                      0      2
     INT_ETH_PROCESS_PKT             0      2
     INT_ETH_PROCESS_PKT2           12      2
       -> MACcpy                    12      2
       -> MACcpy                    12      2
       -> MACcpy                    12      2
       -> MACcpy                    12      2
       -> MACcmp                    12      2
       -> MACcpy                    12      2
       -> MACcpy                    12      2
       -> MACcmp                    12      2
       -> IPChecksum                12      2
       -> IPChecksum                12      2
       -> _netw_memcpy              12      2
       -> IPChecksum                12      2
       -> IPChecksum                12      2
       -> IPChecksum                12      2
       -> MACcpy                    12      2
       -> cmp_S_A                   12      2
       -> CallTCPhook               12      2
       -> CallTCPhook               12      2
       -> MACcpy                    12      2
       -> ExtractMSS                12      2
       -> ETH_STOP_BACK_PRESSURE    12      2
       -> enc28j60PacketSend        12      2
       -> cmp_A_S                   12      2
       -> ClosingTCP                12      2
       -> cmp_S_A                   12      2
       -> ClosingTCP                12      2
       -> cmp_A_S                   12      2
       -> inc32                     12      2
       -> ExtractMSS                12      2
       -> CallTCPhook_null          12      2
       -> CallTCPhook_null          12      2
       -> ExtractMSS                12      2
       -> set_state_SYN_RECEIVED    12      2
       -> _netw_memcpy              12      2
       -> inc32i                    12      2
       -> IPChecksum                12      2
       -> MACcpy                    12      2
       -> MACcpy                    12      2
       -> IPChecksum                12      2
       -> cmp_S_A                   12      2
       -> ETHfifo_free              12      2
       -> ETHfifo_free              12      2
       -> cmp_A_S                   12      2
       -> inc32                     12      2
       -> cmp_A_S                   12      2
       -> inc32i                    12      2
       -> CallTCPhook               12      2
       -> inc32i                    12      2
       -> CallTCPhook               12      2
       -> inc32                     12      2
       -> cmp_A_S                   12      2
       -> ClosingTCP                12      2
       -> _swapmem                  12      2
       -> inc32                     12      2
       -> inc32                     12      2
       -> _swapmem                  12      2
       -> ClosingTCP                12      2
       -> CallTCPhook_null          12      2
       -> ETH_STOP_BACK_PRESSURE    12      2
       -> MACcpy                    12      2
       -> netw_memset               12      2
       -> MACcpy                    12      2
       -> netw_memset               12      2
       -> CallTCPhook               12      2
       -> MACcpy                    12      2
       -> CallTCPhook_null          12      2
       -> set_state_SYN_RECEIVED    12      2
       -> CallTCPhook_null          12      2
       -> MACcpy                    12      2
       -> CallTCPhook_null          12      2
       -> ClosingTCP                12      2
       -> CallTCPhook               12      2
       -> CallTCPhook               12      2
     INT_TIMER_DISPATCH              0      2
       -> TIMER_TASK                 0      2
     IPChecksum                      0      2
     MACcmp                          0      2
     MACcpy                          0      2
     RemoveTCPsocket                 0      2
     TCPconnect                      1      2
       -> prepare_sock               1      2
     TIMER_TASK                      5      2
     _cmp32                          0      2
     _netw_memcpy                    0      2
     _swapmem                        0      2
     cmp_A_S                         0      2
       -> _cmp32                     0      2
     cmp_S_A                         0      2
       -> _cmp32                     0      2
     inc32                           0      2
       -> inc32i                     0      2
     inc32i                          0      2
     netw_memcpy                     0      2
       -> _netw_memcpy               0      2
     netw_memset                     0      2
     prepare_sock                    0      2
     set_state_SYN_RECEIVED          2      2
       -> prepare_sock               2      2
       -> inc32                      2      2


   Segment part sizes:

     Function/Label                   Bytes
     --------------                   -----
     _A_TWAR                             1
     _A_SPSR                             1
     _A_SPDR                             1
     _A_PORTD                            1
     _A_SREG                             1
     netw_memcpy                         0
     _netw_memcpy                       20
     cmp_A_S                             6
     cmp_S_A                             4
     _cmp32                             36
     inc32                               2
     inc32i                             28
     IPChecksum                         66
     MACcpy                             26
     MACcmp                             58
     _swapmem                           14
     netw_memset                        20
     AddTCPsocket                       26
     RemoveTCPsocket                    40
     prepare_sock                       70
     TCPconnect                        104
     ClosingTCP                         30
     CallTCPhook_null                    8
     CallTCPhook                        10
     IP                                 21
     _A_count_200ms_low
     ETH_PKT_len
     QUE_sock
     IPSEQ
     ETH_PKT_mode
     MAC0
     MASK_IP                             4
     ExtractMSS                         42
     set_state_SYN_RECEIVED             52
     debug_addr                          2
     INT_ETH_PROCESS_PKT2             3856
     TIMER_TASK                         74
     INT_ETH_PROCESS_PKT                 2
     INT_TIMER_DISPATCH                 28
     ??INT_TIMER_DISPATCH??INTVEC 40     4
     ??INT_ETH_PROCESS_PKT??INTVEC 68    4
      Others                             6

 
     5 bytes in segment ABSOLUTE
 4 622 bytes in segment CODE
     6 bytes in segment INITTAB
     8 bytes in segment INTVEC
    27 bytes in segment NEAR_Z
 
 4 622 bytes of CODE memory (+ 14 bytes shared)
    27 bytes of DATA memory (+  5 bytes shared)

Errors: none
Warnings: none
