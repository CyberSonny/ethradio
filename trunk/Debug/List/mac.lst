###############################################################################
#                                                                             #
#                                                       17/Feb/2010  18:31:04 #
# IAR C/C++ Compiler V5.30.0.20166/W32, Evaluation Version  for Atmel AVR     #
# Copyright 1996-2009 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  G:\AVR\EthRadio_buf_inline\mac.c                         #
#    Command line =  --string_literals_in_flash G:\AVR\EthRadio_buf_inline\ma #
#                    c.c --cpu=m32 -ms -o G:\AVR\EthRadio_buf_inline\Debug\Ob #
#                    j\ -lC G:\AVR\EthRadio_buf_inline\Debug\List\ -lB        #
#                    G:\AVR\EthRadio_buf_inline\Debug\List\                   #
#                    --initializers_in_flash -s9 --no_code_motion --debug     #
#                    -DENABLE_BIT_DEFINITIONS -e -I "C:\Program Files\IAR     #
#                    Systems\Embedded Workbench Evaluation 5.3\avr\INC\" -I   #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    Evaluation 5.3\avr\INC\CLIB\" --eeprom_size 1024         #
#                    --lock_regs=1                                            #
#    List file    =  G:\AVR\EthRadio_buf_inline\Debug\List\mac.lst            #
#    Object file  =  G:\AVR\EthRadio_buf_inline\Debug\Obj\mac.r90             #
#                                                                             #
#                                                                             #
###############################################################################

G:\AVR\EthRadio_buf_inline\mac.c
      1          /* Name: mac.c
      2           * Project: uNikeE - Software Ethernet MAC and upper layers stack
      3           * Author: Dmitry Oparin aka Rst7/CBSIE
      4           * Creation Date: 25-Jan-2009
      5           * Copyright: (C)2008,2009 by Rst7/CBSIE
      6           * License: GNU GPL v3 (see http://www.gnu.org/licenses/gpl-3.0.txt)
      7           */
      8          
      9          #include "nike_e.h"

   \                                 In  segment ABSOLUTE, at 0x53
   \   <__C106> volatile __io _A_TCCR0
   \                     _A_TCCR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   <__C118> volatile __io _A_TIMSK
   \                     _A_TIMSK:
   \   00000000                      DS8 1
     10          
     11          #ifdef DEV_IS_MAC
     12          

   \                                 In  segment NEAR_N, align 1, keep-with-next
     13          __no_init ETH_FRAME ETH_PKT;// @ ETH_PKT_BASE;
   \                     ETH_PKT:
   \   00000000                      DS8 1398
     14          
     15          //volatile char ETH_RX_HARDWARE_ERROR1;
     16          //volatile char ETH_RX_HARDWARE_ERROR2;
     17          
     18          //volatile char COPY_EIMSK;
     19          //volatile char COPY_TIMSK0;
     20          
     21          /* * commented for ENC28J60 port
     22          
     23          */

   \                                 In  segment CODE, align 2, keep-with-next
     24          __monitor void ETH_STOP_BACK_PRESSURE(void)
   \                     ETH_STOP_BACK_PRESSURE:
     25          {
   \   00000000   B70F               IN      R16, 0x3F
   \   00000002   94F8               CLI
     26            /* commented for ENC28J60 port
     27            if (ETH_PKT_mode) return;
     28            if (ETH_TXEN)
     29            {
     30              ETH_DIR_RX;
     31              ETH_TXEN=0;
     32            }*/
     33          }
   \   00000004   BF0F               OUT     0x3F, R16
   \   00000006   9508               RET
     34          

   \                                 In  segment CODE, align 2, keep-with-next
     35          void InitEthernetHW(void)
   \                     InitEthernetHW:
     36          {
     37            UINT8 *p=(UINT8 *)(&ETH_PKT);
   \   00000000   ....               LDI     R30, LOW(ETH_PKT)
   \   00000002   ....               LDI     R31, (ETH_PKT) >> 8
   \   00000004   E000               LDI     R16, 0
     38            do
     39            {
     40              *p++=0;
   \                     ??InitEthernetHW_0:
   \   00000006   9301               ST      Z+, R16
     41            }while(P_HIGH(p)!=P_HIGH(&ETH_PKT+1));
   \   00000008   ....               CPI     R31, HIGH((ETH_PKT + 1398))
   \   0000000A   F7E9               BRNE    ??InitEthernetHW_0
     42            ETH_INIT_TX_INT;
   \   0000000C   E001               LDI     R16, 1
   \   0000000E   BF03               OUT     0x33, R16
   \   00000010   B709               IN      R16, 0x39
   \   00000012   6002               ORI     R16, 0x02
   \   00000014   BF09               OUT     0x39, R16
     43              /* ENC28j60 patch
     44            ETH_INIT_PORT_1;
     45            ETH_INIT_PORT_2;
     46            ETH_INIT_RX_INT;
     47            ETH_INIT_TX_INT;
     48            ETH_INIT_NETWORK_INT; // start-up Timer
     49             */
     50          }
   \   00000016   9508               RET
   \   00000018                      REQUIRE _A_TCCR0
   \   00000018                      REQUIRE _A_TIMSK
     51          
     52          #endif
     53          
     54          
     55          
     56          
     57          
     58          

   Maximum stack usage in bytes:

     Function               CSTACK RSTACK
     --------               ------ ------
     ETH_STOP_BACK_PRESSURE     0      2
     InitEthernetHW             0      2


   Segment part sizes:

     Function/Label         Bytes
     --------------         -----
     _A_TCCR0                  1
     _A_TIMSK                  1
     ETH_PKT                1398
     ETH_STOP_BACK_PRESSURE    8
     InitEthernetHW           24

 
     2 bytes in segment ABSOLUTE
    32 bytes in segment CODE
 1 398 bytes in segment NEAR_N
 
    32 bytes of CODE memory
 1 398 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
